<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欸嘿/Blog</title>
  
  <subtitle>Fighting !!!</subtitle>
  <link href="http://omygan.github.io/atom.xml" rel="self"/>
  
  <link href="http://omygan.github.io/"/>
  <updated>2023-01-07T07:08:45.811Z</updated>
  <id>http://omygan.github.io/</id>
  
  <author>
    <name>欸嘿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库和身份认证</title>
    <link href="http://omygan.github.io/posts/498e24eb.html"/>
    <id>http://omygan.github.io/posts/498e24eb.html</id>
    <published>2023-01-07T06:50:08.000Z</published>
    <updated>2023-01-07T07:08:45.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库和身份认证"><a href="#数据库和身份认证" class="headerlink" title="数据库和身份认证"></a>数据库和身份认证</h1><h2 id="Node-操作-mysql"><a href="#Node-操作-mysql" class="headerlink" title="Node 操作 mysql"></a>Node 操作 mysql</h2><h3 id="配置-mysql-模块"><a href="#配置-mysql-模块" class="headerlink" title="配置 mysql 模块"></a>配置 mysql 模块</h3><ol><li>安装 mysql 模块</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><ol><li>建立连接</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>测试是否正常工作</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;select 1&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="操作-mysql-数据库"><a href="#操作-mysql-数据库" class="headerlink" title="操作 mysql 数据库"></a>操作 mysql 数据库</h3><ol><li>查询数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;select * from users&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>插入数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ? 表示占位符</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;insert into users values(?, ?)&#x27;</span></span><br><span class="line"><span class="comment">// 使用数组的形式为占位符指定具体的值</span></span><br><span class="line">db.<span class="title function_">query</span>(sql, [username, password], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>向表中新增数据时，如果数据对象的每个属性和数据表的字段一一对应，则可以通过如下方式快速插入数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">username</span>:<span class="string">&#x27;Bruce&#x27;</span>, <span class="attr">password</span>:<span class="string">&#x27;55520&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;insert into users set ?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sql, user, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>更新数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;update users set username=?, password=? where id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sql, [username, password, id], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>快捷方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">id</span>:<span class="number">7</span>,<span class="attr">username</span>:<span class="string">&#x27;Bruce&#x27;</span>,<span class="attr">password</span>:<span class="string">&#x27;55520&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;update users set ? where id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sql, [user, user.<span class="property">id</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>删除数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;delete from users where id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sql, id, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用 delete 语句会真正删除数据，保险起见，使用标记删除的形式，模拟删除的动作。即在表中设置状态字段，标记当前的数据是否被删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;update users set status=1 where id=?&#x27;</span>, <span class="number">7</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Web-开发模式"><a href="#Web-开发模式" class="headerlink" title="Web 开发模式"></a>Web 开发模式</h2><h3 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h3><p>服务器发送给客户端的 HTML 页面，是在服务器通过字符串的拼接动态生成的。因此客户端不需要使用 Ajax 额外请求页面的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index.html&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;Bruce&#x27;</span>, <span class="attr">age</span>: <span class="number">29</span> &#125;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="string">`&lt;h1&gt;username:<span class="subst">$&#123;user.name&#125;</span>, age:<span class="subst">$&#123;user.age&#125;</span>&lt;/h1&gt;`</span></span><br><span class="line">  res.<span class="title function_">send</span>(html)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>前端耗时短。浏览器只需直接渲染页面，无需额外请求数据。</li><li>有利于 SEO。服务器响应的是完整的 HTML 页面内容，有利于爬虫爬取信息。</li></ul><p>缺点：</p><ul><li>占用服务器资源。服务器需要完成页面内容的拼接，若请求比较多，会对服务器造成一定访问压力。</li><li>不利于前后端分离，开发效率低。</li></ul><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>前后端分离的开发模式，依赖于 Ajax 技术的广泛应用。后端只负责提供 API 接口，前端使用 Ajax 调用接口。</p><p>优点：</p><ul><li>开发体验好。前端专业页面开发，后端专注接口开发。</li><li>用户体验好。页面局部刷新，无需重新请求页面。</li><li>减轻服务器的渲染压力。页面最终在浏览器里生成。</li></ul><p>缺点：</p><ul><li>不利于 SEO。完整的 HTML 页面在浏览器拼接完成，因此爬虫无法爬取页面的有效信息。Vue、React 等框架的 SSR（server side render）技术能解决 SEO 问题。</li></ul><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><ul><li>企业级网站，主要功能是展示，没有复杂交互，且需要良好的 SEO，可考虑服务端渲染</li><li>后台管理项目，交互性强，无需考虑 SEO，可使用前后端分离</li><li>为同时兼顾首页渲染速度和前后端分离开发效率，可采用首屏服务器端渲染+其他页面前后端分离的开发模式</li></ul><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><h3 id="Session-认证机制"><a href="#Session-认证机制" class="headerlink" title="Session 认证机制"></a>Session 认证机制</h3><p>服务端渲染推荐使用 Session 认证机制</p><h4 id="Session-工作原理"><a href="#Session-工作原理" class="headerlink" title="Session 工作原理"></a>Session 工作原理</h4><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/Session.c66d5499.png" alt=""></p><h4 id="Express-中使用-Session-认证"><a href="#Express-中使用-Session-认证" class="headerlink" title="Express 中使用 Session 认证"></a>Express 中使用 Session 认证</h4><ol><li>安装 express-session 中间件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure><ol><li>配置中间件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;Bruce&#x27;</span>, <span class="comment">// secret 的值为任意字符串</span></span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitalized</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>向 session 中存数据</li></ol><p>中间件配置成功后，可通过 <code>req.session</code> 访问 session 对象，存储用户信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">isLogin</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;login done&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>从 session 取数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">isLogin</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;fail&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>清空 session</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 清空当前客户端的session信息</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;logout done&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="JWT-认证机制"><a href="#JWT-认证机制" class="headerlink" title="JWT 认证机制"></a>JWT 认证机制</h3><p>前后端分离推荐使用 JWT（JSON Web Token）认证机制，是目前最流行的跨域认证解决方案</p><h4 id="JWT-工作原理"><a href="#JWT-工作原理" class="headerlink" title="JWT 工作原理"></a>JWT 工作原理</h4><p>Session 认证的局限性：</p><ul><li>Session 认证机制需要配合 Cookie 才能实现。由于 Cookie 默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能实现跨域 Session 认证。</li><li>当前端请求后端接口不存在跨域问题的时候，推荐使用 Session 身份认证机制。</li><li>当前端需要跨域请求后端接口的时候，不推荐使用 Session 身份认证机制，推荐使用 JWT 认证机制</li></ul><p>JWT 工作原理图：</p><p>用户的信息通过 Token 字符串的形式，保存在客户端浏览器中。服务器通过还原 Token 字符串的形式来认证用户的身份。</p><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/JWT.6a82c41d.png" alt=""></p><p>JWT 组成部分：</p><ul><li>Header、Payload、Signature</li><li>Payload 是真正的用户信息，加密后的字符串</li><li>Header 和 Signature 是安全性相关部分，保证 Token 安全性</li><li>三者使用 <code>.</code> 分隔</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Header</span>.<span class="property">Payload</span>.<span class="property">Signature</span></span><br><span class="line"></span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.<span class="property">eyJpZCI6MTcsInVzZXJuYW1lIjoiQnJ1Y2UiLCJwYXNzd29yZCI6IiIsIm5pY2tuYW1lIjoiaGVsbG8iLCJlbWFpbCI6InNjdXRAcXEuY29tIiwidXNlcl9waWMiOiIiLCJpYXQiOjE2NDE4NjU3MzEsImV4cCI6MTY0MTkwMTczMX0</span>.<span class="property">bmqzAkNSZgD8IZxRGGyVlVwGl7EGMtWitvjGD</span>-a5U5c</span><br></pre></td></tr></table></figure><p>JWT 使用方式：</p><ul><li>客户端会把 JWT 存储在 localStorage 或 sessionStorage 中</li><li>此后客户端与服务端通信需要携带 JWT 进行身份认证，将 JWT 存在 HTTP 请求头 Authorization 字段中</li><li>加上 Bearer 前缀</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Authorization</span>: <span class="title class_">Bearer</span> &lt;token&gt;</span><br></pre></td></tr></table></figure><h4 id="Express-使用-JWT"><a href="#Express-使用-JWT" class="headerlink" title="Express 使用 JWT"></a>Express 使用 JWT</h4><ol><li>安装</li></ol><ul><li>jsonwebtoken 用于生成 JWT 字符串</li><li>express-jwt 用于将 JWT 字符串解析还原成 JSON 对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><ol><li>定义 secret 密钥</li></ol><ul><li>为保证 JWT 字符串的安全性，防止其在网络传输过程中被破解，需定义用于加密和解密的 secret 密钥</li><li>生成 JWT 字符串时，使用密钥加密信息，得到加密好的 JWT 字符串</li><li>把 JWT 字符串解析还原成 JSON 对象时，使用密钥解密</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密钥为任意字符串</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;Bruce&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>生成 JWT 字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">    <span class="comment">// jwt.sign() 生成 JWT 字符串</span></span><br><span class="line">    <span class="comment">// 参数：用户信息对象、加密密钥、配置对象-token有效期</span></span><br><span class="line">    <span class="comment">// 尽量不保存敏感信息，因此只有用户名，没有密码</span></span><br><span class="line">    <span class="attr">token</span>: jwt.<span class="title function_">sign</span>(&#123;<span class="attr">username</span>: userInfo.<span class="property">username</span>&#125;, secretKey, &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;10h&#x27;</span>&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>JWT 字符串还原为 JSON 对象</li></ol><ul><li>客户端访问有权限的接口时，需通过请求头的 <code>Authorization</code> 字段，将 Token 字符串发送到服务器进行身份认证</li><li>服务器可以通过 express-jwt 中间件将客户端发送过来的 Token 解析还原成 JSON 对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unless(&#123; path: [/^\/api\//] &#125;) 指定哪些接口无需访问权限</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123; <span class="attr">secret</span>: secretKey &#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))</span><br></pre></td></tr></table></figure><ol><li>获取用户信息</li></ol><ul><li>当 express-jwt 中间件配置成功后，即可在那些有权限的接口中，使用 <code>req.user</code> 对象，来访问从 JWT 字符串中解析出来的用户信息</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/getinfo&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">user</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;获取信息成功&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: req.<span class="property">user</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>捕获解析 JWT 失败后产生的错误</li></ol><ul><li>当使用 express-jwt 解析 Token 字符串时，如果客户端发送过来的 Token 字符串过期或不合法，会产生一个解析失败的错误，影响项目的正常运行</li><li>通过 Express 的错误中间件，捕获这个错误并进行相关的处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">401</span>, <span class="attr">message</span>: <span class="string">&#x27;Invalid token&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;Unknown error&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库和身份认证&quot;&gt;&lt;a href=&quot;#数据库和身份认证&quot; class=&quot;headerlink&quot; title=&quot;数据库和身份认证&quot;&gt;&lt;/a&gt;数据库和身份认证&lt;/h1&gt;&lt;h2 id=&quot;Node-操作-mysql&quot;&gt;&lt;a href=&quot;#Node-操作-mysql&quot; c</summary>
      
    
    
    
    <category term="Node" scheme="http://omygan.github.io/categories/Node/"/>
    
    
    <category term="Node" scheme="http://omygan.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Express搭建服务器</title>
    <link href="http://omygan.github.io/posts/c8477d3a.html"/>
    <id>http://omygan.github.io/posts/c8477d3a.html</id>
    <published>2023-01-07T03:00:12.000Z</published>
    <updated>2023-01-07T06:42:08.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Express-初体验"><a href="#Express-初体验" class="headerlink" title="Express 初体验"></a>Express 初体验</h2><p>基于node.js 平台 快速 开放 极简的web开发框架, 用于快速搭建web服务器, 对前端的请求做出响应</p><p>注意: express不是node自带的模块, 需要我们先安装, 再使用</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    express创建好一个app应用对象之后, 该对象有5个常用的方法</span></span><br><span class="line"><span class="comment">    1. app.get()      监听前端发起的get请求</span></span><br><span class="line"><span class="comment">    2. app.post()     监听前端发起的post请求</span></span><br><span class="line"><span class="comment">    3. app.all()    监听前端发起的所有网络请求</span></span><br><span class="line"><span class="comment">    4. app.use()    为express应用其它插件(中间件)</span></span><br><span class="line"><span class="comment">    5. app.listen()  开启express服务器并设置端口号</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    get(), post(), all() 方法都接收两个参数:</span></span><br><span class="line"><span class="comment">    参数1: 路由</span></span><br><span class="line"><span class="comment">    参数2: 回调函数, 改回调会在监听到匹配的网络请求时触发,其它不匹配的网络请求不会触发</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    每个监听的回调函数里都有两个形参:</span></span><br><span class="line"><span class="comment">    1. req对象(request): 存储了本次前端发起的请求的所有数据信息</span></span><br><span class="line"><span class="comment">        req对象的常用属性</span></span><br><span class="line"><span class="comment">            1.1 req.query 存储了前端的get请求传递来的所有参数数据对象</span></span><br><span class="line"><span class="comment">            1.2 req.body 存储了前端的post请求传递来的数据参数数据对象(需要body-parset插件配合才可以获取到)</span></span><br><span class="line"><span class="comment">            1.3 req.path 存储了本次前端发起网络请求的路由字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2. res对象(response): 用于服务器对本次前端的请求作出回应</span></span><br><span class="line"><span class="comment">        res对象的常用方法</span></span><br><span class="line"><span class="comment">            2.1 res.send()      向前端返回数据并结束响应(字符串/对象/数组/json字符串/数字)</span></span><br><span class="line"><span class="comment">            2.2 res.json()      向前端返回数据并结束响应(字符串/对象/数组/json字符串)</span></span><br><span class="line"><span class="comment">            2.3 res.jsonp()     向前端返回jsonp跨域请求的数据并结束响应</span></span><br><span class="line"><span class="comment">            2.4 res.sendFile()</span></span><br><span class="line"><span class="comment">            2.5 res.status()</span></span><br><span class="line"><span class="comment">            2.6 res.end()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>安装 Express：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><p>创建服务器，监听客户端请求，并返回内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 导入跨域模块</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="comment">// 配置body-parser按照什么方式解析前端的post数据</span></span><br><span class="line"><span class="keyword">const</span> bp = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 使用cors模块</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"><span class="comment">// 使用body-parser模块</span></span><br><span class="line"><span class="comment">// 按照键值对</span></span><br><span class="line">app.<span class="title function_">use</span>(bp.<span class="title function_">urlencoded</span>());</span><br><span class="line"><span class="comment">// 按照json格式解析</span></span><br><span class="line">app.<span class="title function_">use</span>(bp.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听客户端的 GET 和 POST 请求，并向客户端响应具体的内容</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ajaxGet&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">    <span class="keyword">let</span> &#123;username, password&#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username, password);</span><br><span class="line">    <span class="keyword">if</span>(username == <span class="string">&#x27;1678212947@qq.com&#x27;</span> &amp;&amp; password == <span class="string">&quot;123456&quot;</span>)&#123;</span><br><span class="line">        <span class="comment">// res.end(&#x27;登录成功&#x27;);</span></span><br><span class="line">        res.<span class="title function_">send</span>(&#123;<span class="attr">msg</span>:<span class="string">&#x27;登录成功&#x27;</span>&#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;登录失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/jsonp&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>);</span><br><span class="line">    <span class="keyword">let</span> &#123;value, callback&#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value, callback);</span><br><span class="line">    <span class="keyword">let</span> resData = &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:[&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>, <span class="attr">title</span>:<span class="string">&#x27;标题1&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;内容1&#x27;</span>&#125;,&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>, <span class="attr">title</span>:<span class="string">&#x27;标题2&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;内容2&#x27;</span>&#125;,&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>, <span class="attr">title</span>:<span class="string">&#x27;标题3&#x27;</span>, <span class="attr">content</span>:<span class="string">&#x27;内容3&#x27;</span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(value === <span class="string">&#x27;666&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// res.end(`$&#123;cb&#125;($&#123;JSON.stringify(resData)&#125;)`);</span></span><br><span class="line">        <span class="comment">// 当使用jsonp方法时, 前端的ajax的jsonp字段只能叫做callback</span></span><br><span class="line">        res.<span class="title function_">jsonp</span>(resData);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">jsonp</span>(&#123;<span class="attr">msg</span>: <span class="string">&#x27;error&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/ajaxPost&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">    <span class="keyword">let</span> &#123;username, password&#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">let</span> resData;</span><br><span class="line">    <span class="keyword">if</span>(username === <span class="string">&#x27;李四&#x27;</span> &amp;&amp; password === <span class="string">&#x27;789&#x27;</span>)&#123;</span><br><span class="line">        resData = &#123;<span class="attr">code</span>: <span class="string">&#x27;ok&#x27;</span>, <span class="attr">userInfo</span>: &#123;username, <span class="attr">age</span>:<span class="number">20</span>, <span class="attr">token</span>:<span class="string">&#x27;dsadadwasd13waf34saf&#x27;</span>&#125;&#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        resData = &#123;<span class="attr">code</span>: <span class="string">&#x27;error&#x27;</span>, <span class="attr">msg</span>: <span class="string">&#x27;用户名密码错误!&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(resData);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的 :id 是一个动态的参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:ids/:username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// req.params 是动态匹配到的 URL 参数，默认是一个空对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 &#x27;废物&#x27; 请求</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 开启服务器并设置端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">61234</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已开启, 监听61234端口&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    路由: url地址端口号, ?之间的内容</span></span><br><span class="line"><span class="comment">    1. node里的路由是区分不同的网络请求</span></span><br><span class="line"><span class="comment">    2. 前端框架里(vue react)作用是区分不同的页面</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>前端使用jquery发起Ajax请求后台服务器地址<a href="http://127.0.0.1:61234下的**/ajaxGet**路径内容">http://127.0.0.1:61234下的**/ajaxGet**路径内容</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button:eq(0)&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1:61234/ajaxGet&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">username</span>: $(<span class="string">&#x27;#i1&#x27;</span>).<span class="title function_">val</span>(),</span><br><span class="line">            <span class="attr">password</span>: $(<span class="string">&#x27;#i2&#x27;</span>).<span class="title function_">val</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h3><ul><li>通过 <code>express.static()</code> 方法可创建静态资源服务器，向外开放访问静态资源。</li><li>Express 在指定的静态目录中查找文件，并对外提供资源的访问路径，存放静态文件的目录名不会出现在 URL 中</li><li>访问静态资源时，会根据托管顺序查找文件</li><li>可为静态资源访问路径添加前缀</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;files&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/bruce&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;bruce&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可直接访问 public, files 目录下的静态资源</span></span><br><span class="line"><span class="comment">http://localhost:3000/images/bg.jpg</span></span><br><span class="line"><span class="comment">http://localhost:3000/css/style.css</span></span><br><span class="line"><span class="comment">http://localhost:3000/js/login.js</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">通过带有 /bruce 前缀的地址访问 bruce 目录下的文件</span></span><br><span class="line"><span class="comment">http://localhost:8080/bruce/images/logo.png</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Express-路由"><a href="#Express-路由" class="headerlink" title="Express 路由"></a>Express 路由</h2><p>创建路由模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载具体路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Add new user.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外导出路由对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><p>注册路由模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册路由模块，添加访问前缀</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Express-中间件"><a href="#Express-中间件" class="headerlink" title="Express 中间件"></a>Express 中间件</h2><ul><li>中间件是指流程的中间处理环节</li><li>服务器收到请求后，可先调用中间件进行预处理</li><li>中间件是一个函数，包含 <code>req, res, next</code> 三个参数，<code>next()</code> 参数把流转关系交给下一个中间件或路由</li></ul><p>中间件注意事项；</p><ul><li>在注册路由之前注册中间件（错误级别中间件除外）</li><li>中间件可连续调用多个</li><li>别忘记调用 <code>next()</code> 函数</li><li><code>next()</code> 函数后别写代码</li><li>多个中间件共享 <code>req</code>、 <code>res</code>对象</li></ul><h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><ul><li>通过 <code>app.use()</code> 定义的中间件为全局中间件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第一个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第1个全局中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 定义第二个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第2个全局中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw1</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第一个局部生效的中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw2</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第二个局部生效的中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种定义局部中间件的方式</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/hello&#x27;</span>, mw2, mw1, <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">send</span>(<span class="string">&#x27;hello page.&#x27;</span>))</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, [mw1, mw2], <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">send</span>(<span class="string">&#x27;about page.&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h3><ol><li>应用级别的中间件</li></ol><ul><li>通过 <code>app.use()</code> 或 <code>app.get()</code> 或 <code>app.post()</code> ，绑定到 <code>app</code> 实例上的中间件</li></ul><ol><li>路由级别的中间件</li></ol><ul><li>绑定到 <code>express.Router()</code> 实例上的中间件，叫做路由级别的中间件。用法和应用级别中间件没有区别。应用级别中间件是绑定到 <code>app</code> 实例上，路由级别中间件绑定到 <code>router</code> 实例上。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure><ol><li>错误级别的中间件</li></ol><ul><li>用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</li><li>错误级别中间件的处理函数中，必须有 4 个形参，形参顺序从前到后分别是 <code>(err, req, res, next)</code> 。</li><li>错误级别的中间件必须注册在所有路由之后</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;服务器内部发生了错误！&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义错误级别的中间件，捕获整个项目的异常错误，从而防止程序的崩溃</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生了错误！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Error：&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>Express 内置中间件</li></ol><p>自 Express 4.16.0 版本开始，Express 内置了 3 个常用的中间件，极大的提高了 Express 项目的开发效率和体验：</p><ul><li><code>express.static</code> 快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等（无兼容性）</li><li><code>express.json</code> 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li><li><code>express.urlencoded</code> 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br></pre></td></tr></table></figure><ol><li>第三方中间件</li></ol><h2 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h2><h3 id="cors-中间件解决跨域"><a href="#cors-中间件解决跨域" class="headerlink" title="cors 中间件解决跨域"></a>cors 中间件解决跨域</h3><ul><li>安装中间件：<code>npm install cors</code></li><li>导入中间件：<code>const cors = require(&#39;cors&#39;)</code></li><li>配置中间件：<code>app.use(cors())</code></li></ul><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><ul><li>CORS（Cross-Origin Resource Sharing，跨域资源共享）解决跨域，是通过 HTTP 响应头决定浏览器是否阻止前端 JS 代码跨域获取资源</li><li>浏览器的同源安全策略默认会阻止网页“跨域”获取资源。但如果接口服务器配置了 CORS 相关的 HTTP 响应头，就可解除浏览器端的跨域访问限制</li><li>CORS 主要在服务器端进行配置。客户端浏览器无须做任何额外的配置，即可请求开启了 CORS 的接口。</li><li>CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服务端接口（例如：IE10+、Chrome4+、FireFox3.5+）。</li></ul><h3 id="CORS-常见响应头"><a href="#CORS-常见响应头" class="headerlink" title="CORS 常见响应头"></a>CORS 常见响应头</h3><ul><li><code>Access-Control-Allow-Origin</code>：制定了允许访问资源的外域 URL</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://bruceblog.io&#x27;</span>)</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>Access-Control-Allow-Headers</code></li><li>默认情况下，CORS 仅支持客户端向服务器发送如下的 9 个请求头：<code>Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type （值仅限于 text/plain、multipart/form-data、application/x-www-form-urlencoded 三者之一）</code></li><li>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 A<code>ccess-Control-Allow-Headers</code> 对额外的请求头进行声明，否则这次请求会失败！</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>Access-Control-Allow-Methods</code></li><li>默认情况下，CORS 仅支持客户端发起 GET、POST、HEAD 请求。如果客户端希望通过 PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过 <code>Access-Control-Alow-Methods</code> 来指明实际请求所允许使用的 HTTP 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)</span><br><span class="line">res.<span class="title function_">setHEader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="CORS-请求分类"><a href="#CORS-请求分类" class="headerlink" title="CORS 请求分类"></a>CORS 请求分类</h3><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><ul><li>请求方式：GET、POST、HEAD 三者之一</li><li>HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type（只有三个值 application/x-www-formurlencoded、multipart/form-data、text/plain）</li></ul><h4 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h4><ul><li>请求方式为 GET、POST、HEAD 之外的请求 Method 类型</li><li>请求头中包含自定义头部字段</li><li>向服务器发送了 application/json 格式的数据</li></ul><p>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一次的 OPTION 请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Express-初体验&quot;&gt;&lt;a href=&quot;#Express-初体验&quot; class=&quot;headerlink&quot; title=&quot;Express 初体验&quot;&gt;&lt;/a&gt;Express 初体验&lt;/h2&gt;&lt;p&gt;基于node.js 平台 快速 开放 极简的web开发框架, 用于快</summary>
      
    
    
    
    <category term="Node" scheme="http://omygan.github.io/categories/Node/"/>
    
    
    <category term="Node" scheme="http://omygan.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js基础</title>
    <link href="http://omygan.github.io/posts/bca3d383.html"/>
    <id>http://omygan.github.io/posts/bca3d383.html</id>
    <published>2023-01-07T01:06:17.000Z</published>
    <updated>2023-01-07T02:51:47.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nodejs-基础"><a href="#Nodejs-基础" class="headerlink" title="Nodejs 基础"></a>Nodejs 基础</h1><h2 id="初识-Nodejs"><a href="#初识-Nodejs" class="headerlink" title="初识 Nodejs"></a>初识 Nodejs</h2><blockquote><p>Node.js® 是一个基于 Chrome V8 引擎 的 JavaScript 运行时环境</p></blockquote><ul><li>基于 <a href="http://www.expressjs.com.cn/">Express 框架 (opens new window)</a>，可以快速构建 Web 应用</li><li>基于 <a href="https://electronjs.org/">Electron 框架 (opens new window)</a>，可以构建跨平台的桌面应用</li><li>基于 <a href="http://restify.com/">restify 框架 (opens new window)</a>，可以快速构建 API 接口项目</li><li>读写和操作数据库、创建实用的命令行工具辅助前端开发、etc…</li></ul><h2 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer 缓冲区"></a>Buffer 缓冲区</h2><blockquote><p><a href="http://nodejs.cn/api/buffer.html">Buffer 缓冲区文档</a></p></blockquote><ul><li>Buffer 的结构与数组类似，操作方法也与数组类似</li><li>数组不能存储二进制文件，Buffer 是专门存储二进制数据的</li><li>Buffer 存储的是二进制数据，显示时以 16 进制的形式显示</li><li>Buffer 每一个元素范围是 00~ff，即 0~255、00000000~11111111</li><li>每一个元素占用一个字节内存</li><li>Buffer 是对底层内存的直接操作，因此大小一旦确定就不能修改</li></ul><p>Buffer 常用方法：</p><ul><li><code>Buffer.from(str[, encoding])</code>：将一个字符串转换为 Buffer</li><li><code>Buffer.alloc(size)</code>：创建指定大小的 Buffer</li><li><code>Buffer.alloUnsafe(size)</code>：创建指定大小的 Buffer，可能包含敏感数据（分配内存时不会清除内存残留的数据）</li><li><code>buf.toString()</code>：将 Buffer 数据转为字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello前端&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 占用内存的大小，一个汉字3字节 13</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="property">length</span>)</span><br><span class="line"><span class="comment">// 字符串的长度 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>)</span><br><span class="line"><span class="comment">// 8进制输出第一个元素 145</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf[<span class="number">1</span>].<span class="title function_">toString</span>(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个10个字节的buffer</span></span><br><span class="line"><span class="keyword">var</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">//通过索引，来操作buf中的元素</span></span><br><span class="line">buf2[<span class="number">0</span>] = <span class="number">88</span></span><br><span class="line">buf2[<span class="number">1</span>] = <span class="number">255</span></span><br><span class="line">buf2[<span class="number">2</span>] = <span class="number">0xaa</span></span><br><span class="line">buf2[<span class="number">3</span>] = <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf3 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf3)</span><br></pre></td></tr></table></figure><h2 id="fs-文件系统模块"><a href="#fs-文件系统模块" class="headerlink" title="fs 文件系统模块"></a>fs 文件系统模块</h2><ul><li>fs 模块中所有的操作都有两种形式可供选择:同步和异步</li><li>同步文件系统会阻塞程序的执行，也就是除非操作完毕，否则不会向下执行代码</li><li>异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回</li><li>实际开发很少用同步方式，因此只介绍异步方式</li></ul><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><h4 id="简单文件读取"><a href="#简单文件读取" class="headerlink" title="简单文件读取"></a>简单文件读取</h4><p>语法格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path, options, callback)</span><br></pre></td></tr></table></figure><ul><li><p><code>path</code>：文件路径</p></li><li><p><code>options</code>：配置选项，若是字符串则指定编码格式</p></li><li><p><code>callback</code>：回调函数</p><ul><li><code>err</code>：错误信息</li><li><code>data</code>：读取的数据，如果未指定编码格式则返回一个 Buffer</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;failed!&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;content:&#x27;</span> + data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制文件内容</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;C:/Users/笔记.mp3&quot;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"><span class="comment">// 将data写入到文件中</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;C:/Users/hello.jpg&quot;</span>, data, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!err)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件写入成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; );</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="流式文件读取"><a href="#流式文件读取" class="headerlink" title="流式文件读取"></a>流式文件读取</h4><ul><li>简单文件读取的方式会一次性读取文件内容到内存中，若文件较大，会占用过多内存影响系统性能，且读取速度慢</li><li>大文件适合用流式文件读取，它会分多次将文件读取到内存中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可读流</span></span><br><span class="line"><span class="keyword">var</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;C:/Users/笔记.mp3&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建一个可写流</span></span><br><span class="line"><span class="keyword">var</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;a.mp3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听流的开启和关闭</span></span><br><span class="line"><span class="comment">// 这几个监听不是必须的</span></span><br><span class="line">rs.<span class="title function_">once</span>(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可读流打开了~~&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">rs.<span class="title function_">once</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可读流关闭了~~&#x27;</span>)</span><br><span class="line">  <span class="comment">//数据读取完毕，关闭可写流</span></span><br><span class="line">  ws.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">once</span>(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可写流打开了~~&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">once</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;可写流关闭了~~&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//要读取一个可读流中的数据，要为可读流绑定一个data事件，data事件绑定完毕自动开始读取数据</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  <span class="comment">//将读取到的数据写入到可写流中</span></span><br><span class="line">  ws.<span class="title function_">write</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简便方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;C:/Users/lilichao/Desktop/笔记.mp3&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;b.mp3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// pipe()可以将可读流中的内容，直接输出到可写流中</span></span><br><span class="line">rs.<span class="title function_">pipe</span>(ws)</span><br></pre></td></tr></table></figure><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><h4 id="简单文件写入"><a href="#简单文件写入" class="headerlink" title="简单文件写入"></a>简单文件写入</h4><p>语法格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(file, data[, options], callback)</span><br></pre></td></tr></table></figure><ul><li><code>file</code>：文件路径</li><li><code>data</code>：写入内容</li><li><code>options</code>：配置选项，包含 <code>encoding, mode, flag</code>；若是字符串则指定编码格式</li><li><code>callback</code>：回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./files/2.txt&#x27;</span>, <span class="string">&#x27;Hello Nodejs&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;failed!&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;C:/Users/hello.txt&#x27;</span>, <span class="string">&#x27;通过 writeFile 写入的内容&#x27;</span>, &#123; <span class="attr">flag</span>: <span class="string">&#x27;w&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功！&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="流式文件写入"><a href="#流式文件写入" class="headerlink" title="流式文件写入"></a>流式文件写入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步、异步、简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个可写流</span></span><br><span class="line"><span class="keyword">var</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;hello3.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">once</span>(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;流打开了~~&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">once</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;流关闭了~~&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过ws向文件中输出内容</span></span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;通过可写流写入文件的内容&#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">ws.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure><h3 id="路径动态拼接问题-dirname"><a href="#路径动态拼接问题-dirname" class="headerlink" title="路径动态拼接问题 __dirname"></a>路径动态拼接问题 <code>__dirname</code></h3><ul><li>在使用 fs 模块操作文件时，如果提供的操作路径是以 <code>./</code> 或 <code>../</code> 开头的相对路径时，容易出现路径动态拼接错误的问题</li><li>原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操作文件的完整路径</li><li>解决方案：在使用 fs 模块操作文件时，直接提供完整的路径，从而防止路径动态拼接的问题</li><li><code>__dirname</code> 获取文件所处的绝对路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(__dirname + <span class="string">&#x27;/files/1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h3><p>验证路径是否存在：</p><p>验证路径是否存在：</p><ul><li><code>fs.exists(path, callback)</code></li><li><code>fs.existsSync(path)</code></li></ul><p>获取文件信息：</p><ul><li><code>fs.stat(path, callback)</code></li><li><code>fs.stat(path)</code></li></ul><p>删除文件：</p><ul><li><code>fs.unlink(path, callback)</code></li><li><code>fs.unlinkSync(path)</code></li></ul><p>列出文件：</p><ul><li><code>fs.readdir(path[,options], callback)</code></li><li><code>fs.readdirSync(path[, options])</code></li></ul><p>截断文件：</p><ul><li><code>fs.truncate(path, len, callback)</code></li><li><code>fs.truncateSync(path, len)</code></li></ul><p>建立目录：</p><ul><li><code>fs.mkdir(path[, mode], callback)</code></li><li><code>fs.mkdirSync(path[, mode])</code></li></ul><p>删除目录：</p><ul><li><code>fs.rmdir(path, callback)</code></li><li><code>fs.rmdirSync(path)</code></li></ul><p>重命名文件和目录：</p><ul><li><code>fs.rename(oldPath, newPath, callback)</code></li><li><code>fs.renameSync(oldPath, newPath)</code></li></ul><p>监视文件更改：</p><ul><li><code>fs.watchFile(filename[, options], listener)</code></li></ul><h2 id="path-路径模块"><a href="#path-路径模块" class="headerlink" title="path 路径模块"></a>path 路径模块</h2><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求</p><h3 id="路径拼接-path-join"><a href="#路径拼接-path-join" class="headerlink" title="路径拼接 path.join()"></a>路径拼接 <code>path.join()</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意 ../ 会抵消前面的路径</span></span><br><span class="line"><span class="comment">// ./ 会被忽略</span></span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="string">&#x27;/b/c&#x27;</span>, <span class="string">&#x27;../../&#x27;</span>, <span class="string">&#x27;./d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pathStr) <span class="comment">// \a\d\e</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./files/1.txt&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="获取路径中文件名-path-basename"><a href="#获取路径中文件名-path-basename" class="headerlink" title="获取路径中文件名 path.basename()"></a>获取路径中文件名 <code>path.basename()</code></h3><p>使用 <code>path.basename()</code> 方法，可以获取路径中的最后一部分，常通过该方法获取路径中的文件名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[, ext])</span><br></pre></td></tr></table></figure><ul><li>path: 文件路径</li><li>ext: 文件扩展名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义文件的存放路径</span></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullName = path.<span class="title function_">basename</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullName) <span class="comment">// index.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nameWithoutExt = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameWithoutExt) <span class="comment">// index</span></span><br></pre></td></tr></table></figure><h3 id="获取路径中文件扩展名-path-extname"><a href="#获取路径中文件扩展名-path-extname" class="headerlink" title="获取路径中文件扩展名 path.extname()"></a>获取路径中文件扩展名 <code>path.extname()</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fext) <span class="comment">// .html</span></span><br></pre></td></tr></table></figure><h2 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h2><p>http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。</p><h3 id="创建基本-Web-服务器"><a href="#创建基本-Web-服务器" class="headerlink" title="创建基本 Web 服务器"></a>创建基本 Web 服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 web 服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为服务器实例绑定 request 事件，监听客户端的请求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">  <span class="keyword">const</span> method = req.<span class="property">method</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;url&#125;</span>, and request method is <span class="subst">$&#123;method&#125;</span>`</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 Content-Type 响应头，解决中文乱码的问题</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line">  <span class="comment">// 向客户端响应内容</span></span><br><span class="line">  res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实现简陋路由效果"><a href="#实现简陋路由效果" class="headerlink" title="实现简陋路由效果"></a>实现简陋路由效果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">  <span class="comment">// 设置默认的响应内容为 404 Not found</span></span><br><span class="line">  <span class="keyword">let</span> content = <span class="string">&#x27;&lt;h1&gt;404 Not found!&lt;/h1&gt;&#x27;</span></span><br><span class="line">  <span class="comment">// 判断用户请求的是否为 / 或 /index.html 首页</span></span><br><span class="line">  <span class="comment">// 判断用户请求的是否为 /about.html 关于页面</span></span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">&#x27;/&#x27;</span> || url === <span class="string">&#x27;/index.html&#x27;</span>) &#123;</span><br><span class="line">    content = <span class="string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&#x27;/about.html&#x27;</span>) &#123;</span><br><span class="line">    content = <span class="string">&#x27;&lt;h1&gt;关于页面&lt;/h1&gt;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">end</span>(content)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="模块化概念"><a href="#模块化概念" class="headerlink" title="模块化概念"></a>模块化概念</h3><ul><li>模块化是指解决一个复杂问题时，自顶向下逐层把系统划分为若干模块的过程，模块是可组合、分解和更换的单元。</li><li>模块化可提高代码的复用性和可维护性，实现按需加载。</li><li>模块化规范是对代码进行模块化拆分和组合时需要遵守的规则，如使用何种语法格式引用模块和向外暴露成员。</li></ul><h3 id="Node-js-中模块的分类"><a href="#Node-js-中模块的分类" class="headerlink" title="Node.js 中模块的分类"></a>Node.js 中模块的分类</h3><ul><li>内置模块</li><li>自定义模块</li><li>第三方模块</li></ul><h3 id="Node-js-中的模块作用域"><a href="#Node-js-中的模块作用域" class="headerlink" title="Node.js 中的模块作用域"></a>Node.js 中的模块作用域</h3><ul><li>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域</li><li>防止全局变量污染</li></ul><h3 id="模块作用域的成员"><a href="#模块作用域的成员" class="headerlink" title="模块作用域的成员"></a>模块作用域的成员</h3><ul><li>自定义模块中都有一个 <code>module</code> 对象，存储了和当前模块有关的信息</li><li>在自定义模块中，可以使用 <code>module.exports</code> 对象，将模块内的成员共享出去，供外界使用。导入自定义模块时，得到的就是 <code>module.exports</code> 指向的对象。</li><li>默认情况下，<code>exports</code> 和 <code>module.exports</code> 指向同一个对象。最终共享的结果，以 <code>module.exports</code> 指向的对象为准。</li></ul><h3 id="CommonJS-模块化规范"><a href="#CommonJS-模块化规范" class="headerlink" title="CommonJS 模块化规范"></a>CommonJS 模块化规范</h3><ul><li>每个模块内部，<code>module</code> 变量代表当前模块</li><li><code>module</code> 变量是一个对象，<code>module.exports</code> 是对外的接口</li><li>加载某个模块即加载该模块的 <code>module.exports</code> 属性</li></ul><h3 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h3><p>模块第一次加载后会被缓存，即多次调用 <code>require()</code> 不会导致模块的代码被执行多次，提高模块加载效率。</p><h4 id="内置模块加载"><a href="#内置模块加载" class="headerlink" title="内置模块加载"></a>内置模块加载</h4><p>内置模块加载优先级最高。</p><h4 id="自定义模块加载"><a href="#自定义模块加载" class="headerlink" title="自定义模块加载"></a>自定义模块加载</h4><p>加载自定义模块时，路径要以 <code>./</code> 或 <code>../</code> 开头，否则会作为内置模块或第三方模块加载。</p><p>导入自定义模块时，若省略文件扩展名，则 Node.js 会按顺序尝试加载文件：</p><ul><li>按确切的文件名加载</li><li>补全 <code>.js</code> 扩展名加载</li><li>补全 <code>.json</code> 扩展名加载</li><li>补全 <code>.node</code> 扩展名加载</li><li>报错</li></ul><h4 id="第三方模块加载"><a href="#第三方模块加载" class="headerlink" title="第三方模块加载"></a>第三方模块加载</h4><ul><li>若导入第三方模块， Node.js 会从<strong>当前模块的父目录</strong>开始，尝试从 <code>/node_modules</code> 文件夹中加载第三方模块。</li><li>如果没有找到对应的第三方模块，则移动到再<strong>上一层父目录</strong>中，进行加载，直到<strong>文件系统的根目录</strong>。</li></ul><p>例如，假设在 <code>C:\Users\bruce\project\foo.js</code> 文件里调用了 <code>require(&#39;tools&#39;)</code>，则 Node.js 会按以下顺序查找：</p><ul><li><code>C:\Users\bruce\project\node_modules\tools</code></li><li><code>C:\Users\bruce\node_modules\tools</code></li><li><code>C:\Users\node_modules\tools</code></li><li><code>C:\node_modules\tools</code></li></ul><h4 id="目录作为模块加载"><a href="#目录作为模块加载" class="headerlink" title="目录作为模块加载"></a>目录作为模块加载</h4><p>当把目录作为模块标识符进行加载的时候，有三种加载方式：</p><ul><li>在被加载的目录下查找 <code>package.json</code> 的文件，并寻找 <code>main</code> 属性，作为 <code>require()</code> 加载的入口</li><li>如果没有 <code>package.json</code> 文件，或者 <code>main</code> 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 <code>index.js</code> 文件。</li><li>若失败则报错</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nodejs-基础&quot;&gt;&lt;a href=&quot;#Nodejs-基础&quot; class=&quot;headerlink&quot; title=&quot;Nodejs 基础&quot;&gt;&lt;/a&gt;Nodejs 基础&lt;/h1&gt;&lt;h2 id=&quot;初识-Nodejs&quot;&gt;&lt;a href=&quot;#初识-Nodejs&quot; class</summary>
      
    
    
    
    <category term="Node" scheme="http://omygan.github.io/categories/Node/"/>
    
    
    <category term="Node" scheme="http://omygan.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>webpack配置TS</title>
    <link href="http://omygan.github.io/posts/1389a9e3.html"/>
    <id>http://omygan.github.io/posts/1389a9e3.html</id>
    <published>2022-12-18T08:13:29.515Z</published>
    <updated>2022-12-18T09:25:14.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h1><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>进入项目根目录，执行命令 <code>npm init -y</code>， 创建<strong>package.json</strong>文件</p><h3 id="下载构建工具"><a href="#下载构建工具" class="headerlink" title="下载构建工具"></a>下载构建工具</h3><p><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code></p><p>共安装了7个包</p><ol><li><p>webpack———构建工具webpack</p></li><li><p>webpack-cli———webpack的命令行工具</p></li><li><p>webpack-dev-server———webpack的开发服务器</p></li><li><p>typescript———ts编译器</p></li><li><p>ts-loader———ts加载器，用于在webpack中编译ts文件</p></li><li><p>html-webpack-plugin———webpack中html插件，用来自动创建html文件</p></li><li><p>clean-webpack-plugin———webpack中的清除插件，每次构建都会先清除目录</p></li></ol><h3 id="根目录下配置文件webpack-config-js"><a href="#根目录下配置文件webpack-config-js" class="headerlink" title="根目录下配置文件webpack.config.js"></a>根目录下配置文件webpack.config.js</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入一个包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入html插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入clean插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack中的所有的配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定打包文件的目录</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 打包后文件的文件</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 告诉webpack不使用箭头</span></span><br><span class="line">        <span class="attr">environment</span>:&#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定webpack打包时要使用模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定要加载的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                <span class="comment">// 要使用的loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                     <span class="comment">// 配置babel</span></span><br><span class="line">                     &#123;</span><br><span class="line">                         <span class="comment">// 指定加载器</span></span><br><span class="line">                         <span class="attr">loader</span>:<span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                         <span class="comment">// 设置babel</span></span><br><span class="line">                         <span class="attr">options</span>: &#123;</span><br><span class="line">                             <span class="comment">// 设置预定义的环境</span></span><br><span class="line">                             <span class="attr">presets</span>:[</span><br><span class="line">                                 [</span><br><span class="line">                                     <span class="comment">// 指定环境的插件</span></span><br><span class="line">                                     <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                     <span class="comment">// 配置信息</span></span><br><span class="line">                                     &#123;</span><br><span class="line">                                         <span class="comment">// 要兼容的目标浏览器</span></span><br><span class="line">                                         <span class="attr">targets</span>:&#123;</span><br><span class="line">                                             <span class="string">&quot;chrome&quot;</span>:<span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                             <span class="string">&quot;ie&quot;</span>:<span class="string">&quot;11&quot;</span></span><br><span class="line">                                         &#125;,</span><br><span class="line">                                         <span class="comment">// 指定corejs的版本</span></span><br><span class="line">                                         <span class="string">&quot;corejs&quot;</span>:<span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                         <span class="comment">// 使用corejs的方式 &quot;usage&quot; 表示按需加载</span></span><br><span class="line">                                         <span class="string">&quot;useBuiltIns&quot;</span>:<span class="string">&quot;usage&quot;</span></span><br><span class="line">                                     &#125;</span><br><span class="line">                                 ]</span><br><span class="line">                             ]</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;,</span><br><span class="line">                    <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="comment">// 要排除的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置Webpack插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// title: &quot;这是一个自定义的title&quot;</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来设置引用模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="根目录下创建tsconfig-json"><a href="#根目录下创建tsconfig-json" class="headerlink" title="根目录下创建tsconfig.json"></a>根目录下创建tsconfig.json</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc <span class="literal">-init</span></span><br></pre></td></tr></table></figure><h3 id="修改package-json添加如下配置"><a href="#修改package-json添加如下配置" class="headerlink" title="修改package.json添加如下配置"></a>修改package.json添加如下配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve --open chrome.exe&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</p><ol><li><p>安装依赖包：</p><p><code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></p><p>共安装了4个包，分别是：</p><ol><li><p>@babel/core———babel的核心工具</p></li><li><p>@babel/preset-env———babel的预定义环境</p></li><li><p>@babel-loader———babel在webpack中的加载器</p></li><li><p>core-js———core-js用来使老版本的浏览器支持新版ES语法</p></li></ol></li></ol><p>如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;webpack配置&quot;&gt;&lt;a href=&quot;#webpack配置&quot; class=&quot;headerlink&quot; title=&quot;webpack配置&quot;&gt;&lt;/a&gt;webpack配置&lt;/h1&gt;&lt;p&gt;通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工</summary>
      
    
    
    
    <category term="TypeScript" scheme="http://omygan.github.io/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="http://omygan.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="http://omygan.github.io/posts/28239a8d.html"/>
    <id>http://omygan.github.io/posts/28239a8d.html</id>
    <published>2022-12-18T08:12:30.000Z</published>
    <updated>2022-12-18T08:15:25.692Z</updated>
    
    
    
    
    <category term="TypeScript" scheme="http://omygan.github.io/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="http://omygan.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript入门</title>
    <link href="http://omygan.github.io/posts/48922786.html"/>
    <id>http://omygan.github.io/posts/48922786.html</id>
    <published>2022-12-18T07:42:31.000Z</published>
    <updated>2022-12-18T09:15:11.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-快速入门"><a href="#第一章-快速入门" class="headerlink" title="第一章 快速入门"></a>第一章 快速入门</h1><h2 id="TypeScript简介"><a href="#TypeScript简介" class="headerlink" title="TypeScript简介"></a>TypeScript简介</h2><ol><li>TypeScript是JavaScript的超集。</li><li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</li><li>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</li><li>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</li><li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li></ol><h2 id="TypeScript-开发环境搭建"><a href="#TypeScript-开发环境搭建" class="headerlink" title="TypeScript 开发环境搭建"></a>TypeScript 开发环境搭建</h2><ol><li><p>下载Node.js</p><ul><li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li><li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li></ul></li><li><p>安装Node.js</p></li><li><p>使用npm全局安装typescript</p><ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li><p>创建一个ts文件</p></li><li><p>使用tsc对ts文件进行编译</p><ul><li><p>进入命令行</p></li><li><p>进入ts文件所在目录</p></li><li><p>执行命令：tsc xxx.ts</p></li></ul></li></ol><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><ul><li>类型声明是TS非常重要的一个特点</li><li>通过类型声明可以指定TS中变量（参数、形参）的类型</li><li>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</li><li>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</li></ul><p>语法：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动类型判断"><a href="#自动类型判断" class="headerlink" title="自动类型判断"></a>自动类型判断</h3><blockquote><p>TS拥有自动的类型判断机制，当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型，所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">123</span>  ===  <span class="keyword">let</span> <span class="attr">a</span>: <span class="title class_">Number</span> = <span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">例子</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">number</td><td style="text-align:center">1, -33, 2.5</td><td style="text-align:center">任意数字</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">‘hi’, “hi”, <code>hi</code></td><td style="text-align:center">任意字符串</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">true、false</td><td style="text-align:center">布尔值true或false</td></tr><tr><td style="text-align:center">字面量</td><td style="text-align:center"><strong>let</strong> foo: ‘Hello’</td><td style="text-align:center">限制变量的值就是该字面量的值</td></tr><tr><td style="text-align:center">any</td><td style="text-align:center">*</td><td style="text-align:center">任意类型</td></tr><tr><td style="text-align:center">unknown</td><td style="text-align:center">*</td><td style="text-align:center">类型安全的any</td></tr><tr><td style="text-align:center">void</td><td style="text-align:center">空值（undefined）</td><td style="text-align:center">没有值（或undefined）</td></tr><tr><td style="text-align:center">never</td><td style="text-align:center">没有值</td><td style="text-align:center">不能是任何值</td></tr><tr><td style="text-align:center">object</td><td style="text-align:center">{name:’孙悟空’}</td><td style="text-align:center">任意的JS对象</td></tr><tr><td style="text-align:center">array</td><td style="text-align:center">[1,2,3]</td><td style="text-align:center">任意JS数组</td></tr><tr><td style="text-align:center">tuple</td><td style="text-align:center">[4,5]</td><td style="text-align:center">元素，TS新增类型，固定长度数组</td></tr><tr><td style="text-align:center">enum</td><td style="text-align:center">enum{A, B}</td><td style="text-align:center">枚举，TS中新增类型</td></tr></tbody></table></div><p>number</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">big</span>: <span class="built_in">bigint</span> = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure><p>boolean</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>string</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fullName</span>: <span class="built_in">string</span> = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure><p>字面量</p><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> | <span class="string">&#x27;blue&#x27;</span> | <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>any</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>unknown</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">unknown</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure><p>void</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>never</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>object（没啥用）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">object</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>array</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>tuple</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>]; </span><br></pre></td></tr></table></figure><p>enum</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">Blue</span> = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>第二种</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><h3 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h3><p> 编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p><p>命令行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.ts <span class="literal">-w</span></span><br></pre></td></tr></table></figure><h3 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h3><ul><li>如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。</li><li>但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json</li><li>tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</li></ul><p>配置选项：</p><p><strong>include</strong></p><ul><li>定义希望被编译文件所在的目录</li><li>默认值：[“**/*“]</li></ul><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tests/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p><p><strong>exclude</strong></p><ul><li>定义需要排除在外的目录</li><li>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</li></ul><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/hello/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>上述示例中，src下hello目录下的文件都不会被编译</p><h4 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a><strong>compilerOptions</strong></h4><ul><li>编译选项是配置文件中非常重要也比较复杂的配置选项</li><li>在compilerOptions中包含多个子选项，用来完成对编译的配置</li></ul><p>项目选项</p><p><strong>target—-设置ts代码编译的目标版本</strong></p><p>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</p><p><strong>lib—-指定代码运行时所包含的库（宿主环境）</strong></p><p>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/aa.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>module—-设置编译后代码使用的模块化系统</strong></p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommonJS&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>outDir—-编译后文件的所在目录</strong></p><p>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>outFile—-将所有的文件编译为一个js文件</strong></p><p>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/app.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>rootDir</strong></p><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录rootDir可以手动指定根目录</p><p>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>allowJs—-是否对js文件编译</strong></p><p><strong>checkJs—-是否对js文件进行检查</strong></p><p>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>removeComments—-是否删除注释—-默认值：false</strong></p><p><strong>noEmit—-不对代码进行编译—-默认值：false</strong></p><p><strong>noEmitOnError—-有错误的情况下不进行编译—-默认值：false</strong></p><h2 id="webpack相关配置"><a href="#webpack相关配置" class="headerlink" title="webpack相关配置"></a>webpack相关配置</h2><p><a href="http://omygan.github.io/posts/1389a9e3.html">webpack相关配置</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-快速入门&quot;&gt;&lt;a href=&quot;#第一章-快速入门&quot; class=&quot;headerlink&quot; title=&quot;第一章 快速入门&quot;&gt;&lt;/a&gt;第一章 快速入门&lt;/h1&gt;&lt;h2 id=&quot;TypeScript简介&quot;&gt;&lt;a href=&quot;#TypeScript简介&quot; cla</summary>
      
    
    
    
    <category term="TypeScript" scheme="http://omygan.github.io/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="http://omygan.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>原型&amp;原型链</title>
    <link href="http://omygan.github.io/posts/2ed57e0c.html"/>
    <id>http://omygan.github.io/posts/2ed57e0c.html</id>
    <published>2022-12-02T10:55:54.000Z</published>
    <updated>2022-12-02T11:01:00.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是原型和原型链"><a href="#什么是原型和原型链" class="headerlink" title="什么是原型和原型链"></a>什么是原型和原型链</h1><h2 id="一、原型"><a href="#一、原型" class="headerlink" title="一、原型"></a>一、原型</h2><blockquote><p>所有<code>引用类型</code>都有一个<code>__proto__(隐式原型)</code>属性，属性值是一个普通的对象<br>        所有<code>函数</code>都有一个<code>prototype(原型)</code>属性，属性值是一个普通的对象<br>        所有<code>引用类型的__proto__</code>属性<code>指向</code>它<code>构造函数的prototype</code></p></blockquote><h2 id="一、原型链"><a href="#一、原型链" class="headerlink" title="一、原型链"></a>一、原型链</h2><blockquote><p>当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会去它的<strong>proto</strong>隐式原型上查找，即它的构造函数的prototype，如果还没有找到就会再在构造函数的prototype的<strong>proto</strong>中查找，这样一层一层向上查找就会形成一个链式结构，我们称为原型链。</p></blockquote><p><a href="https://blog.csdn.net/xiaoermingn/article/details/80745117?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166987675416800180633029%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166987675416800180633029&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-80745117-null-null.142^v67^control,201^v3^add_ask,213^v2^t3_control1&amp;utm_term=%E5%8E%9F%E5%9E%8B%E9%93%BE&amp;spm=1018.2226.3001.4187">原文链接</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是原型和原型链&quot;&gt;&lt;a href=&quot;#什么是原型和原型链&quot; class=&quot;headerlink&quot; title=&quot;什么是原型和原型链&quot;&gt;&lt;/a&gt;什么是原型和原型链&lt;/h1&gt;&lt;h2 id=&quot;一、原型&quot;&gt;&lt;a href=&quot;#一、原型&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://omygan.github.io/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="http://omygan.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>MVVM模型</title>
    <link href="http://omygan.github.io/posts/700f8fbd.html"/>
    <id>http://omygan.github.io/posts/700f8fbd.html</id>
    <published>2022-12-02T10:22:48.000Z</published>
    <updated>2022-12-02T10:41:20.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是MVVM？"><a href="#什么是MVVM？" class="headerlink" title="什么是MVVM？"></a>什么是MVVM？</h1><p><strong>MVVM是MVC的增强版，实质上和MVC没有本质区别，只是代码的位置变动而已</strong>，这是我对MVVM的定义，如果你不知道什么是MVC，请往下看。</p><h2 id="MVC简要"><a href="#MVC简要" class="headerlink" title="MVC简要"></a>MVC简要</h2><p>如果你做过iOS开发，相信你对这几个东西一定很熟：<strong>Model、View、Controller</strong>，分别表示<strong>数据、视图、控制器</strong>。当然，其他方向的开发人员应该不也会太陌生，其实这只是一种设计思想，具体用什么语言和做什么开发并不重要。所谓MVC便是这几个单词的简写，那么它们之间是怎么工作的呢？先看下图。</p><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/2002187-4d82bf5244e9d66e.png" alt=""></p><p>这是苹果开发者文档中摘过来的图片，表明了三者之间的关系，简单描述了三者作用</p><ul><li><p>Model：数据模型，用来存储数据</p></li><li><p>View：视图界面，用来展示UI界面和响应用户交互</p></li><li><p>Controller：控制器(大管家角色)，监听模型数据的改变和控制视图行为、处理用户交互</p></li></ul><p>他们工作和关系看起来是如此清晰，是一种非常好的设计思想，是的，首先声明MVC是一个非常好的架构思想，你必须要掌握。</p><h2 id="MVVM简要"><a href="#MVVM简要" class="headerlink" title="MVVM简要"></a>MVVM简要</h2><p>既然MVC这么好，那为什么还要使用MVVM？我们先来看一下MVVM是什么。</p><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/2002187-ddcaae06ec00dadb.png" alt=""></p><p>上图描述了MVVM一个基本结构，看到了什么，是不是<strong>发现比MVC架构中多了一个ViewModel</strong>，没错，就是这个ViewModel，他是MVVM相对于MVC改进的核心思想。在开发过程中，由于需求的变更或添加，项目的复杂度越来越高，代码量越来越大，此时我们会发现MVC维护起来有些吃力，首先被人吐槽的最多的就是MVC的简写变成了Massive-View-Controller（意为沉重的Controller）</p><p>由于Controller主要用来处理各种逻辑和数据转化，复杂业务逻辑界面的Controller非常庞大，维护困难，所以有人想到<strong>把Controller的数据和逻辑处理部分从中抽离出来，用一个专门的对象去管理，这个对象就是ViewModel，是Model和Controller之间的一座桥梁</strong>。当人们去尝试这种方式时，发现Controller中的代码变得非常少，变得易于测试和维护，只需要<strong>Controller和ViewModel做数据绑定</strong>即可，这也就催生了MVVM的热潮。</p><h2 id="MVVM值得用么？"><a href="#MVVM值得用么？" class="headerlink" title="MVVM值得用么？"></a>MVVM值得用么？</h2><p><strong>个人非常推荐使用</strong>，并且可以直接在你现有的MVC基础上进行扩展，我们首先来看下优缺点</p><p>优点：</p><p>​    1.Controller清晰简洁： ViewModel分离了大部分Controller代码，更加清晰和容易维护。</p><p>​    2.方便测试：开发中大部分Bug来至于逻辑处理，由于ViewModel分离了许多逻辑，可以对ViewModel构造单元测试。</p><p>​    3.开发解耦(举两个例子)：</p><p>​        a.一人负责逻辑实现、另一人负责UI实现；</p><p>​        b.敏捷开发时，会发经常发不是等后端做好了接口我们再去开发，不过在没有接口的情况下通常我们可以把Controller和View完成。</p><p>缺点：</p><p>​    1.看起来代码会比MVC多点</p><p>​    2.需要对每个Controller实现绑定，如果处理不好，反而会有一种“画虎不成反类犬”的感觉</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在我实际使用过程中，MVVM写出的代码量并不比MVC的少，有时反而还会多点，毕竟多了一个数据绑定过程，但逻辑会清晰很多，对于多人开发的团队，还是有不少优势的，缺点和优点相比不值一提，总之<strong>推荐使用</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是MVVM？&quot;&gt;&lt;a href=&quot;#什么是MVVM？&quot; class=&quot;headerlink&quot; title=&quot;什么是MVVM？&quot;&gt;&lt;/a&gt;什么是MVVM？&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;MVVM是MVC的增强版，实质上和MVC没有本质区别，只是代码的位置变动而已</summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue与React的区别</title>
    <link href="http://omygan.github.io/posts/4d6df6e0.html"/>
    <id>http://omygan.github.io/posts/4d6df6e0.html</id>
    <published>2022-11-28T11:05:56.000Z</published>
    <updated>2022-11-28T12:04:35.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue和React的区别是什么"><a href="#Vue和React的区别是什么" class="headerlink" title="Vue和React的区别是什么"></a>Vue和React的区别是什么</h1><h2 id="核心思想不同"><a href="#核心思想不同" class="headerlink" title="核心思想不同"></a>核心思想不同</h2><blockquote><p><strong>Vue的核心思想是尽可能的降低前端开发的门槛，是一个灵活易用的渐进式双向绑定的MVVM框架。</strong></p><p><strong>React的核心思想是声明式渲染和组件化、单向数据流，React既不属于MVC也不属于MVVM架构。</strong></p></blockquote><ol><li>声明式是什么意思？</li></ol><blockquote><p>声明式与之相对应的是命令式，命令式指的是通过DOM操作一步步把网页变成想要的样子，而声明式则是只需要通过状态去形容最后的网页长什么样子即可。</p></blockquote><ol><li>组件化是什么意思？</li></ol><blockquote><p>组件化指的是尽可能的将页面拆分成一个个较小的、可以复用的组件，这样让我们的代码更加方便组织和管理，并且拓展性页更强。</p></blockquote><ol><li>如何理解React的单向数据流？</li></ol><blockquote><p>React的单向数据流指的是数据主要从父节点通过props传递到子节点，如果顶层某个props改变了，React会重新渲染所有的子节点，但是单向数据流并非单向绑定，React想要从一个组件去更新另一个组件的状态，需要进行状态提升，即将状态提升到他们最近的祖先组件中，触发父组件的状态变更，从而影响另一个组件的显示。单向数据流的好处是能够保证状态改变的可追溯性，假如，父组件维护了一个状态，子组件如果能够随意更改父组件的状态，那么各组件的状态改变就会变得难以追溯。</p></blockquote><h2 id="组件写法不同"><a href="#组件写法不同" class="headerlink" title="组件写法不同"></a>组件写法不同</h2><blockquote><p>Vue的组件写法是通过template的单文件组件格式。</p><p>React的组件写法是JSX+inline style，也就是吧HTML和CSS全部写进JavaScript中。</p></blockquote><h2 id="组件通信不同"><a href="#组件通信不同" class="headerlink" title="组件通信不同"></a>组件通信不同</h2><h2 id="diff算法不同"><a href="#diff算法不同" class="headerlink" title="diff算法不同"></a>diff算法不同</h2><h3 id="diff算法前置知识"><a href="#diff算法前置知识" class="headerlink" title="diff算法前置知识"></a>diff算法前置知识</h3><p>在了解Diff算法之前，我们首先要知道什么是虚拟DOM，<code>虚拟DOM是一个用来描述真实DOM的对象，本质是对象。</code></p><h3 id="什么是diff算法"><a href="#什么是diff算法" class="headerlink" title="什么是diff算法"></a>什么是diff算法</h3><blockquote><p>Diff算法是一种对比算法，主要是对比旧的虚拟DOM和新的虚拟DOM，找出发生更改的节点，并只更新这些接地那，而不更新未发生变化的节点，从而准确的更新DOM，减少操作真实DOM的次数，提高性能。</p></blockquote><h3 id="Vue和React的diff算法不同之处"><a href="#Vue和React的diff算法不同之处" class="headerlink" title="Vue和React的diff算法不同之处"></a>Vue和React的diff算法不同之处</h3><blockquote><p>vue和react的diff算法都是进行同层次的比较，主要有以下两点不同：</p></blockquote><ul><li>vue对比节点，如果节点元素类型相同，但是className不同，认为是不同类型的元素，会进行删除重建，但是react则会认为是同类型的节点，只会修改节点属性。</li><li>vue的列表比对采用的是首尾指针法，而react采用的是从左到右依次比对的方式，当一个集合只是把最后一个节点移动到了第一个，react会把前面的节点依次移动，而vue只会把最后一个节点移动到最后一个，从这点上来说vue的对比方式更加高效。</li></ul><p><strong>为什么不建议使用index作为节点的key？</strong></p><blockquote><p>假如我们在一组节点的首部添加了一个新节点，使用index作为key，diff算法通过key判断是相同类型的节点之后，会进行进一步的比较，把其内容进行更改，这样就会造成这一组的节点都被更新了，最后一个节点还被当做新节点创建了，这样会造成很大的性能浪费，因此不建议使用index作为key。</p></blockquote><h2 id="响应式原理不同"><a href="#响应式原理不同" class="headerlink" title="响应式原理不同"></a>响应式原理不同</h2><h3 id="React的响应式"><a href="#React的响应式" class="headerlink" title="React的响应式"></a>React的响应式</h3><blockquote><p>React主要是通过setState()方法来更新状态，状态更新之后，组件也会重新渲染。</p><p>React默认是通过比较引用的方式（diff）进行的，如果不优化可能导致大量不必要的VDOM的重新渲染。为什么React不精确监听数据变化呢？这是因为Vue和React设计理念上的区别，Vue使用的是可变数据，而React更强调数据的不可变，两者没有好坏之分，Vue更加简单，而React构建大型应用的时候更加棒。</p></blockquote><h3 id="Vue的响应式"><a href="#Vue的响应式" class="headerlink" title="Vue的响应式"></a>Vue的响应式</h3><blockquote><p>vue会遍历data数据对象，使用Object.definedProperty()将每个属性都转换为getter和setter，每个Vue组件实例都有一个对应的watcher实例，在组件初次渲染的时候会记录组件用到了那些数据，当数据发生改变的时候，会触发setter方法，并通知所有依赖这个数据的watcher实例调用update方法去触发组件的compile渲染方法，进行渲染数据。</p></blockquote><h2 id="模板渲染方式不同"><a href="#模板渲染方式不同" class="headerlink" title="模板渲染方式不同"></a>模板渲染方式不同</h2><blockquote><p>在表层上，模板的语法不同，React是通过JSX渲染模板。而Vue是通过一种拓展的HTML语法进行渲染，但其实这只是表面现象，毕竟React并不必须依赖JSX。</p><p>在深层上，模板的原理不同，这才是他们的本质区别：React是在组件JS代码中，通过原生JS实现模板中的常见语法，比如插值，条件，循环等，都是通过JS语法实现的，更加纯粹更加原生。而Vue是在和组件JS代码分离的单独的模板中，通过指令来实现的，比如条件语句就需要 v-if 来实现对这一点，这样的做法显得有些独特，会把HTML弄得很乱。</p><p>举个例子，说明React的好处：react中render函数是支持闭包特性的，所以我们import的组件在render中可以直接调用。但是在Vue中，由于模板中使用的数据都必须挂在 this 上进行一次中转，所以我们import 一个组件完了之后，还需要在 components 中再声明下，这样显然是很奇怪但又不得不这样的做法。</p></blockquote><h2 id="渲染过程不同"><a href="#渲染过程不同" class="headerlink" title="渲染过程不同"></a>渲染过程不同</h2><blockquote><p>Vue可以更快地计算出Virtual DOM的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。</p><p>React在应用的状态被改变时，全部子组件都会重新渲染。通过shouldComponentUpdate这个生命周期方法可以进行控制，但Vue将此视为默认的优化。</p><p>如果应用中交互复杂，需要处理大量的UI变化，那么使用Virtual DOM是一个好主意。如果更新元素并不频繁，那么Virtual DOM并不一定适用，性能很可能还不如直接操控DOM。</p></blockquote><h2 id="Vuex和Redux的区别"><a href="#Vuex和Redux的区别" class="headerlink" title="Vuex和Redux的区别"></a>Vuex和Redux的区别</h2><blockquote><p>从表面上来说，store注入和使用方式有一些区别。在Vuex中，s t o r e 被 直 接 注 入 到 了 组 件 实 例 中 ， 因 此 可 以 比 较 灵 活 的 使 用 ： 使 用 d i s p a t c h 、 c o m m i t 提 交 更 新 ， 通 过 m a p S t a t e 或 者 直 接 通 过 t h i s . store被直接注入到了组件实例中，因此可以比较灵活的使用：使用dispatch、commit提交更新，通过mapState或者直接通过this.store被直接注入到了组件实例中，因此可以比较灵活的使用：使用dispatch、commit提交更新，通过mapState或者直接通过this.store来读取数据。在Redux中，我们每一个组件都需要显示的用connect把需要的props和dispatch连接起来。另外，Vuex更加灵活一些，组件中既可以dispatch action，也可以commit updates，而Redux中只能进行dispatch，不能直接调用reducer进行修改。</p><p>从实现原理上来说，最大的区别是两点：Redux使用的是不可变数据，而Vuex的数据是可变的，因此，Redux每次都是用新state替换旧state，而Vuex是直接修改。Redux在检测数据变化的时候，是通过diff的方式比较差异的，而Vuex其实和Vue的原理一样，是通过getter/setter来比较的，这两点的区别，也是因为React和Vue的设计理念不同。React更偏向于构建稳定大型的应用，非常的科班化。相比之下，Vue更偏向于简单迅速的解决问题，更灵活，不那么严格遵循条条框框。因此也会给人一种大型项目用React，小型项目用Vue的感觉。</p></blockquote><h2 id="封装程度不同"><a href="#封装程度不同" class="headerlink" title="封装程度不同"></a>封装程度不同</h2><ul><li>封装程度，vue封装程度更高，内置多个指令和数据双向绑定，react封装度比较低，适合扩展。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue和React的区别是什么&quot;&gt;&lt;a href=&quot;#Vue和React的区别是什么&quot; class=&quot;headerlink&quot; title=&quot;Vue和React的区别是什么&quot;&gt;&lt;/a&gt;Vue和React的区别是什么&lt;/h1&gt;&lt;h2 id=&quot;核心思想不同&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="Technology" scheme="http://omygan.github.io/categories/Technology/"/>
    
    
    <category term="Technology" scheme="http://omygan.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>封装网络请求</title>
    <link href="http://omygan.github.io/posts/57b3f788.html"/>
    <id>http://omygan.github.io/posts/57b3f788.html</id>
    <published>2022-11-25T12:28:08.000Z</published>
    <updated>2022-11-25T13:40:55.491Z</updated>
    
    <content type="html"><![CDATA[<div class="tag link"><a class="link-card" title="基本封装在本站的Vue网络请求" href="http://omygan.github.io/posts/a6bab181.html"><div class="left"><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/Vue-logo.png"/></div><div class="right"><p class="text">基本封装在本站的Vue网络请求</p><p class="url">http://omygan.github.io/posts/a6bab181.html</p></div></a></div><h1 id="Object-defineProperty封装"><a href="#Object-defineProperty封装" class="headerlink" title="Object.defineProperty封装"></a>Object.defineProperty封装</h1><h2 id="config-js统一配置接口"><a href="#config-js统一配置接口" class="headerlink" title="config.js统一配置接口"></a>config.js统一配置接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">IP</span> = <span class="string">&quot;http://192.144.153.177:8081&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TOKEN</span> = <span class="string">&quot;7c4d4e79c09a4ebc77d0217ad6518db1&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">WXAPPID</span> = <span class="number">10001</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> wxapp_id: WXAPPID,</span></span><br><span class="line"><span class="comment"> token: TOKEN</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> apis = &#123;</span><br><span class="line"><span class="comment">// 首页</span></span><br><span class="line"><span class="attr">home</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="variable constant_">IP</span> + <span class="string">&quot;/index.php&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">s</span>: <span class="string">&quot;/api/index/page&quot;</span>,</span><br><span class="line"><span class="attr">wxapp_id</span>: <span class="variable constant_">WXAPPID</span>,</span><br><span class="line"><span class="attr">token</span>: <span class="variable constant_">TOKEN</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 添加购物车</span></span><br><span class="line"><span class="title function_">addCart</span>(<span class="params">meta</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="variable constant_">IP</span> + <span class="string">&quot;/index.php&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">s</span>: <span class="string">&quot;/api/cart/add&quot;</span>,</span><br><span class="line"><span class="attr">wxapp_id</span>: <span class="variable constant_">WXAPPID</span>,</span><br><span class="line"><span class="attr">token</span>: <span class="variable constant_">TOKEN</span>,</span><br><span class="line"><span class="attr">goods_id</span>: meta.<span class="property">goods_id</span>,</span><br><span class="line"><span class="attr">goods_num</span>: meta.<span class="property">goods_num</span>,</span><br><span class="line"><span class="attr">goods_sku_id</span>: meta.<span class="property">goods_sku_id</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 立即购买</span></span><br><span class="line"><span class="title function_">buyNow</span>(<span class="params">meta</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="variable constant_">IP</span> + <span class="string">&quot;/index.php&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">s</span>: <span class="string">&quot;/api/order/buyNow&quot;</span>,</span><br><span class="line"><span class="attr">wxapp_id</span>: <span class="variable constant_">WXAPPID</span>,</span><br><span class="line"><span class="attr">token</span>: <span class="variable constant_">TOKEN</span>,</span><br><span class="line"><span class="attr">goods_id</span>: meta.<span class="property">goods_id</span>,</span><br><span class="line"><span class="attr">goods_num</span>: meta.<span class="property">goods_num</span>,</span><br><span class="line"><span class="attr">goods_sku_id</span>: meta.<span class="property">goods_sku_id</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 商品列表</span></span><br><span class="line"><span class="title function_">product</span>(<span class="params">meta</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="variable constant_">IP</span> + <span class="string">&quot;/index.php&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">s</span>: <span class="string">&quot;/api/category/index&quot;</span>,</span><br><span class="line"><span class="attr">wxapp_id</span>: <span class="variable constant_">WXAPPID</span>,</span><br><span class="line"><span class="attr">token</span>: <span class="variable constant_">TOKEN</span>,</span><br><span class="line"><span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">category_id</span>: meta.<span class="property">category_id</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 添加商品</span></span><br><span class="line"><span class="title function_">addPro</span>(<span class="params">meta</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">url</span>: <span class="variable constant_">IP</span> + <span class="string">&quot;/index.php?s=/api/cart/add&quot;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">wxapp_id</span>: <span class="variable constant_">WXAPPID</span>,</span><br><span class="line"><span class="attr">token</span>: <span class="variable constant_">TOKEN</span>,</span><br><span class="line"><span class="attr">goods_id</span>: meta.<span class="property">goods_id</span>,</span><br><span class="line"><span class="attr">goods_num</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">goods_sku_id</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> apis</span><br></pre></td></tr></table></figure><h2 id="network-js请求封装"><a href="#network-js请求封装" class="headerlink" title="network.js请求封装"></a>network.js请求封装</h2><div class="tip info"><p><strong>使用了JavaScript中的对象监听器方法，在该js文件中通过for循环给所导入的apis对象的每个属性添加监听器的方式，每当调用getDatas方法就会根据组件传入的key值读取一次 datas 对象中所对应的key属性的值，同时触发对象监听器的getter方法，在该方法中会发起一次网络请求， 并将请求到的的结果返回给key属性，在组件中通过 then() 方法或者 await 方法 拿到请求到的数据</strong></p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> apis <span class="keyword">from</span> <span class="string">&quot;./config.js&quot;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params 用来接收对应的网址, 请求方式, 参数数据等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startNetwork</span>(<span class="params">params</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">...params,</span><br><span class="line"><span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line"><span class="title function_">resolve</span>(res)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="string">&quot;network fail, reason:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> datas = &#123;</span><br><span class="line"><span class="attr">meta</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> apis) &#123;</span><br><span class="line">    <span class="comment">// 下方的参数 datas 将this指向datas对象，用于拿到组件传来的参数 meta</span></span><br><span class="line">    <span class="comment">// 参数 key 是config.js 中对象的属性键值</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(datas, key, &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; meta 主要用来获取外界在进行网络请求时需要传递的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> params = apis[key](<span class="variable language_">this</span>.<span class="property">meta</span>);</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">startNetwork</span>(params)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; key 获取数据时依赖的键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; meta接收当前网络请求需要的参数数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getDatas</span>(<span class="params">key, meta = &#123;&#125;</span>) &#123;</span><br><span class="line">datas.<span class="property">meta</span> = meta</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> datas[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getDatas</span><br></pre></td></tr></table></figure><h2 id="order-js组件发起网络请求"><a href="#order-js组件发起网络请求" class="headerlink" title="order.js组件发起网络请求"></a>order.js组件发起网络请求</h2><p><strong>通过Promise的.then()方法或者 async 和 await 操作请求到的数据</strong></p><p><strong>下文将使用 async  和 await 方法 处理请求到的数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line"> <span class="attr">items</span>: [<span class="string">&quot;全部订单&quot;</span>, <span class="string">&quot;待付款&quot;</span>, <span class="string">&quot;待发货&quot;</span>, <span class="string">&quot;待收货&quot;</span>],</span><br><span class="line"> <span class="attr">dataType</span>: [<span class="string">&quot;all&quot;</span>, <span class="string">&quot;payment&quot;</span>, <span class="string">&quot;delivery&quot;</span>, <span class="string">&quot;received&quot;</span>],</span><br><span class="line"> <span class="attr">current</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="attr">orderList</span>: []</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;,</span><br><span class="line">            </span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"> <span class="comment">// 请求跟点击事件绑定</span></span><br><span class="line"> <span class="comment">// async 开启异步</span></span><br><span class="line"> <span class="keyword">async</span> <span class="title function_">onClickItem</span>(<span class="params">e</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">current</span> != e.<span class="property">currentIndex</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">current</span> = e.<span class="property">currentIndex</span>;</span><br><span class="line">     <span class="comment">// 操作请求到后的数据</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getDatas</span>(<span class="string">&quot;order&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">dataType</span>: <span class="variable language_">this</span>.<span class="property">dataType</span>[<span class="variable language_">this</span>.<span class="property">current</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">     <span class="comment">// 将拿到的数据赋值给data中的orderList</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">orderList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">list</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><div class="tip info"><p>未完待续……</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag link&quot;&gt;&lt;a class=&quot;link-card&quot; title=&quot;基本封装在本站的Vue网络请求&quot; href=&quot;http://omygan.github.io/posts/a6bab181.html&quot;&gt;&lt;div class=&quot;left&quot;&gt;&lt;img</summary>
      
    
    
    
    <category term="Technology" scheme="http://omygan.github.io/categories/Technology/"/>
    
    
    <category term="Technology" scheme="http://omygan.github.io/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Vue网络请求</title>
    <link href="http://omygan.github.io/posts/a6bab181.html"/>
    <id>http://omygan.github.io/posts/a6bab181.html</id>
    <published>2022-11-25T02:35:15.000Z</published>
    <updated>2022-11-25T07:28:48.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue网络请求"><a href="#Vue网络请求" class="headerlink" title="Vue网络请求"></a>Vue网络请求</h1><h2 id="配置单个代理"><a href="#配置单个代理" class="headerlink" title="配置单个代理"></a>配置单个代理</h2><p>在 <code>vue.config.js</code> 中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">proxy</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ul><h2 id="配置多个代理"><a href="#配置多个代理" class="headerlink" title="配置多个代理"></a>配置多个代理</h2><p>编写 <code>vue.config.js</code> 配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//为该羡慕配置代理.请求第三方服务器中的数据</span></span><br><span class="line">  <span class="comment">//该字段用于对vue-cli的开发时的服务器做出配置</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="comment">//项目运行成功后的端口号,可选  默认是8080</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;8080&quot;</span>,</span><br><span class="line">    <span class="comment">//服务器运行完毕后是否自动打开浏览器  可选</span></span><br><span class="line">    <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//配置开发服务器的代理  必须</span></span><br><span class="line">    <span class="comment">// proxy:&quot;https://api.jisuapi.com&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//但是  高级配置写法</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/jisuapi&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;https://api.jisuapi.com&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//真正发起请求时,将触发代理的标识去掉,不让其成为路由的一部分,还保持其之前的路由</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/jisuapi&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/elm&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;https://elm.cangdu.org&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//真正发起请求时,将触发代理的标识去掉,不让其成为路由的一部分,还保持其之前的路由</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/elm&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//vue.config.js文件   在vue-cli工程启动的时候,脚手架会查询根目录是否有该文件,如果有,则引用! 该文件中的语法为commonJS语法,也就是nodejs模块化语法, 导出的对象是对当前项目的配置!  注意:只要本文件发生变化,都需要重新运行npm run serve本工程!</span></span><br></pre></td></tr></table></figure><ul><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀</li></ul><h2 id="实战配置"><a href="#实战配置" class="headerlink" title="实战配置"></a>实战配置</h2><h3 id="Vue-config-js"><a href="#Vue-config-js" class="headerlink" title="Vue.config.js"></a><strong>Vue.config.js</strong></h3><p><strong>配置代理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">//但是  高级配置写法</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/elm&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;https://elm.cangdu.org&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//真正发起请求时,将触发代理的标识去掉,不让其成为路由的一部分,还保持其之前的路由</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/elm&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="myAxios-js"><a href="#myAxios-js" class="headerlink" title="myAxios.js"></a><strong>myAxios.js</strong></h3><p>自定义封装Axios网络请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Toast</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vant&quot;</span>;</span><br><span class="line"><span class="comment">//此文件是自定义js文件,跟main.js主文件没有关系!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装axios网路请求,完成对request请求的拦截he对response响应对象的拦截</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建网路请求对象实例 (这个是自定义axios对象)</span></span><br><span class="line"><span class="keyword">const</span> axiosNet = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// 此处baseUR &quot;/elm&quot; 对应配置文件的 &quot;https://elm.cangdu.org&quot;</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&quot;/elm&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">10000</span>,<span class="comment">//超时时间,</span></span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.对网路请求request进行拦截  客服端向服务端发起请求</span></span><br><span class="line">axiosNet.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="title class_">Toast</span>.<span class="title function_">loading</span>(&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;数据加载中...&quot;</span>,</span><br><span class="line">        <span class="attr">forbidClick</span>: <span class="literal">true</span>, <span class="comment">//加载中  禁用背景点击</span></span><br><span class="line">        <span class="attr">loadingType</span>: <span class="string">&quot;spinner&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="title class_">Toast</span>.<span class="title function_">fail</span>(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.对响应对象进行拦截  response   服务端向客户端返回数据</span></span><br><span class="line">axiosNet.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title class_">Toast</span>.<span class="title function_">success</span>(<span class="string">&quot;数据加载完成!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Toast</span>.<span class="title function_">fail</span>(<span class="string">&quot;数据加载失败!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="title class_">Toast</span>.<span class="title function_">fail</span>(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axiosNet;</span><br></pre></td></tr></table></figure><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>在main.js文件中全局注册封装好的axios网络请求</p><p><strong>挂载请求至全局</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Axios</span> <span class="keyword">from</span> <span class="string">&#x27;./service/myaxios&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$elmaxios</span> = <span class="title class_">Axios</span></span><br></pre></td></tr></table></figure><h3 id="在组件中使用"><a href="#在组件中使用" class="headerlink" title="在组件中使用"></a>在组件中使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">$elmaxios</span></span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&quot;/shopping/v2/menu&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">          <span class="attr">restaurant_id</span>: <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">shopid</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">food</span> = obj.<span class="property">data</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">food</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 记录该分类下不同商品的数量</span></span><br><span class="line">      el.<span class="property">nums</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 记录分类下标</span></span><br><span class="line">      el.<span class="property">index</span> = index;</span><br><span class="line">      el.<span class="property">foods</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">// 记录添加商品的数量</span></span><br><span class="line">         v.<span class="property">num</span> = <span class="number">0</span>;</span><br><span class="line">         <span class="comment">// 记录每个商品对应分类的下标</span></span><br><span class="line">         v.<span class="property">index</span> = el.<span class="property">index</span>;</span><br><span class="line">         <span class="comment">// 记录商品所在的下标</span></span><br><span class="line">         v.<span class="property">item</span> = i;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">foodCopy</span>=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">food</span>))</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">productright</span> = <span class="variable language_">this</span>.<span class="property">food</span>[<span class="number">0</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><div class="tip home"><p>上述的网络请求中，不同的接口路由分散在不同的功能组件中，虽然也能获取到数据，但是如果在实际开发过程中为了方便后续调试和更改， 一般会将接口统一封装在一个文件里，改进如下</p></div><h3 id="接口封装"><a href="#接口封装" class="headerlink" title="接口封装"></a>接口封装</h3><p><strong>将上述myaxios.js自定义封装好的axiosNet导入接口文件recommend.js里</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;../utils/myaxios&#x27;</span>; <span class="comment">// 导入http中创建的myaxios实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> recommend = &#123;</span><br><span class="line">    <span class="comment">//推荐歌单列表</span></span><br><span class="line">    <span class="title class_">SongList</span>(params) &#123;</span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/personalized`</span>,&#123;<span class="attr">params</span>:params&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//歌手列表首次加载接口</span></span><br><span class="line">    <span class="title class_">SingerList</span>(params)&#123;</span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/top/artists`</span>,&#123;<span class="attr">params</span>:params&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//歌手列表下A-Z点击的接口</span></span><br><span class="line">    <span class="title class_">SingerClickList</span>(params)&#123;</span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/artist/list`</span>,&#123;<span class="attr">params</span>:params&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//排行榜</span></span><br><span class="line">    <span class="title class_">RankingList</span>(params)&#123;</span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/toplist/detail`</span>,&#123;<span class="attr">params</span>:params&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> recommend</span><br></pre></td></tr></table></figure><p><strong>在全局文件中导入recommend.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&quot;../src/api/recommend&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = api;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React中 Class组件全局注入</span></span><br><span class="line"><span class="title class_">React</span>.<span class="property">Component</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = api;</span><br><span class="line"><span class="comment">// React中 Function组件全局注入</span></span><br><span class="line"><span class="title class_">React</span>.<span class="property">$axios</span> = api;</span><br></pre></td></tr></table></figure><p><strong>在组件中使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title class_">Song</span>(&#123;</span><br><span class="line"> <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">songHeader</span>:res.<span class="property">data</span>.<span class="property">playlist</span>,</span><br><span class="line">    <span class="attr">songs</span>:res.<span class="property">data</span>.<span class="property">playlist</span>.<span class="property">tracks</span>,</span><br><span class="line">    <span class="attr">avatar</span>: res.<span class="property">data</span>.<span class="property">playlist</span>.<span class="property">creator</span>,</span><br><span class="line">    <span class="attr">tracks</span>:res.<span class="property">data</span>.<span class="property">playlist</span>.<span class="property">tracks</span>,</span><br><span class="line">    <span class="attr">subscribe</span>: res.<span class="property">data</span>.<span class="property">playlist</span>.<span class="property">subscribedCount</span></span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><div class="tip info"><p>可以看到上述请求时并没有将接口信息暴露在组件中，接口全部信息在recommend.js中可以得到方便的管理</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue网络请求&quot;&gt;&lt;a href=&quot;#Vue网络请求&quot; class=&quot;headerlink&quot; title=&quot;Vue网络请求&quot;&gt;&lt;/a&gt;Vue网络请求&lt;/h1&gt;&lt;h2 id=&quot;配置单个代理&quot;&gt;&lt;a href=&quot;#配置单个代理&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件进阶</title>
    <link href="http://omygan.github.io/posts/3962c01e.html"/>
    <id>http://omygan.github.io/posts/3962c01e.html</id>
    <published>2022-11-23T13:03:43.000Z</published>
    <updated>2022-11-23T14:29:06.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><h3 id="何为插槽"><a href="#何为插槽" class="headerlink" title="何为插槽"></a>何为插槽</h3><p>插槽可以理解为组件封装期间，为用户预留的<strong>内容占位符</strong>。它是 vue 为组件封装者提供的能力，允许开发者在封装组件时，把<strong>不确定的、希望由用户指定的部分</strong>定义为插槽。</p><p><strong>vue 官方规定：每一个 slot 插槽，都要有一个 name 名称</strong></p><p><strong>如果省略了 slot 的 name 属性，则有一个默认名称叫做 default</strong> </p><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>基础使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件中预留插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;contianer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件使用子组件时，向插槽填充内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>填充到插槽的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">child-comp</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果子组件没有预留插槽，那么父组件填充给子组件的自定义内容会被丢弃：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件没有预留插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;contianer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件的自定义内容会被丢弃 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这段自定义内容会被丢弃<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">child-comp</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件可以为插槽提供<strong>后备内容</strong>，当父组件没有提供自定义内容时，后备内容就会生效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件提供后备内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;contianer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>这是后备内容，父组件没有提供自定义内容就会生效<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件没有提供自定义内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-comp</span>&gt;</span> <span class="tag">&lt;/<span class="name">child-comp</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>组件在预留插槽时可以设置 <code>name</code> 属性，为插槽指定名称，这种有具体名称的插槽就叫具名插槽。 没有设置 <code>name</code> 名称的插槽默认名称为 <code>default</code> 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件预留多个具名插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;contianer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span>title 具名插槽<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span>content 具名插槽<span class="tag">&lt;/<span class="name">slot</span>&gt;</span>&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>没有设置 name 名称则默认为 default<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件向具名插槽提供自定义内容</p><ul><li>新的写法：包裹一个 <code>&lt;template&gt;</code> 标签，同时在 <code>&lt;template&gt;</code> 中通过 <code>v-slot:名称</code> 指明插槽的名称。简写形式为 <code>#名称</code> ，且 <code>v-slot</code> 只能使用在 <code>&lt;template&gt;</code> 和组件标签上，普通 HTML 标签不行</li><li>旧的写法：<code>slot=&quot;名称&quot;</code> 指明插槽名称</li><li>如果不指定插槽名称，那么自定义内容会被填充到所有的 <code>default</code> 插槽当中</li><li>同一插槽填充多个内容，是追加不是覆盖</li><li>插槽里也可以插入组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件向具名插槽提供自定义内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>《赠汪伦》<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>《静夜思》<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 简写形式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>床前明月光，疑是地上霜。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>举头望明月，低头思故乡。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这段内容没有指定名称，会被填充到所有 default 插槽中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">child-comp</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>在封装组件的过程中，可以为预留的 <slot> 插槽绑定props 数据，这种带有props 数据的 <slot> 叫做“作用域插槽”。</p><p>内容中可用，我们可以将 obj作为 <code>&lt;slot&gt;</code> 元素的一个 attribute 绑定上去：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是B组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:obj</span>=<span class="string">&quot;obj&quot;</span>&gt;</span>&#123;&#123;obj.firstName&#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>:<span class="string">&#x27;B&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">obj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">firstName</span>:<span class="string">&#x27;leo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">lastName</span>:<span class="string">&#x27;lion&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绑定在 <code>&lt;slot&gt;</code> 元素上的 attribute 被称为<strong>插槽 prop</strong>。现在在父级作用域中，我们可以使用带值的 <code>slot-scope</code> 来定义我们提供的插槽 prop 的名字：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">B</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;data&quot;</span>&gt;</span>《赠汪伦》<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;data.obj.lastName&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">B</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们选择将包含所有插槽 prop 的对象命名为 data，</p><h2 id="插槽版本变化"><a href="#插槽版本变化" class="headerlink" title="插槽版本变化"></a>插槽版本变化</h2><p>v-slot 指令自 Vue 2.6.0 起被引入，提供更好的支持 slot 和 slot-scope attribute 的 API 替代方案。v-slot 完整的由来参见这份 RFC。在接下来所有的 2.x 版本中 slot 和 slot-scope attribute 仍会被支持，但已经被官方废弃且不会出现在 Vue 3 中。也就是说，在vue2版本中，我们仍可以使用slot跟slot-scope，但是在vue3中就只能使用v-slot了。</p><h3 id="具名插槽-1"><a href="#具名插槽-1" class="headerlink" title="具名插槽"></a>具名插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//B.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>写法变化，使用v-slot</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">B</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是header部分<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是main（默认插槽）部分<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是footer部分<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">B</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽-1"><a href="#作用域插槽-1" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p><strong>写法变化，使用v-slot</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">B</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;data1&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;data1.obj.lastName&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        // 具名插槽和作用域插槽配合使用</span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>=<span class="string">&quot;data2&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;data2.obj.lastName&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">B</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>私有自定义指令：在组件的 <code>directives</code> 节点声明</li><li>全局自定义指令：在 <code>main.js</code> 文件中声明</li></ul><h3 id="完整写法"><a href="#完整写法" class="headerlink" title="完整写法"></a>完整写法</h3><ul><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM 。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>=<span class="string">&quot;content&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="number">666</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line">  <span class="attr">focus</span>: &#123;</span><br><span class="line">    <span class="comment">// 只调用一次, 指令与元素成功绑定时执行，执行一次</span></span><br><span class="line">    <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">      el.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指令所在元素插入页面时执行，执行一次</span></span><br><span class="line">    <span class="title function_">inserted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">      <span class="comment">// 一进入页面输入框获得焦点</span></span><br><span class="line">      el.<span class="title function_">focus</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指令所在元素渲染</span></span><br><span class="line">    <span class="title function_">update</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">      el.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局写法</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    el.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    el.<span class="title function_">focus</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    el.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Mixin-混入"><a href="#Mixin-混入" class="headerlink" title="Mixin 混入"></a>Mixin 混入</h2><ul><li>Mixin 可以把多个组件共用的配置提取成一个混入对象</li><li>混入和组件自身的配置会合并</li><li><code>data</code> 、<code>methods</code> 若冲突以自身为准</li><li>对于生命周期钩子，执行动作会合并，且先执行 Mixin 里的动作</li></ul><p>定义混入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixin.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello mixin&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin2 = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="number">200</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用局部混入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mixin, mixin2 &#125; <span class="keyword">from</span> <span class="string">&#x27;../mixin.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;School&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">schoolName</span>: <span class="string">&#x27;北大&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mixins</span>: [mixin, mixin2],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用全局混入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; mixin, mixin2 &#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin2)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;插槽&quot;&gt;&lt;a href=&quot;#插槽&quot; class=&quot;headerlink&quot; title=&quot;插槽&quot;&gt;&lt;/a&gt;插槽&lt;/h1&gt;&lt;h3 id=&quot;何为插槽&quot;&gt;&lt;a href=&quot;#何为插槽&quot; class=&quot;headerlink&quot; title=&quot;何为插槽&quot;&gt;&lt;/a&gt;何为插槽&lt;/h</summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue Router</title>
    <link href="http://omygan.github.io/posts/49bed910.html"/>
    <id>http://omygan.github.io/posts/49bed910.html</id>
    <published>2022-11-22T14:25:52.000Z</published>
    <updated>2022-11-23T07:30:25.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="何为路由"><a href="#何为路由" class="headerlink" title="何为路由"></a>何为路由</h2><ul><li>一组路由即一组映射关系（key-value）</li><li>key 为路径，value 可能是 function 或 component</li></ul><h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><p>前端路由即地址和组件之间的对应关系</p><h3 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h3><ul><li>后端路由是指请求方式、请求地址与 <code>function</code> 处理函数之间的对应关系</li><li>服务器收到一个请求，根据请求方式、路径匹配对应的函数处理请求，返回响应数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/userlist&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;...&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><h2 id="单页面应用程序-SPA"><a href="#单页面应用程序-SPA" class="headerlink" title="单页面应用程序 SPA"></a>单页面应用程序 SPA</h2><p>单页面应用程序将所有的功能局限于一个 web 页面中，仅在该 web 页面初始化时加载相应的资源（ HTML、JavaScript 和 CSS）。 一旦页面加载完成了，SPA 不会因为用户的操作而进行页面的重新加载或跳转。而是利用 JavaScript 动态地变换 HTML 的内容，从而实现页面与用户的交互。</p><p>SPA 的优点：</p><ul><li>良好的交互体验<ul><li>内容的改变不需要重新加载整个页面</li><li>数据通过 <code>Ajax</code> 异步获取</li><li>没有页面跳转，不会出现白屏现象</li></ul></li><li>良好的前后端工作分离模式<ul><li>后端专注于提供 API 接口，更易实现接口复用</li><li>前端专注页面渲染，更利于前端工程化发展</li></ul></li><li>减轻服务器压力<ul><li>服务器只提供数据，不负责页面的合成与逻辑处理，吞吐能力会提高</li></ul></li></ul><p>SPA 的缺点：</p><ul><li>首屏加载慢：可使用路由懒加载、代码压缩、CDN 加速、网络传输压缩</li><li>不利于 SEO ：SSR 服务器端渲染</li></ul><h2 id="vue-router-初体验"><a href="#vue-router-初体验" class="headerlink" title="vue-router 初体验"></a>vue-router 初体验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;../components/Home.vue&quot;</span></span><br><span class="line"><span class="comment">//  给组件配置路由</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 路由路径  必须以 / 开头</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">  <span class="comment">// 组件名</span></span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>懒加载可以提高浏览器性能， 缓解首屏加载慢的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">path</span>: <span class="string">&quot;/product&quot;</span>,</span><br><span class="line"> <span class="comment">// 使用懒加载的方式导入组件</span></span><br><span class="line"> <span class="comment">// 面试题:如何优化vue项目首屏加速问题  ---&gt;懒加载路由</span></span><br><span class="line"> <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/Product.vue&quot;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重定向</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="comment">// 重定向属性</span></span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&quot;/home&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="通配符路由"><a href="#通配符路由" class="headerlink" title="通配符路由"></a>通配符路由</h2><p><strong><em>通配符路由 注意,次路由就是无论你写什么luyou,ciluyou都能匹配上,一般用于处理不存在的路由路径</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line"> <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/NotFound.vue&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h2><p><code>&lt;router-link&gt;</code> 4 个常用属性：</p><ol><li><code>to</code> 属性</li></ol><ul><li>用于指定跳转路由</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>tag</code> 属性</li></ol><ul><li>指明 <code>&lt;router-link&gt;</code> 最终被渲染为何种标签，默认是 a 标签</li><li>渲染为其他标签也会监听点击，触发导航</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;li&quot;</span>&gt;</span>tag<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>tag<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>replace</code> 属性</li></ol><ul><li>路由跳转不会增加新的历史记录，而是替换当前历史记录</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">replace</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>active-class</code> 属性</li></ol><ul><li>指明路由被激活时添加的类名，默认为 <code>router-link-active</code></li><li>路由高亮</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.active &#123;</span><br><span class="line">  color: white;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p><code>About</code> 组件中声明子路由链接和子路由占位符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要把父路由寫上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/tab1&quot;</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/tab2&quot;</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>children</code> 属性声明子路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 注意不要写成 /tab1</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;tab1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab1</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;tab2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab2</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h2><p>news组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是新闻组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/news/hot&quot;</span>&gt;</span>热门新闻<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/news/girl&quot;</span>&gt;</span>美女<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;view2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>news路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/news&quot;</span>,</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&quot;/news/hot&quot;</span></span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/news/News.vue&quot;</span>),</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;hot&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/news/Hot.vue&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;girl&quot;</span>,</span><br><span class="line">      <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="comment">//    router-view 没有name属性的 会执行default</span></span><br><span class="line">        <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/news/Girl.vue&quot;</span>),</span><br><span class="line">        <span class="comment">//    router-view 的name属性</span></span><br><span class="line">        <span class="attr">view2</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/news/Comment.vue&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>声明式导航：</p><ul><li>通过点击链接实现导航</li><li>如普通网页点击 <code>a</code> 链接，<code>vue</code> 点击 <code>&lt;router-link&gt;</code></li></ul><p>编程式导航：</p><ul><li>通过调用 API 实现导航</li><li>普通网页通过 <code>location.href</code> 的方式跳转页面也是编程式导航</li></ul><p><code>vue-router</code> 中实现编程式导航的 API ：</p><ul><li><code>this.$router.push(&#39;hash地址&#39;)</code> ：跳转到指定页面，并增加一条历史记录</li><li><code>this.$router.replace(&#39;hash地址&#39;)</code> ：跳转页面，但不会新增历史记录，而是替换当前的历史记录</li><li><code>this.$router.go(数值)</code> ：历史记录前进或后退，相当于点击浏览器前进后退箭头</li><li><code>this.$router.forward()</code> ：前进一步</li><li><code>this.$router.back()</code> ：后退一步</li></ul><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>给路由命名，某些情况可简化路由跳转写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;about&#x27;&#125; &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;about&#x27;, query: &#123; id: 1, title: &#x27;hello&#x27; &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><h3 id="query-参数"><a href="#query-参数" class="headerlink" title="query 参数"></a>query 参数</h3><p>路由传值: path query</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/product&#x27;, query:&#123;proName: &#x27;哑铃&#x27;, proPrice: &#x27;38&#x27;&#125;&#125;&quot;</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 路由式 --&gt;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&quot;/product&quot;</span>, <span class="attr">query</span>:&#123;<span class="attr">proName</span>:<span class="string">&quot;秋天的第一杯奶茶&quot;</span>, <span class="attr">proPrice</span>:<span class="string">&quot;19&quot;</span>&#125;&#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">proName</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">proPrice</span></span><br></pre></td></tr></table></figure><h3 id="params-参数（动态路由）"><a href="#params-参数（动态路由）" class="headerlink" title="params 参数（动态路由）"></a>params 参数（动态路由）</h3><p>动态路由是把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。</p><p>声明 params 参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- query 和 params 可以一起用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;c&#x27;, params:&#123;id: &#x27;123&#x27;, name: &#x27;瑜伽球&#x27;, price: &#x27;88.9&#x27;, count: &#x27;1&#x27;&#125;, query: &#123;school: &#x27;love&#x27;&#125;&#125;&quot;</span>&gt;</span>购物<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 路由式 --&gt;</span><br><span class="line">&lt;!-- query 和 params 可以一起用 --&gt;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;c&quot;</span>, <span class="attr">params</span>:&#123;<span class="attr">id</span>:<span class="string">&quot;222&quot;</span>, <span class="attr">name</span>:<span class="string">&quot;黯然销魂自热饭&quot;</span>, <span class="attr">price</span>:<span class="string">&quot;18&quot;</span>, <span class="attr">count</span>:<span class="string">&quot;10&quot;</span>&#125;, <span class="attr">query</span>: &#123;<span class="attr">school</span>: <span class="string">&#x27;love&#x27;</span>&#125;&#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义动态路由参数</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// 默认params传值方式  刷新页面值不会保存!</span></span><br><span class="line"> <span class="comment">//如果想要刷新页面值还在,需要给路由设置以下信息! 这也是为什么需要设置name属性的原因!</span></span><br><span class="line"> <span class="comment">// /路由/:属性名/:属性名/</span></span><br><span class="line"> <span class="attr">path</span>: <span class="string">&quot;/cart/:id/:name/:price/:count&quot;</span>,</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line"> <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/Cart&quot;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>接收 params 参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;movie-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Movie组件，参数值：&#123;&#123; this.$route.params.id &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由的-props-配置"><a href="#路由的-props-配置" class="headerlink" title="路由的 props 配置"></a>路由的 props 配置</h3><p>简化路由组件接收参数。</p><p>在路由规则中开启 <code>props</code> 传参，组件可以使用 <code>props</code> 接收路由参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/movie/:id/:title&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Movie</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式一：该对象中的所有 key-value 都会以 props 的形式传给组件</span></span><br><span class="line">  <span class="comment">// 该方式是写死的，少用</span></span><br><span class="line">  <span class="attr">props</span>: &#123;<span class="attr">id</span>: <span class="number">666</span>, <span class="attr">title</span>: <span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式二：把 params 参数以 props 的形式传给组件</span></span><br><span class="line">  <span class="comment">// 只能接收 params 参数</span></span><br><span class="line">  <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式三：函数写法，啥都能传</span></span><br><span class="line">  <span class="title function_">props</span>(<span class="params">$route</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">id</span>: $route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">      <span class="attr">title</span>: $route.<span class="property">params</span>.<span class="property">title</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 使用 props 接收路由规则的参数项</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Movie组件，参数值：&#123;&#123; id &#125;&#125;，题目：&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路由元信息-meta"><a href="#路由元信息-meta" class="headerlink" title="路由元信息 meta"></a>路由元信息 meta</h2><p>在 <code>meta</code> 中可以为路由添加自定义信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">isAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><blockquote><p>作用：对路由进行权限控制。</p><p>分类：全局守卫、独享守卫、组件内守卫</p></blockquote><h3 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h3><ul><li>全局前置守卫：<code>beforeEach()</code></li><li>全局后置守卫：<code>afterEach()</code></li></ul><p>守卫回调函数 3 个形参：</p><ul><li><code>to</code> ：将要访问的路由的信息对象，即 <code>$route</code></li><li><code>from</code> ：将要离开的路由的信息对象</li><li><code>next</code> ：放行函数（后置守卫没有）</li></ul><p><code>next</code> 函数 3 种调用方式：</p><ul><li>直接放行：<code>next()</code></li><li>强制跳转到其他路由：<code>next(/login)</code></li><li>阻止本次跳转：<code>next(false)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(to.<span class="property">path</span> === <span class="string">&#x27;/main&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(token) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>) &#123;</span><br><span class="line">    <span class="comment">// 修改网页标题</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h3><ul><li>某一条路由规则独享的守卫</li><li>独享守卫只一个</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line"> <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/Login/login.vue&#x27;</span>),</span><br><span class="line"> <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">   store.<span class="title function_">commit</span>(<span class="string">&#x27;ChangeTabbar_State&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">   <span class="title function_">next</span>()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="组件内路由守卫"><a href="#组件内路由守卫" class="headerlink" title="组件内路由守卫"></a>组件内路由守卫</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="各个守卫执行顺序"><a href="#各个守卫执行顺序" class="headerlink" title="各个守卫执行顺序"></a>各个守卫执行顺序</h3><p>从 <code>About</code> 组件通过路由规则进入 <code>Home</code> 组件：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">About-beforeRouteLeave</span><br><span class="line">beforeEach</span><br><span class="line">Home-beforeEnter</span><br><span class="line">Home-beforeRouteEnter</span><br><span class="line">afterEach</span><br><span class="line">Home组件生命周期开始</span><br></pre></td></tr></table></figure><h2 id="vue-router-4-x"><a href="#vue-router-4-x" class="headerlink" title="vue-router 4.x"></a>vue-router 4.x</h2><p>目前 <code>vue-router</code> 有 <code>3.x</code> 和 <code>4.x</code> 两个版本，前者只能在 <code>vue2.x</code> 中使用，后者只能在 <code>vue3.x</code> 中使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;路由&quot;&gt;&lt;a href=&quot;#路由&quot; class=&quot;headerlink&quot; title=&quot;路由&quot;&gt;&lt;/a&gt;路由&lt;/h1&gt;&lt;h2 id=&quot;何为路由&quot;&gt;&lt;a href=&quot;#何为路由&quot; class=&quot;headerlink&quot; title=&quot;何为路由&quot;&gt;&lt;/a&gt;何为路由&lt;/h</summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件传值</title>
    <link href="http://omygan.github.io/posts/45fe8d36.html"/>
    <id>http://omygan.github.io/posts/45fe8d36.html</id>
    <published>2022-11-22T07:11:06.000Z</published>
    <updated>2022-12-02T10:46:23.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h1><h2 id="自定义属性-props"><a href="#自定义属性-props" class="headerlink" title="自定义属性 props"></a>自定义属性 props</h2><blockquote><p>父传子、子传父</p></blockquote><p><code>props</code> 验证：</p><ul><li><code>props</code> 是只读的，若是对象，对象内部的修改不报错，但不推荐。若需修改，则把 <code>props</code> 内容拷贝一份到 <code>data</code> 进行修改</li></ul><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若 props 属性使用驼峰命名法，可使用驼峰形式或短横线分隔形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Son</span> <span class="attr">:num</span>=<span class="string">&quot;count&quot;</span> <span class="attr">:msg</span>=<span class="string">&quot;message&quot;</span> <span class="attr">:pub-time</span>=<span class="string">&quot;time&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件传过来的值：&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件传过来的值：&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组形式</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;pubTime&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅限制类型</span></span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">msg</span>: <span class="title class_">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象形式</span></span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">num</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">msg</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">validator</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value === <span class="string">&#x27;hello&#x27;</span> || value === <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p><strong>使用自定义事件</strong>， <strong>子组件触发自定义事件，并传递数据：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"> <span class="title function_">sendDataToApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 调用函数  传入实参  实参会传递给形参</span></span><br><span class="line">  <span class="comment">// c1_event 父组件的自定义事件</span></span><br><span class="line">  <span class="comment">// $emit(事件名, 实参1, 实参2, .......) 触发自定义事件</span></span><br><span class="line">  <span class="variable language_">this</span>.$emit(<span class="string">&#x27;c1_event&#x27;</span>, <span class="variable language_">this</span>.<span class="property">child1Msg</span>, <span class="number">666</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自定义事件c1_event绑定getC1Msg --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child1</span> @<span class="attr">c1_event</span>=<span class="string">&quot;getC1Msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line"><span class="title function_">getC1Msg</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">msg</span> = a</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">num</span> = b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="父子组件相互通信"><a href="#父子组件相互通信" class="headerlink" title="父子组件相互通信"></a>父子组件相互通信</h3><h4 id="parent-或-root"><a href="#parent-或-root" class="headerlink" title="$parent 或$ root"></a>$parent 或$ root</h4><p><strong>通过共同祖辈<code>$parent</code>或者<code>$root</code>搭建通信桥连</strong></p><p>兄弟组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$parent.on(&#x27;add&#x27;,this.add)</span><br></pre></td></tr></table></figure><p>另一个兄弟组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$parent.emit(&#x27;add&#x27;，xxx)</span><br></pre></td></tr></table></figure><h4 id="通过Vue的ref属性，给子组件标识"><a href="#通过Vue的ref属性，给子组件标识" class="headerlink" title="通过Vue的ref属性，给子组件标识"></a><strong>通过Vue的ref属性，给子组件标识</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child1</span> <span class="attr">ref</span>=<span class="string">&quot;child1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child2</span> <span class="attr">ref</span>=<span class="string">&quot;child2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child2</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件<span class="title class_">Child2</span> --&gt;</span><br><span class="line"><span class="title function_">getParent</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">// 通过this.$parent获取父组件</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$parent</span>);</span><br><span class="line">    </span><br><span class="line"> <span class="comment">// 通过this.$parent.xxx获取父组件中的内容</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">msg</span>);</span><br><span class="line">    </span><br><span class="line"> <span class="comment">// 通过this.$parent.xxx()调用父组件中对应的函数</span></span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="title function_">appFun1</span>(<span class="string">&#x27;爸爸我来找你了!!!&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过this.$parent.$refs.child1 获取父组件中ref标识为child2的兄弟组件</span></span><br><span class="line"><span class="title function_">getChild1</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">$refs</span>.<span class="property">child1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 调用子组件Child1的getChild2方法向child2中传递内容</span></span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">$refs</span>.<span class="property">child1</span>.<span class="title function_">getChild2</span>(<span class="string">&#x27;child兄弟1, 我来找你了&#x27;</span>, <span class="variable language_">this</span>.<span class="property">count</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EventBus-全局事件总线"><a href="#EventBus-全局事件总线" class="headerlink" title="EventBus 全局事件总线"></a>EventBus 全局事件总线</h3><blockquote><p>思想：弄一个所有组件实例都能访问到的 Vue 实例对象，Vue 原型上包含事件处理的相关方法，包括 <code>$on, $emit, $off, $once</code></p></blockquote><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>数据接收方为自定义事件绑定回调函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleData</span>(<span class="params"></span>) &#123;...&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;share&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleData</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 组件销毁，解绑事件</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;share&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据发送方触发自定义事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendData() &#123;</span><br><span class="line">      this.$bus.$emit(&#x27;share&#x27;, 666)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p><strong>创建 eventBus.js 模块，并向外共享一个 Vue 的实例对象。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eventBus.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br></pre></td></tr></table></figure><p><strong>在数据发送方，调用 <code>bus.$emit(&#39;事件名称&#39;, 要发送的数据)</code> 方法触发自定义事件。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据发送方</span></span><br><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;./eventBus.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">sendData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      bus.$emit(<span class="string">&#x27;share&#x27;</span>, <span class="variable language_">this</span>.<span class="property">message</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在数据接收方，通过 <code>bus.$on(&#39;事件名称&#39;, 事件处理函数)</code> 为自定义事件注册事件处理函数。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据接收方</span></span><br><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;./eventBus.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 细节1：在 created 钩子中注册函数</span></span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 细节2：这里使用箭头函数，则 this 指向该组件而非 bus</span></span><br><span class="line">    bus.$on(<span class="string">&#x27;share&#x27;</span>, <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg</span> = val</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h3><blockquote><p>与全局事件总线很相似，因此一般用事件总线，不用这个</p></blockquote><p>安装第三方库 <code>PubSubJS</code> ：<code>npm install -S pubsub.js</code></p><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;组件间通信&quot;&gt;&lt;a href=&quot;#组件间通信&quot; class=&quot;headerlink&quot; title=&quot;组件间通信&quot;&gt;&lt;/a&gt;组件间通信&lt;/h1&gt;&lt;h2 id=&quot;自定义属性-props&quot;&gt;&lt;a href=&quot;#自定义属性-props&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vuex状态管理</title>
    <link href="http://omygan.github.io/posts/5c4a3e27.html"/>
    <id>http://omygan.github.io/posts/5c4a3e27.html</id>
    <published>2022-11-21T12:34:56.000Z</published>
    <updated>2022-11-21T15:33:48.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p><a href="https://vuex.vuejs.org/zh/">Vuex官方文档</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Vuex是什么？</p><p>Vuex 专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 Vue 应用中多个组件的共享状态进行集中式的管理，也是一种组件间通信的方式，适用于任意组件间通信</p><p>何时用 Vuex ？</p><ul><li>多个组件依赖于同一状态</li><li>来自不同组件的行为需要变更同一状态</li></ul><p>Vuex 工作原理图：</p><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/vuex.6007da7c.png" alt=""></p><p>官方Vuex项目结构示例</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── api</span><br><span class="line">│   └── ... <span class="params">#</span> 抽取出API请求</span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          <span class="params">#</span> 组装模块并导出 store 的地方</span><br><span class="line">    ├── actions.js        <span class="params">#</span> 根级别的 action</span><br><span class="line">    ├── mutations.js      <span class="params">#</span> 根级别的 mutation</span><br><span class="line">    └── modules</span><br><span class="line">        ├── cart.js       <span class="params">#</span> 购物车模块</span><br><span class="line">        └── products.js   <span class="params">#</span> 产品模块</span><br></pre></td></tr></table></figure><h2 id="Vuex核心概念"><a href="#Vuex核心概念" class="headerlink" title="Vuex核心概念"></a>Vuex核心概念</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><ul><li>Vuex 管理的状态对象</li><li>唯一的</li></ul><p><strong>在组件中通过<code>this.$store.state.xxx</code> 获取 state 里xxx的数据</strong></p><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><ul><li>值为一个对象，包含多个响应用户动作的回调函数</li><li>可包含异步代码（使用计时器）</li><li>一般在开发过程中可以跳过actions，直接调用mutations中的方法对state中的数据更新</li></ul><p><strong>在组件中通过<code>this.$store.dispatch(&#39;actions函数名&#39;, 参数)</code>触发actions中函数的调用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;jiaWait&#x27;</span>,<span class="variable language_">this</span>.<span class="property">xxx</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在actions对象中通过 <code>context.commit(&#39;mution函数名&#39;，参数)</code>触发 mutation 中函数的调用，<span class='p red'>间接更新 state</span>contex代表上下文对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line"><span class="title function_">jiaWait</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions中的jiaWait被调用了&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><ul><li>值为一个对象，包含多个直接更新 state 的方法</li><li>不能写异步代码，只能单纯地操作 state</li></ul><p><strong>在组件中通过this.$store.commit(‘mutations中的方法’，‘参数‘)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,<span class="variable language_">this</span>.<span class="property">xxx</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在store中</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//准备mutations——用于操作数据（state）</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations中的JIA被调用了&#x27;</span>)</span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><ul><li>值为一个对象，包含多个用于返回数据的函数</li><li>类似于计算属性，getters 返回的数据依赖于 state 的数据</li><li>它不是必须的，当加工逻辑复杂且需要复用时，可以考虑使用</li></ul><p><strong>在组件中<code>this.$store.getters.xxx</code> 获取 state 里xxx加工修改后的数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"><span class="title function_">getJGScore</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//获取vuex中 getters的计算属性值</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">jigeScore</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//---------------------</span></span><br><span class="line"><span class="comment">//getters中带有赋值操作  建议写成常规形态.不使用辅助函数</span></span><br><span class="line"><span class="title function_">veryGood</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="title function_">scoreGrand</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">liangHao</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="title function_">scoreGrand</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">jiGe</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="title function_">scoreGrand</span>(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">pass</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="title function_">scoreGrand</span>(<span class="string">&quot;P&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在store中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="comment">// 获取&gt;70分  及格</span></span><br><span class="line">  <span class="attr">jigeScore</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">stuScore</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> obj.<span class="property">score</span> &gt;= <span class="number">70</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//根据用户需求 获取对应的数据</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  评级</span></span><br><span class="line"><span class="comment">  100-90  优秀        &quot;A&quot;</span></span><br><span class="line"><span class="comment">  90-80  良好         &quot;B&quot;</span></span><br><span class="line"><span class="comment">  80-70 及格         &quot;C&quot;</span></span><br><span class="line"><span class="comment">  70分以下  凉凉       &quot;D&quot;</span></span><br><span class="line"><span class="comment">  所有及格的人  通过pass  &quot;P&quot;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">//在设置setter赋值</span></span><br><span class="line">  <span class="attr">scoreGrand</span>: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> <span class="function">(<span class="params">grand</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (grand) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">stuScore</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> obj.<span class="property">score</span> &gt;= <span class="number">90</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">stuScore</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> obj.<span class="property">score</span> &lt; <span class="number">90</span> &amp;&amp; obj.<span class="property">score</span> &gt;= <span class="number">80</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">stuScore</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> obj.<span class="property">score</span> &gt;= <span class="number">70</span> &amp;&amp; obj.<span class="property">score</span> &lt; <span class="number">80</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;D&quot;</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">stuScore</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> obj.<span class="property">score</span> &lt; <span class="number">70</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;P&quot;</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> getters.<span class="property">jigeScore</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attr">default</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><ul><li>一个 module 是一个 store 的配置对象，与一个组件对应</li></ul><p><strong>store中引入modules模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line"><span class="attr">modules</span>:&#123;</span><br><span class="line"><span class="attr">countAbout</span>:countOptions,</span><br><span class="line"><span class="attr">personAbout</span>:personOptions</span><br><span class="line"><span class="comment">// 重命名</span></span><br><span class="line">    <span class="attr">p</span>: product,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在组件中使用<strong>this.$store.state.countAbout.count</strong>获取 countAbout 模组的 state 对象中的 count数据</p><p>在组件中使用<strong>this.$store.commit(“p/changeCount”)</strong>调用 p 模组的 mutations 中的 changeCount方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state 辅助函数</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&quot;cartmodule&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">getList</span>: <span class="string">&quot;cartList&quot;</span>,</span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// getters 辅助函数</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&quot;p&quot;</span>, [<span class="string">&quot;getProList&quot;</span>]),</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations辅助函数写法</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&quot;cartmodule&quot;</span>, [<span class="string">&quot;changeCount1&quot;</span>]),</span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&quot;p&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">ccc</span>: <span class="string">&quot;changeCount&quot;</span>,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><div class="tip info"><p>下文会提到辅助函数的用法</p></div><h2 id="四个mapXXX方法"><a href="#四个mapXXX方法" class="headerlink" title="四个mapXXX方法"></a>四个mapXXX方法</h2><h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState()"></a>mapState()</h3><ul><li>将 <code>state</code> 状态映射为计算属性</li><li>对象写法：键为自取的计算属性名，值为对应的状态（必须为字符串）</li><li>数组写法：当键值同名，可直接写状态名（字符串）</li><li>函数返回一个对象：<code>&#123;sum: f, price: f&#125;</code></li><li>注意对象的 <code>...&#123;&#125;</code> 展开写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="comment">// 手动写法</span></span><br><span class="line">  <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">sum</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">price</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">price</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象写法</span></span><br><span class="line">  ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>: <span class="string">&#x27;sum&#x27;</span>, <span class="attr">price</span>: <span class="string">&#x27;price&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数组写法</span></span><br><span class="line">  ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;price&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters()"></a>mapGetters()</h3><ul><li>将 <code>getters</code> 的数据映射为计算属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">bigSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">bigSum</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">double</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">double</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象写法</span></span><br><span class="line">  ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>: <span class="string">&#x27;bigSum&#x27;</span>, <span class="attr">double</span>: <span class="string">&#x27;double&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数组写法</span></span><br><span class="line">  ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>, <span class="string">&#x27;double&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions()"></a>mapActions()</h3><ul><li>生成与 <code>actions</code> 对话的函数，即包含 <code>$store.dispatch()</code></li><li><code>mapActions</code> 生成的函数不会传入参数，需要在调用时手动传入数据，不传参默认传入 <code>$event</code></li><li>数组写法要注意函数名和 <code>actions</code> 动作类型同名，调用时勿写错</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 手动写法</span></span><br><span class="line">  <span class="title function_">incrementOdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addOdd&#x27;</span>, <span class="variable language_">this</span>.<span class="property">number</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">incrementAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addAsync&#x27;</span>, <span class="variable language_">this</span>.<span class="property">number</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 辅助函数 对象写法</span></span><br><span class="line">  ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>: <span class="string">&#x27;addOdd&#x27;</span>, <span class="attr">incrementAsync</span>: <span class="string">&#x27;addAsync&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 辅助函数 数组写法</span></span><br><span class="line">  ...<span class="title function_">mapActions</span>([<span class="string">&#x27;even&#x27;</span>]),</span><br><span class="line">      </span><br><span class="line">  <span class="comment">// 在以下函数中依次调用 actions的 addOdd addAsync方法</span></span><br><span class="line"><span class="title function_">addToCart</span>(<span class="params">number</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">even</span>(&#123;number&#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">incrementOdd</span>(&#123;price&#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">incrementAsync</span>(&#123;price&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h3><ul><li>生成与 <code>mutations</code> 对话的函数，即包含 <code>$store.commit()</code></li><li>同样注意传递参数，以及数组形式函数名的问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="comment">// 辅助函数 对象写法</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>: <span class="string">&#x27;ADD&#x27;</span>, <span class="attr">decrement</span>: <span class="string">&#x27;SUB&#x27;</span>&#125;),</span><br><span class="line"><span class="comment">// 辅助函数 数组写法</span></span><br><span class="line">...<span class="title function_">mapMutations</span>([<span class="string">&#x27;ADD_CART&#x27;</span>]),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在以下函数中依次调用 mutations的 ADD SUB ADD_CART方法</span></span><br><span class="line"><span class="title function_">addToCart</span>(<span class="params">name, price, specs</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">ADD_CART</span>(&#123;name, price, specs&#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">increment</span>(&#123;price&#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">decrement</span>(&#123;price&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vuex&quot;&gt;&lt;a href=&quot;#Vuex&quot; class=&quot;headerlink&quot; title=&quot;Vuex&quot;&gt;&lt;/a&gt;Vuex&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://vuex.vuejs.org/zh/&quot;&gt;Vuex官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>React入门</title>
    <link href="http://omygan.github.io/posts/74c45c76.html"/>
    <id>http://omygan.github.io/posts/74c45c76.html</id>
    <published>2022-11-21T06:55:24.000Z</published>
    <updated>2022-11-21T08:35:30.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React入门"><a href="#React入门" class="headerlink" title="React入门"></a>React入门</h1><p><a href="https://zh-hans.reactjs.org/">react官网</a></p><h2 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h2><h3 id="React-为何物"><a href="#React-为何物" class="headerlink" title="React 为何物"></a>React 为何物</h3><p>React：用于构建用户界面的 JavaScript 库。由 <code>Facebook</code> 开发且开源。</p><h3 id="为何学习-React"><a href="#为何学习-React" class="headerlink" title="为何学习 React"></a>为何学习 React</h3><p>原生 JavaScript 的痛点：</p><ul><li>操作 DOM 繁琐、效率低</li><li>使用 JavaScript 直接操作 DOM，浏览器进行大量重绘重排</li><li>原生 JavaScript 没有组件化编码方案，代码复用率低</li></ul><p>React 的特点：</p><ul><li>采用组件化模式、声明式编码，提高开发效率和组件复用率</li><li>在 <code>React Native</code> 中可用 React 语法进行移动端开发</li><li>使用虚拟 DOM 和 Diffing 算法，减少与真实 DOM 的交互</li></ul><h2 id="React-初体验"><a href="#React-初体验" class="headerlink" title="React 初体验"></a>React 初体验</h2><h3 id="Hello-React"><a href="#Hello-React" class="headerlink" title="Hello React"></a>Hello React</h3><p>相关 JS 库：</p><ul><li><code>react.development.js</code> ：React 核心库</li><li><code>react-dom.development.js</code> ：提供 DOM 操作的 React 扩展库</li><li><code>babel.min.js</code> ：解析 JSX 语法，转换为 JS 代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 此处一定要写babel，表示写的不是 JS，而是 JSX，并且靠 babel 翻译 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 不要写引号，因为不是字符串</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 导入核心库和扩展库后，会有 React 和 ReactDOM 两个对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建虚拟-DOM-的两种方式：JS-和-JSX"><a href="#创建虚拟-DOM-的两种方式：JS-和-JSX" class="headerlink" title="创建虚拟 DOM 的两种方式：JS 和 JSX"></a>创建虚拟 DOM 的两种方式：JS 和 JSX</h3><ul><li>使用 JS 创建虚拟 DOM 比 JSX 繁琐</li><li>JSX 可以让程序员更加简单地创建虚拟 DOM，相当于语法糖</li><li>最终 babel 会把 JSX 语法转换为 JS</li></ul><h3 id="创建虚拟-DOM-的两种方式：JS-和-JSX-1"><a href="#创建虚拟-DOM-的两种方式：JS-和-JSX-1" class="headerlink" title="创建虚拟 DOM 的两种方式：JS 和 JSX"></a>创建虚拟 DOM 的两种方式：JS 和 JSX</h3><ul><li>使用 JS 创建虚拟 DOM 比 JSX 繁琐</li><li>JSX 可以让程序员更加简单地创建虚拟 DOM，相当于语法糖</li><li>最终 babel 会把 JSX 语法转换为 JS</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1.使用 React 提供的 API 创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, &#123; <span class="attr">id</span>: <span class="string">&#x27;title&#x27;</span> &#125;, <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;Hello,React&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="虚拟-DOM-amp-amp-真实-DOM"><a href="#虚拟-DOM-amp-amp-真实-DOM" class="headerlink" title="虚拟 DOM &amp;&amp; 真实 DOM"></a>虚拟 DOM &amp;&amp; 真实 DOM</h3><p>关于虚拟 DOM：</p><ol><li>本质是 Object 类型的对象（一般对象）</li><li>虚拟 DOM 比较“轻”，真实 DOM 比较“重”，因为虚拟 DOM 是 React 内部在用，无需真实 DOM 上那么多的属性。</li><li>虚拟 DOM 最终会被 React 转化为真实 DOM，呈现在页面上。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">TDOM</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;demo&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;虚拟DOM&#x27;</span>, <span class="variable constant_">VDOM</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;真实DOM&#x27;</span>, <span class="variable constant_">TDOM</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><h3 id="JSX-简介"><a href="#JSX-简介" class="headerlink" title="JSX 简介"></a>JSX 简介</h3><ul><li>全称：JavaScript XML</li><li>React 定义的类似于 XML 的 JS 扩展语法；本质是 <code>React.createElement()</code> 方法的语法糖</li><li>作用：简化创建虚拟 DOM</li></ul><h3 id="JSX-语法规则"><a href="#JSX-语法规则" class="headerlink" title="JSX 语法规则"></a>JSX 语法规则</h3><ul><li>定义虚拟 DOM 时，不要写引号</li><li>标签中混入 JS 表达式需要使用 <code>&#123;&#125;</code></li><li>指定类名不用 <code>class</code>，使用 <code>className</code></li><li>内联样式，使用 <code>style=&#123; &#123; key: value &#125; &#125;</code> 的形式</li><li>只能有一个根标签</li><li>标签必须闭合，单标签结尾必须添加 <code>/</code>：<code>&lt;input type=&quot;text&quot; /&gt;</code></li><li>标签首字母小写，则把标签转换为 HTML 对应的标签，若没有，则报错</li><li>标签首字母大写，则渲染对应组件，若没有定义组件，则报错</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsx语法规则<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> myId = <span class="string">&#x27;aTgUiGu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> myData = <span class="string">&#x27;HeLlo,rEaCt&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&#123;myId.toLowerCase()&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">white</span>&#x27;, <span class="attr">fontSize:</span> &#x27;<span class="attr">19px</span>&#x27; &#125;&#125;&gt;</span>&#123;myData.toLowerCase()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          // <span class="tag">&lt;<span class="name">good</span>&gt;</span>very good<span class="tag">&lt;/<span class="name">good</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          // <span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSX-例子"><a href="#JSX-例子" class="headerlink" title="JSX 例子"></a>JSX 例子</h3><p>注意区分：<strong>JS 语句(代码)</strong> 与 <strong>JS 表达式</strong>：</p><ol><li>表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">a + b</span><br><span class="line"><span class="title function_">demo</span>(<span class="number">1</span>)</span><br><span class="line">arr.<span class="title function_">map</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>语句(代码)：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">for</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">switch</span>()&#123;<span class="attr">case</span>:xxxx&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> list = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>] <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端js框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      // React 会自动遍历数组</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      &#123;list.map((item, index) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        // Each child in a list should have a unique &quot;key&quot; prop.</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      &#125;)&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  ) <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;React入门&quot;&gt;&lt;a href=&quot;#React入门&quot; class=&quot;headerlink&quot; title=&quot;React入门&quot;&gt;&lt;/a&gt;React入门&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zh-hans.reactjs.org/&quot;&gt;react官网&lt;/a&gt;</summary>
      
    
    
    
    <category term="React" scheme="http://omygan.github.io/categories/React/"/>
    
    
    <category term="react" scheme="http://omygan.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Vue生命周期</title>
    <link href="http://omygan.github.io/posts/83f13096.html"/>
    <id>http://omygan.github.io/posts/83f13096.html</id>
    <published>2022-11-21T06:54:23.000Z</published>
    <updated>2022-11-21T08:40:20.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h1><p>vue 生命周期是指一个组件从创建、运行、销毁的整个过程。每个阶段对应着不同的生命周期钩子。</p><p>生命周期钩子也可理解为：Vue 在特定的时刻调用特定的函数。</p><p>除了图中 8 个钩子，还有 <code>nextTick</code>，<code>activated</code>，<code>deactivated</code></p><p>关于销毁过程：</p><ul><li>销毁后借助 Vue 开发者工具看不到任何信息。</li><li>销毁后自定义事件会失效，但原生 DOM 事件依然有效。</li><li>一般不在 <code>beforeDestroy</code> 操作数据，因为即便操作数据，也不会再触发更新流程</li></ul><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/lifecycle2.6eba8c66.png" alt=""></p><p><img src="https://brucecai55520.gitee.io/bruceblog/assets/img/lifecycle.e6900649.png" alt=""></p><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">updated</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destroyed&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>vue 提供了内置的 <code>&lt;component&gt;</code> 组件用于动态切换组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 is 属性指定要渲染的组件，传递的是字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName = &#x27;Left&#x27;&quot;</span>&gt;</span>展示Left组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName = &#x27;Right&#x27;&quot;</span>&gt;</span>展示Right组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>默认情况下，切换动态组件时无法保持组件的状态。此时可以使用 vue 内置的 <code>&lt;keep-alive&gt;</code> 组件保持动态组件的状态，对被包裹的组件进行状态缓存。</p><p>被 <code>&lt;keep-alive&gt;</code> 包裹的组件会<span class='p red'>多出两个生命周期函数：</span>当组件被激活时，触发 <code>activated</code> 钩子；当组件被缓存时，触发 <code>deactivated</code> 钩子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;keep-alive&gt;</code> 的 <code>include</code> 和 <code>exclude</code> 属性，分别用于指明哪些组件要缓存、哪些组件不要缓存。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;Left, Right&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;News&#x27;, &#x27;Message&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>eg： 可以处理New组件缓存时,清除计时器功能, 提高性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">activated</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;News组件被激活了&#x27;</span>)</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span></span><br><span class="line"> &#125;,<span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;News组件失活了&#x27;</span>)</span><br><span class="line"> <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h2><ul><li><p>语法：<code>this.$nextTick(回调函数)</code></p></li><li><p>作用：在下一次 DOM 更新结束后执行其指定的回调</p></li><li><p>什么时候用：当改变数据后，要基于更新后的 DOM 进行操作时，要在 <code>nextTick</code> 指定的回调函数中执行</p></li><li><p>组件的 <code>$nextTick(cb)</code> 方法，会把 cb 回调推迟到下一个 DOM 更新周期之后执行，即在 DOM 更新完成后再执行回调，从而保证 cb 回调可以获取最新的 DOM 元素</p><p>  使用$nextTick实现自动获取输入框焦点功能（优化性能）</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编辑</span></span><br><span class="line"><span class="title function_">handleEdit</span>(<span class="params">todo</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(todo.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;isEdit&#x27;</span>))&#123;</span><br><span class="line">todo.<span class="property">isEdit</span> = <span class="literal">true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;@&#x27;)</span></span><br><span class="line"><span class="variable language_">this</span>.$set(todo,<span class="string">&#x27;isEdit&#x27;</span>,<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inputTitle</span>.<span class="title function_">focus</span>()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><div class="tip "><p>Vue处理函数为了防止重复解析模板会在所有代码执行完毕后再重新解析模板，如果代码块内部要操作dom节点，就可能会导致找不到节点，所需功能无法实现，如果在代码块中添加延时计时器，可以实现需求但应尽量避免这种操作，使用$nextTick()方法，vue检测到此方法后会在dom更新完毕后执行此方法的回调函数（cb）操作dom</p></div><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=90&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=32186d356bd8f698fa879ff1f5d9fcb9">$nextTick详细讲解</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue生命周期&quot;&gt;&lt;a href=&quot;#Vue生命周期&quot; class=&quot;headerlink&quot; title=&quot;Vue生命周期&quot;&gt;&lt;/a&gt;Vue生命周期&lt;/h1&gt;&lt;p&gt;vue 生命周期是指一个组件从创建、运行、销毁的整个过程。每个阶段对应着不同的生命周期钩子。&lt;/p&gt;</summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Object对象</title>
    <link href="http://omygan.github.io/posts/8892ccdc.html"/>
    <id>http://omygan.github.io/posts/8892ccdc.html</id>
    <published>2022-11-20T18:37:26.000Z</published>
    <updated>2022-11-21T07:44:03.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><strong>对象是一种复杂的数据类型,  是一种无序的数据类型，它是多个属性(数据)和方法(功能)的集合，它允许动态的添加和删除属性</strong></p><h2 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h2><p>javascript中的对象可以分为三大类，分别是内部对象、宿主对象和自定义对象。</p><ol><li><p>内部对象</p><ul><li>Object、Function、Array、String、Boolean、Number、Date、RegExp</li></ul></li><li><p>宿主对象 </p><ul><li>主要由浏览器提供的对象，比如：BOM、DOM</li></ul></li><li><p>自定义对象</p><ul><li>开发人员自定义的对象</li></ul></li></ol><h2 id="计算商店水果的平均价格"><a href="#计算商店水果的平均价格" class="headerlink" title="计算商店水果的平均价格"></a>计算商店水果的平均价格</h2><h3 id="面向过程编程"><a href="#面向过程编程" class="headerlink" title="面向过程编程"></a>面向过程编程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Shop</span> = <span class="string">&quot;商店&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> commodity = [</span><br><span class="line">  &#123; <span class="attr">fruit</span>: <span class="string">&quot;苹果&quot;</span>, <span class="attr">price</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">fruit</span>: <span class="string">&quot;香蕉&quot;</span>, <span class="attr">price</span>: <span class="number">11</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">average</span>(<span class="params">commodity, Shop</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> total = commodity.<span class="title function_">reduce</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> v + i.<span class="property">price</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Shop</span> + <span class="string">&quot;:&quot;</span> + total / commodity.<span class="property">length</span> + <span class="string">&quot;元&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">average</span>(price, <span class="title class_">Shop</span>));</span><br></pre></td></tr></table></figure><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p>使用对象编程的代码结构清晰，也减少了函数的参数传递，也不用担心函数名的覆盖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Shop</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;后盾人&quot;</span>,</span><br><span class="line">  <span class="attr">commodity</span>: [</span><br><span class="line">    &#123; <span class="attr">fruit</span>: <span class="string">&quot;苹果&quot;</span>, <span class="attr">price</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">fruit</span>: <span class="string">&quot;香蕉&quot;</span>, <span class="attr">price</span>: <span class="number">11</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="title function_">average</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> total = commodity.<span class="title function_">reduce</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> v + i.<span class="property">price</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Shop</span> + <span class="string">&quot;:&quot;</span> + total / commodity.<span class="property">length</span> + <span class="string">&quot;元&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="title function_">average</span>());</span><br></pre></td></tr></table></figure><h2 id="基本声明"><a href="#基本声明" class="headerlink" title="基本声明"></a>基本声明</h2><p>字面量声明对象， 方便快捷</p><p>字面量形式在系统内部也是使用构造函数 <code>new Object</code>创建的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;欸嘿&#x27;</span>,</span><br><span class="line">  <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">get</span>()); <span class="comment">//欸嘿</span></span><br></pre></td></tr></table></figure><p>属性与方法简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;欸嘿&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name,</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">get</span>()); <span class="comment">//欸嘿</span></span><br></pre></td></tr></table></figure><h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><p>点语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>使用<code>[]</code> 获取：这种方法不常用， 但在特殊场景必须使用此方法拿到数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> property = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user[property]);</span><br></pre></td></tr></table></figure><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><p>定义在对象中的<code>函数</code></p><p>计算学生平均成绩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lisi = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">grade</span>: &#123;</span><br><span class="line">    <span class="attr">math</span>: <span class="number">99</span>,</span><br><span class="line">    <span class="attr">english</span>: <span class="number">67</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//平均成绩</span></span><br><span class="line">  <span class="attr">avgGrade</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">grade</span>) &#123;</span><br><span class="line">      total += <span class="variable language_">this</span>.<span class="property">grade</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total / <span class="variable language_">this</span>.<span class="title function_">propertyCount</span>(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//获取属性数量</span></span><br><span class="line">  <span class="attr">propertyCount</span>: <span class="keyword">function</span>(<span class="params">property</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>[property]) count++;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="title function_">avgGrade</span>());</span><br></pre></td></tr></table></figure><div class="tip "><p>一个学生需要手动创建一个对象，这显然不实际的，下面的构造函数就可以解决这个问题</p></div><h2 id="引用特性"><a href="#引用特性" class="headerlink" title="引用特性"></a>引用特性</h2><p>对象和函数、数组一样是<span class='p red'>引用类型</span>，即复制只会复制引用地址 ，是<span class='p red'>浅拷贝</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1;</span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&quot;eihei&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd.<span class="property">name</span>); <span class="comment">//eihei</span></span><br></pre></td></tr></table></figure><p>对象做为函数参数使用时也不会产生完全赋值，内外共用一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">age</span>: <span class="number">22</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hd</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  user.<span class="property">age</span> += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hd</span>(user);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">age</span>); <span class="comment">//32</span></span><br></pre></td></tr></table></figure><p>内存地址的比较所以使用 <code>==</code> 或 <code>===</code> 一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> xj = hd;</span><br><span class="line"><span class="keyword">let</span> cms = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd == xj); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd === xj); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd === cms); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p><code>this</code> 指当前对象的引用，始终建议在代码内部使用<code>this</code> 而不要使用对象名，不同对象的 this 只指向当前对象。</p><p>下例是不使用 <code>this</code> 时发生的错误场景</p><ul><li>删除了<code>eihie</code> 变量，但在函数体内还在使用<code>eihei</code>变量造成错误</li><li>使用 <code>this</code> 后始终指向到引用地址，就不会有这个问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eihie = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;向军&quot;</span>,</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> eihei.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = eihei;</span><br><span class="line">eihei = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">show</span>()); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p>改用<code>this</code> 后一切正常</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eihei = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>,</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = xj;</span><br><span class="line">eihei = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">show</span>()); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><h2 id="展开语法"><a href="#展开语法" class="headerlink" title="展开语法"></a>展开语法</h2><p>使用<code>...</code>可以展示对象的结构，下面是实现对象合并的示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eihei = &#123; <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>, <span class="attr">web</span>: <span class="string">&quot;baidu.com&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> info = &#123; ...hd, <span class="attr">site</span>: <span class="string">&quot;zz&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>解构是一种更简洁的赋值特性，可以理解为分解一个数据的结构</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象使用</span></span><br><span class="line"><span class="keyword">let</span> info = &#123;<span class="attr">name</span>:<span class="string">&#x27;欸嘿&#x27;</span>,<span class="attr">url</span>:<span class="string">&#x27;baidu.com&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>:n,<span class="attr">url</span>:u&#125; = info</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">// 欸嘿</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果属性名与变量相同可以省略属性定义</span></span><br><span class="line"><span class="keyword">let</span> &#123;name,url&#125; = &#123;<span class="attr">name</span>:<span class="string">&#x27;欸嘿&#x27;</span>,<span class="attr">url</span>:<span class="string">&#x27;baidu.com&#x27;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 欸嘿</span></span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hd</span>(<span class="params">&#123; name, age &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age); <span class="comment">//欸嘿 22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hd</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="变量赋值对象属性"><a href="#变量赋值对象属性" class="headerlink" title="变量赋值对象属性"></a>变量赋值对象属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;欸嘿&quot;</span>,url = <span class="string">&quot;baidu.com&quot;</span>;</span><br><span class="line"><span class="comment">//标准写法如下</span></span><br><span class="line"><span class="keyword">let</span> eihei = &#123; <span class="attr">name</span>: name, <span class="attr">url</span>: url &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eihei);  <span class="comment">//&#123;name: &quot;欸嘿 &quot;, url: &quot;baidu.com&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果属性和值变量同名可以写成以下简写形式</span></span><br><span class="line"><span class="keyword">let</span> opt = &#123; name, url &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(opt); <span class="comment">//&#123;name: &quot;欸嘿&quot;, url: &quot;baidu.com&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="只赋值部分变量"><a href="#只赋值部分变量" class="headerlink" title="只赋值部分变量"></a>只赋值部分变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [,url]=[<span class="string">&#x27;欸嘿&#x27;</span>,<span class="string">&#x27;baidu.com&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url);<span class="comment">//hbaidu.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name&#125;= &#123;<span class="attr">name</span>:<span class="string">&#x27;欸嘿&#x27;</span>,<span class="attr">url</span>:<span class="string">&#x27;baidu.com&#x27;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//欸嘿</span></span><br></pre></td></tr></table></figure><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><h3 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eihei = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(eihei)); <span class="comment">//[&quot;name&quot;, &quot;age&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(eihei)); <span class="comment">//[&quot;欸嘿&quot;, 22]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(eihei)); <span class="comment">//[[&quot;name&quot;,&quot;欸嘿&quot;],[&quot;age&quot;,22]]</span></span><br></pre></td></tr></table></figure><h3 id="for-in"><a href="#for-in" class="headerlink" title="for/in"></a>for/in</h3><p>使用<code>for/in</code>遍历对象属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eihei = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> eihie) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, hd[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-of"><a href="#for-of" class="headerlink" title="for/of"></a>for/of</h3><p><code>for/of</code>用于遍历迭代对象，不能直接操作对象。但<code>Object</code>对象的<code>keys</code>方法返回的是可迭代对象。</p><p>获取所有对象属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hd = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(eihei)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象拷贝"><a href="#对象拷贝" class="headerlink" title="对象拷贝"></a>对象拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><div class="tip warning"><p>浅拷贝是拷贝数据的地址，地址保存在栈中，地址指向保存在堆中的真实数据</p></div><p>对象赋值时复制的是<span class='p red'>内存地址</span>，所以一个对象的改变直接影响另一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;欸嘿&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;eihei&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = obj;</span><br><span class="line"><span class="keyword">let</span> b = obj;</span><br><span class="line">a.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>); <span class="comment">//lisi</span></span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><div class="tip warning"><p>深拷贝是完全拷贝一个数据，在堆中开辟一个存储空间，并分配一个新的地址，该地址指向保存在堆中的真实数据</p></div><p>使用<code>for/in</code>执行对象深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> eihei = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  eihei[key] = obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eihei.<span class="property">name</span> = <span class="string">&quot;哈哈&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eihei);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><h2 id="构建函数"><a href="#构建函数" class="headerlink" title="构建函数"></a>构建函数</h2><p>对象可以通过内置或自定义的构造函数创建。</p><h3 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h3><p>在函数中返回对象的函数称为工厂函数，工厂函数有以下优点</p><ul><li>减少重复创建相同类型对象的代码</li><li>修改工厂函数的方法影响所有同类对象</li></ul><p>使用字面量创建对象需要复制属性与方法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>,</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;eihei&quot;</span>,</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用工厂函数可以简化这个过程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">stu</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> lisi = <span class="title function_">stu</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">lisi.<span class="title function_">show</span>();</span><br><span class="line"><span class="keyword">const</span> eihei = <span class="title function_">stu</span>(<span class="string">&quot;欸嘿&quot;</span>);</span><br><span class="line">eihie.<span class="title function_">show</span>();</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>和工厂函数相似构造函数也用于创建对象，它的上下文为新的对象实例。</p><ul><li>构造函数名每个单词首字母大写即<code>Pascal</code> 命名规范</li><li><code>this</code>指当前创建的对象</li><li>不需要返回<code>this</code>系统会自动完成</li><li>需要使用<code>new</code>关键词生成对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//不需要返回，系统会自动返回</span></span><br><span class="line">  <span class="comment">// return this;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> lisi = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">lisi.<span class="title function_">show</span>();</span><br><span class="line"><span class="keyword">const</span> eihie = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;欸嘿&quot;</span>);</span><br><span class="line">eihei.<span class="title function_">show</span>();</span><br></pre></td></tr></table></figure><h3 id="对象函数"><a href="#对象函数" class="headerlink" title="对象函数"></a>对象函数</h3><p>在<code>JS</code>中函数也是一个对象</p><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>在严格模式下方法中的<code>this</code>值为 undefined，这是为了防止无意的修改 window 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> eihei = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">eihei.<span class="title function_">show</span>(); <span class="comment">//User</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dark = eihei.<span class="property">show</span>;</span><br><span class="line"><span class="title function_">dark</span>(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h2 id="属性访问器"><a href="#属性访问器" class="headerlink" title="属性访问器"></a>属性访问器</h2><p>getter 方法用于获得属性值，setter 方法用于设置属性，这是 JS 提供的存取器特性即使用函数来管理属性。</p><ul><li>用于避免错误的赋值</li><li>需要动态监测值的改变</li><li>属性只能在访问器和普通属性任选其一，不能共同存在</li></ul><h3 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter/setter"></a>getter/setter</h3><p>向对是地用户的年龄数据使用访问器监控控制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;后盾人&#x27;</span>, <span class="attr">age</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value != <span class="string">&quot;number&quot;</span> || value &gt; <span class="number">100</span> || value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;年龄格式错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">age</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`年龄是: <span class="subst">$&#123;<span class="variable language_">this</span>.data.age&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">user.<span class="property">age</span> = <span class="number">99</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><div class="tip info"><p>user.age = 99； 此行代码触发user{}中的 set age() 方法</p><p>console.log(user.age); 此行代码触发user{}中的 get age() 方法</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;对象是一种复杂的数据类型,  是一种无序的数据类型，它是多个属性(数据)和方法(功能)的集合，它允许动态的添</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://omygan.github.io/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="http://omygan.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Array数组</title>
    <link href="http://omygan.github.io/posts/e1962cae.html"/>
    <id>http://omygan.github.io/posts/e1962cae.html</id>
    <published>2022-11-20T14:52:44.000Z</published>
    <updated>2022-11-21T07:42:26.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传值与传址"><a href="#传值与传址" class="headerlink" title="传值与传址"></a>传值与传址</h1><p>JavaScript中有两种不同数据类型的值，分别是基本数据类型与引用数据类型</p><ul><li><strong>基本数据类型</strong>包含5类，分别是：Number、String、Boolean、Null、Undefined</li><li><strong>引用数据类型</strong>包含剩下的Array、Date、Math、RegExp、Object、Function等</li></ul><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>基本类型复制是值的复制，互相不受影响, 可以直接访问。下例中将 a 变量的值赋值给 b 变量后，因为基本类型变量是独立的所以 a 的改变不会影响 b 变量的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">// 100</span></span><br></pre></td></tr></table></figure><blockquote><p>如果从一个变量向另一个变量复制基本类型的值，会在变量变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上                                                                                                                                                                         ——《JavaScript高级程序设计》</p></blockquote><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>对于引用类型来讲，变量保存的是引用对象的指针，是通过引用地址访问的。变量间赋值时其实赋值是变量的指针，这样多个变量就引用的是同一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">web</span>: <span class="string">&quot;后盾人&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a.<span class="property">web</span> = <span class="string">&quot;hdcms&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">web</span>);    <span class="comment">// hdcms</span></span><br></pre></td></tr></table></figure><div class="tip success"><p>可以理解为引用地址存在栈中，引用地址指向堆中的真实数据，赋值操作只是拷贝了栈中的引用地址，并没有把堆中的真实数据赋给新变量</p></div><blockquote><p>当从一个变量向另一个变量复制引用的值时，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中。</p><p>不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上引用同一个对象。                                                                                                                          </p><p>​                                                                                                                                                                ——《JavaScript高级程序设计》</p></blockquote><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/%E5%9C%B0%E5%9D%80%E3%80%82png.jpg" alt=""></p><div class="tip bell"><p>思考&amp;实践：</p><p>​    map() 和 forEach() 操作 在不同数据类型下对数据的影响是怎样的？？？</p><p>​    —-未完待续</p></div><h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><p><strong>数组是多个变量值的集合，数组是<code>Array</code> 对象的实例，所以可以像对象一样调用方法。</strong></p><h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>使用对象方式创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="string">&#x27;欸嘿&#x27;</span>, <span class="string">&#x27;eihei&#x27;</span>)); <span class="comment">//[1, &quot;欸嘿&quot;, &quot;eihei&quot;]</span></span><br></pre></td></tr></table></figure><p>使用字面量创建是推荐的简单作法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">&quot;欸嘿&quot;</span>, <span class="number">123</span>];</span><br></pre></td></tr></table></figure><p>多维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [[<span class="number">123</span>], [<span class="string">&quot;欸嘿&quot;</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">1</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>！！！数组是引用类型可以使用<strong><code>const</code></strong>声明并修改它的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">&quot;欸嘿&quot;</span>, <span class="string">&quot;eihei&quot;</span>];</span><br><span class="line">array.<span class="title function_">push</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure><p>使用原型的 <code>length</code>属性可以获取数组元素数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = [<span class="string">&quot;欸嘿&quot;</span>, <span class="string">&quot;eihei&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd.<span class="property">length</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>数组可以设置任何值，下面是使用索引添加数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = [<span class="string">&quot;欸嘿&quot;</span>];</span><br><span class="line">hd[<span class="number">1</span>] = <span class="string">&quot;eihei&quot;</span>;</span><br></pre></td></tr></table></figure><p>下面直接设置 3 号数组，会将 1/2 索引的数组定义为空值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = [<span class="string">&quot;欸嘿&quot;</span>];</span><br><span class="line">hd[<span class="number">3</span>] = <span class="string">&quot;eihei&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd.<span class="property">length</span>); <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>声明多个空元素的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd);</span><br></pre></td></tr></table></figure><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h3><p>使用<code>Array.of</code> 与 <code>new Array</code> 不同的是设置一个参数时不会创建空元素数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd); <span class="comment">//[3]</span></span><br><span class="line"></span><br><span class="line">hd = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd); <span class="comment">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><p>检测变量是否为数组类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>([<span class="number">1</span>, <span class="string">&quot;欸嘿&quot;</span>, <span class="string">&quot;eihei&quot;</span>])); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="number">9</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>可以将数组转换为字符串也可以将其他类型转换为数组。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>大部分数据类型都可以使用<code>.toString()</code> 函数转换为字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).<span class="title function_">toString</span>()); <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure><p>也可以使用函数 <code>String</code> 转换为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br></pre></td></tr></table></figure><p>或使用<code>join</code>连接为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>));<span class="comment">//1-2-3</span></span><br></pre></td></tr></table></figure><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><p>使用<code>Array.from</code>可将<code>类数组转换为数组，</code>类数组指包含 <code>length</code> 属性或可迭代的对象。</p><ul><li>第一个参数为要转换的数据，第二个参数为类似于<code>map</code> 函数的回调方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str = &#x27;欸嘿&#x27;;</span><br><span class="line">console.log(Array.from(str)); //[&quot;欸&quot;, &quot;嘿&quot;]</span><br></pre></td></tr></table></figure><p>为对象设置<code>length</code>属性后也可以转换为数组，但要下标为数值或数值字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;欸嘿&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(user)); <span class="comment">//[&quot;欸嘿&quot;, 22]</span></span><br></pre></td></tr></table></figure><p>DOM 元素<strong>转换为数组后来使用数组函数</strong>，第二个参数类似于<code>map</code> 函数的方法，可对<strong>数组元素执行函数</strong>处理。</p><div class="tip warning"><p>选中的DOM节点是伪数组，因此不可以直接使用数组函数，通过Array.from()方法转换后可以使用</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">message</span>=<span class="string">&quot;欸嘿&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">message</span>=<span class="string">&quot;eihei&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(btns); <span class="comment">//包含length属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Array</span>.<span class="title function_">from</span>(btns, <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        item.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;red&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="展开语法"><a href="#展开语法" class="headerlink" title="展开语法"></a>展开语法</h2><p>使用展开语法将DOM节点列表 转换为数组操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>hdcms<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>houdunren<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  [...divs].<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">div</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hide&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>使用展示语法可以替代 <code>arguments</code> 来<strong>接收任意数量的参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hd</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hd</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;欸嘿&quot;</span>); <span class="comment">//[1, 2, 3, &quot;欸嘿&quot;]</span></span><br></pre></td></tr></table></figure><p>也可以用于<strong>接收部分参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hd</span>(<span class="params">site, ...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(site, args); <span class="comment">//欸嘿 (3) [1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hd</span>(<span class="string">&quot;欸嘿&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>解构是一种更简洁的赋值特性，可以理解为分解一个数据的结构</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组使用</span></span><br><span class="line"><span class="keyword">let</span> [name, number] = [<span class="string">&#x27;欸嘿&#x27;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);  <span class="comment">// &#x27;欸嘿&#x27;</span></span><br></pre></td></tr></table></figure><p>剩余解构指用一个变量来接收剩余参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="string">&#x27;欸嘿&#x27;</span>, <span class="string">&#x27;eihei&#x27;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);     <span class="comment">// [&#x27;eihei&#x27;, 123]</span></span><br></pre></td></tr></table></figure><p>字符串解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [...a] = <span class="string">&quot;eihei&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//Array(5)</span></span><br></pre></td></tr></table></figure><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>向数组末尾添加新元素， <strong>返回值为数组的length,</strong> <strong>原数组改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;eihei&#x27;</span>, <span class="string">&#x27;欸嘿&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">push</span>(<span class="number">123</span>)) <span class="comment">// 结果为 3 而不是 [&#x27;eihei&#x27;, &#x27;欸嘿&#x27;, 123]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">// [&#x27;eihei&#x27;, &#x27;欸嘿&#x27;, 123]</span></span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>弹出数组的末尾元素， <strong>返回值为弹出去的元素, 原数组改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;eihei&#x27;</span>, <span class="string">&#x27;欸嘿&#x27;</span>， <span class="number">123</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>()) <span class="comment">//  123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">// [&#x27;eihei&#x27;, &#x27;欸嘿&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><p>去除数组的第一个元素，<strong>返回值为去除的元素,  原数组改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;eihei&#x27;</span>, <span class="string">&#x27;欸嘿&#x27;</span>， <span class="number">123</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">shift</span>()) <span class="comment">// &#x27;eihei&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">// [&#x27;欸嘿&#x27;, 123]</span></span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><p>向数组首位添加一个新元素， <strong>返回值为数组的length, 原数组改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;欸嘿&#x27;</span>， <span class="number">123</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">shift</span>(<span class="string">&#x27;eihei&#x27;</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">// [&#x27;eihei&#x27;, &#x27;欸嘿&#x27;, 123]</span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>截取数组的部分元素，只穿一个参数时则截取到末尾， 不设置参数则截取全部，  <strong>不改变原数组</strong>，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>splice的功能比较强大，截取数组的部分元素，可以添加、删除、替换数组的元素，<strong>原数组改变</strong></p><p>第一个参数为从哪开始删除，第二个参数为删除的数量</p><p>第三个参数来设置在删除位置添加的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">//返回删除的元素 [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//删除数据后的原数组 [0, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;eihei&#x27;</span>, <span class="string">&#x27;欸嘿&#x27;</span>)); <span class="comment">//返回删除的元素 [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//删除数据后的原数组 [0, &#x27;eihei&#x27;, &#x27;欸嘿&#x27;, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="合并拆分"><a href="#合并拆分" class="headerlink" title="合并拆分"></a>合并拆分</h2><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>将数组元素连接成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>))<span class="comment">// &#x27;1-2-3&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>将字符串分割成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;1-2-3&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)) <span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="展开语法-1"><a href="#展开语法-1" class="headerlink" title="展开语法"></a>展开语法</h3><p>使用展开语法来合并数组，使用<code>...</code> 可将数组展开为多个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;欸嘿&#x27;</span>, ...a];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//[&quot;a&quot;, &quot;欸嘿&quot;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><h3 id="indexof"><a href="#indexof" class="headerlink" title="indexof"></a>indexof</h3><p>从前向后查找指定元素，找到<strong>返回该元素索引值</strong>， 找不到返回-1，第二个参数可指定位置向后查找</p><p>lastindexof从后向前查找</p><p>indexof是严格类型约束，<strong>要求元素满足全等</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">2</span>)); <span class="comment">// 2 </span></span><br></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>查找指定元素， 查到<strong>返回true</strong>，否则返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">6</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>查找到指定元素返回此元素值并中断查找， 找不到则返回<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;欸嘿&quot;</span>, <span class="string">&quot;eihei&quot;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="keyword">let</span> find = arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item == <span class="string">&quot;欸嘿&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(find); <span class="comment">//欸嘿</span></span><br></pre></td></tr></table></figure><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h3><p>查到返回索引值， 否则返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;欸嘿&quot;</span>, <span class="string">&quot;eihei&quot;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="keyword">let</span> find = arr.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item == <span class="string">&quot;欸嘿&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(find); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>反转数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reverse</span>()); <span class="comment">//[9, 2, 4, 1]</span></span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>默认从小到大排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sort</span>()); <span class="comment">//[1, 2, 4, 9]</span></span><br></pre></td></tr></table></figure><p>sort<code>每次使用两个值进行比较</code>Array.sort((a,b)=&gt;a-b</p><ul><li>返回负数 a 排在 b 前面，从小到大</li><li>返回正数 b 排在 a 前面</li><li>返回 0 时不动</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">v1, v2</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> v2 - v1;</span><br><span class="line">&#125;)); <span class="comment">//[9, 4, 2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>根据数组长度遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-in"><a href="#for-in" class="headerlink" title="for/in"></a>for/in</h3><p>key为数组的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-of"><a href="#for-of" class="headerlink" title="for/of"></a>for/of</h3><p>value为数组的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5]</span><br><span class="line">for(const value of arr) &#123;</span><br><span class="line"> console.log(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p><code>forEach</code>使函数作用在每个数组元素上，但是没有返回值。</p><p>续上：</p><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/forEach.png" alt=""></p><div class="tip "><p>forEach没有返回值， 当数组里是基本类型数据时不会改变原数组， 当数组里是引用型数据类型时，引用类型数据内的值发生改变，原因是引用类型数据指向同一个数据，forEach操作的函数改变了同一个数据， 所以数据发生改变</p><p>map()方法同理</p></div><h2 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h2><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>递归检查元素， 所有元素操作都为真才返回真</p><p>查看班级中同学的 JS 成绩是否都及格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">js</span>: <span class="number">89</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;马六&quot;</span>, <span class="attr">js</span>: <span class="number">55</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">js</span>: <span class="number">78</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> resust = user.<span class="title function_">every</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">js</span> &gt;= <span class="number">60</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resust);</span><br></pre></td></tr></table></figure><p>标题的关键词检查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> words = [<span class="string">&#x27;欸嘿&#x27;</span>, <span class="string">&#x27;eihei&#x27;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="keyword">let</span> title = <span class="string">&#x27;欸嘿Blog&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> state = words.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> title.<span class="title function_">indexOf</span>(item) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (state == <span class="literal">false</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标题必须包含所有关键词&#x27;</span>);     </span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>递归检查元素，有一个元素操作为真则返回真</p><p>标题的关键词检查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> words = [<span class="string">&#x27;欸嘿&#x27;</span>, <span class="string">&#x27;eihei&#x27;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="keyword">let</span> title = <span class="string">&#x27;欸嘿Blog&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> state = words.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> title.<span class="title function_">indexOf</span>(item) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (state == <span class="literal">false</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标题必须包含关键词&#x27;</span>);    <span class="comment">// 标题含有关键词</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>过滤数组中元素， <strong>不改变原数组</strong>， 返回新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [</span><br><span class="line">  &#123;<span class="attr">fruit</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="attr">price</span>: <span class="number">15</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">fruit</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="attr">price</span>: <span class="number">20</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">fruit</span>: <span class="string">&#x27;草莓&#x27;</span>, <span class="attr">price</span>: <span class="number">25</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> fruitPrice = fruits.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item.<span class="property">category</span> &gt;= <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruitPrice);<span class="comment">// [&#123;fruit: &#x27;香蕉&#x27;, price: 20&#125;,&#123;fruit: &#x27;草莓&#x27;, price: 25&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>使用 <code>map</code> 函数可以对数组的所有元素上应用函数，用于映射出新的值， <strong>返回一个新数组</strong></p><p>获取数组所有标题组合的新数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let lessons = [</span><br><span class="line">  &#123;title: &#x27;媒体查询响应式布局&#x27;,category: &#x27;css&#x27;&#125;,</span><br><span class="line">  &#123;title: &#x27;FLEX 弹性盒模型&#x27;,category: &#x27;css&#x27;&#125;,</span><br><span class="line">  &#123;title: &#x27;MYSQL多表查询随意操作&#x27;,category: &#x27;mysql&#x27;&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">console.log(lessons.map(item =&gt; item.title));</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>使用 <code>reduce</code> 与 <code>reduceRight</code> 函数可以迭代数组的所有元素，<code>reduce</code> 从前开始 <code>reduceRight</code> 从后面开始。下面通过函数计算课程点击数的和。</p><p>第一个参数是执行函数，第二个参数为初始值</p><ul><li>传入第二个参数时将所有元素循环一遍</li><li>不传第二个参数时从第二个元素开始循环</li></ul><p>函数参数说明如下</p><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>prev</td><td>上次调用回调函数返回的结果</td></tr><tr><td>cur</td><td>当前的元素值</td></tr><tr><td>index</td><td>当前的索引</td></tr><tr><td>array</td><td>原数组</td></tr></tbody></table></div><p>统计元素出现的次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countArrayELem</span>(<span class="params">array, elem</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, cur</span>) =&gt;</span> (total += cur == elem ? <span class="number">1</span> : <span class="number">0</span>), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countArrayELem</span>(numbers, <span class="number">1</span>)); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>取数组中的最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arrayMax</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">reduce</span>(</span><br><span class="line">  <span class="function">(<span class="params">max, elem</span>) =&gt;</span> (max &gt; elem ? max : elem), array[<span class="number">0</span>]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrayMax</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>]));</span><br></pre></td></tr></table></figure><p>取价格最高的商品</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cart = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;iphone&quot;</span>, <span class="attr">price</span>: <span class="number">12000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;imac&quot;</span>, <span class="attr">price</span>: <span class="number">25000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;ipad&quot;</span>, <span class="attr">price</span>: <span class="number">3600</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">maxPrice</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">reduce</span>(</span><br><span class="line">    <span class="function">(<span class="params">goods, elem</span>) =&gt;</span> (goods.<span class="property">price</span> &gt; elem.<span class="property">price</span> ? goods : elem),</span><br><span class="line">    array[<span class="number">0</span>]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">maxPrice</span>(cart));</span><br></pre></td></tr></table></figure><p>计算购物车中的商品总价</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cart = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;iphone&quot;</span>, <span class="attr">price</span>: <span class="number">12000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;imac&quot;</span>, <span class="attr">price</span>: <span class="number">25000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;ipad&quot;</span>, <span class="attr">price</span>: <span class="number">3600</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> total = cart.<span class="title function_">reduce</span>(</span><br><span class="line"><span class="function">(<span class="params">total, goods</span>) =&gt;</span> total += goods.<span class="property">price</span>, <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total); <span class="comment">//40600</span></span><br></pre></td></tr></table></figure><p>获取价格超过 1 万的商品名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> goods = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;iphone&quot;</span>, <span class="attr">price</span>: <span class="number">12000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;imac&quot;</span>, <span class="attr">price</span>: <span class="number">25000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;ipad&quot;</span>, <span class="attr">price</span>: <span class="number">3600</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNameByPrice</span>(<span class="params">array, price</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">goods, elem</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elem.<span class="property">price</span> &gt; price) &#123;</span><br><span class="line">      goods.<span class="title function_">push</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> goods;</span><br><span class="line">  &#125;, []).<span class="title function_">map</span>(<span class="function"><span class="params">elem</span> =&gt;</span> elem.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(<span class="title function_">getNameByPrice</span>(goods, <span class="number">10000</span>));</span><br></pre></td></tr></table></figure><p>使用 <code>reduce</code> 实现数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> filterArr = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (pre.<span class="title function_">includes</span>(cur) === <span class="literal">false</span>) &#123;</span><br><span class="line">      pre = [...pre, cur];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pre;</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterArr); <span class="comment">// [1,2,6]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;传值与传址&quot;&gt;&lt;a href=&quot;#传值与传址&quot; class=&quot;headerlink&quot; title=&quot;传值与传址&quot;&gt;&lt;/a&gt;传值与传址&lt;/h1&gt;&lt;p&gt;JavaScript中有两种不同数据类型的值，分别是基本数据类型与引用数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;stro</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://omygan.github.io/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="http://omygan.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>计算属性&amp;侦听属性</title>
    <link href="http://omygan.github.io/posts/d0a69f1e.html"/>
    <id>http://omygan.github.io/posts/d0a69f1e.html</id>
    <published>2022-11-20T13:33:44.000Z</published>
    <updated>2022-11-21T07:37:04.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Computed计算属性"><a href="#Computed计算属性" class="headerlink" title="Computed计算属性"></a>Computed计算属性</h1><ul><li>定义：使用的属性不存在（属性不在data中），要通过已有属性计算得到，若依赖的属性变动则计算属性也随之变动</li><li>原理：底层使用了 <code>Object.defineProperty()</code> 提供的 getter 和 setter方法</li><li>getter 何时执行：<ul><li>初次读取时执行一次</li><li>依赖的数据发生改变时执行</li></ul></li><li>优点：与 <code>methods</code> 相比，有缓存机制，效率更高</li><li>若计算属性要修改，必须声明 ==setter 响应==修改，且 setter 中要引起==依赖的数据==发生==改变==</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">测试：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;x&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line"><span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span><br><span class="line"><span class="attr">x</span>:<span class="string">&#x27;你好&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"><span class="attr">fullName</span>:&#123;</span><br><span class="line"><span class="comment">//get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span><br><span class="line"><span class="comment">//get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(this) //此处的this是vm</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>,value)</span><br><span class="line"><span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>]</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip sync"><p>那么set什么时候调用? </p><p>当fullName被<span class='p red'>直接修改</span>时。在此处set无法被调用，因为fullname是通过get方法下面的依赖属性间接修改的</p></div><p><strong>计算属性的简写</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Watch侦听属性"><a href="#Watch侦听属性" class="headerlink" title="Watch侦听属性"></a>Watch侦听属性</h1><p><code>watch</code> 侦听器允许开发者监视数据的变化，针对数据的变化做特定的操作。</p><div class="tip "><p>侦听器可以监听普通属性和计算属性</p><p>​    <code>computed</code> 能完成的功能，<code>watch</code> 也能</p><p>​    <code>watch</code> 能完成的功能，<code>computed</code> 不一定，如异步操作</p><p>​    <em>当被监视的属性变化时, 回调函数自动调用, 进行相关操作</em></p><p>​    <em>监视的属性必须存在（必须在data中），才能进行监视！！</em></p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watch 简写形式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">username</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新值: &#x27;</span>, newVal)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;旧值: &#x27;</span>, oldVal)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，组件在初次加载完毕后不会调用 <code>watch</code> 侦听器。如果想让 <code>watch</code> 侦听器立即被调用，需要使用 <code>immediate</code> 选项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="comment">// 对象形式的侦听器</span></span><br><span class="line">  <span class="attr">username</span>: &#123;</span><br><span class="line">    <span class="comment">// handler 属性是固定写法</span></span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>watch</code> 侦听的是一个对象，如果对象中的属性值发生了变化，则无法被监听到。此时需要使用 <code>deep</code> 选项进行<strong>深度监听</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">info</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若只想监听对象里单个属性的变化，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">info</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// 记得加引号</span></span><br><span class="line">    <span class="string">&#x27;info.username&#x27;</span>: &#123;</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 Vue 实例的 <code>$watch</code> 监听：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;...&#125;)</span><br><span class="line"></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,<span class="keyword">function</span>(<span class="params">newValue,oldValue</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="姓名案例Watch实现"><a href="#姓名案例Watch实现" class="headerlink" title="姓名案例Watch实现"></a>姓名案例Watch实现</h1><div class="tip warning"><p><em>两个重要的小原则：</em></p><p>​    1. <em>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</em></p><p>​    2.  <em>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象。</em></p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line"><span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span><br><span class="line"><span class="attr">fullName</span>:<span class="string">&#x27;张-三&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line"><span class="title function_">firstName</span>(<span class="params">val</span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">lastName</span>(<span class="params">val</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>==结论==：不如Computed属性方便， 但实现了异步操作</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Computed计算属性&quot;&gt;&lt;a href=&quot;#Computed计算属性&quot; class=&quot;headerlink&quot; title=&quot;Computed计算属性&quot;&gt;&lt;/a&gt;Computed计算属性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义：使用的属性不存在（属性不在data中），要</summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
