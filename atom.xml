<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欸嘿/Blog</title>
  
  <subtitle>Fighting !!!</subtitle>
  <link href="http://omygan.github.io/atom.xml" rel="self"/>
  
  <link href="http://omygan.github.io/"/>
  <updated>2022-11-21T15:33:48.953Z</updated>
  <id>http://omygan.github.io/</id>
  
  <author>
    <name>欸嘿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vuex状态管理</title>
    <link href="http://omygan.github.io/posts/5c4a3e27.html"/>
    <id>http://omygan.github.io/posts/5c4a3e27.html</id>
    <published>2022-11-21T12:34:56.000Z</published>
    <updated>2022-11-21T15:33:48.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p><a href="https://vuex.vuejs.org/zh/">Vuex官方文档</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Vuex是什么？</p><p>Vuex 专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 Vue 应用中多个组件的共享状态进行集中式的管理，也是一种组件间通信的方式，适用于任意组件间通信</p><p>何时用 Vuex ？</p><ul><li>多个组件依赖于同一状态</li><li>来自不同组件的行为需要变更同一状态</li></ul><p>Vuex 工作原理图：</p><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/vuex.6007da7c.png" alt=""></p><p>官方Vuex项目结构示例</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── api</span><br><span class="line">│   └── ... <span class="params">#</span> 抽取出API请求</span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          <span class="params">#</span> 组装模块并导出 store 的地方</span><br><span class="line">    ├── actions.js        <span class="params">#</span> 根级别的 action</span><br><span class="line">    ├── mutations.js      <span class="params">#</span> 根级别的 mutation</span><br><span class="line">    └── modules</span><br><span class="line">        ├── cart.js       <span class="params">#</span> 购物车模块</span><br><span class="line">        └── products.js   <span class="params">#</span> 产品模块</span><br></pre></td></tr></table></figure><h2 id="Vuex核心概念"><a href="#Vuex核心概念" class="headerlink" title="Vuex核心概念"></a>Vuex核心概念</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><ul><li>Vuex 管理的状态对象</li><li>唯一的</li></ul><p><strong>在组件中通过<code>this.$store.state.xxx</code> 获取 state 里xxx的数据</strong></p><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><ul><li>值为一个对象，包含多个响应用户动作的回调函数</li><li>可包含异步代码（使用计时器）</li><li>一般在开发过程中可以跳过actions，直接调用mutations中的方法对state中的数据更新</li></ul><p><strong>在组件中通过<code>this.$store.dispatch(&#39;actions函数名&#39;, 参数)</code>触发actions中函数的调用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;jiaWait&#x27;</span>,<span class="variable language_">this</span>.<span class="property">xxx</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在actions对象中通过 <code>context.commit(&#39;mution函数名&#39;，参数)</code>触发 mutation 中函数的调用，<span class='p red'>间接更新 state</span>contex代表上下文对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line"><span class="title function_">jiaWait</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions中的jiaWait被调用了&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><ul><li>值为一个对象，包含多个直接更新 state 的方法</li><li>不能写异步代码，只能单纯地操作 state</li></ul><p><strong>在组件中通过this.$store.commit(‘mutations中的方法’，‘参数‘)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,<span class="variable language_">this</span>.<span class="property">xxx</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在store中</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//准备mutations——用于操作数据（state）</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations中的JIA被调用了&#x27;</span>)</span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><ul><li>值为一个对象，包含多个用于返回数据的函数</li><li>类似于计算属性，getters 返回的数据依赖于 state 的数据</li><li>它不是必须的，当加工逻辑复杂且需要复用时，可以考虑使用</li></ul><p><strong>在组件中<code>this.$store.getters.xxx</code> 获取 state 里xxx加工修改后的数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"><span class="title function_">getJGScore</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//获取vuex中 getters的计算属性值</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">jigeScore</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//---------------------</span></span><br><span class="line"><span class="comment">//getters中带有赋值操作  建议写成常规形态.不使用辅助函数</span></span><br><span class="line"><span class="title function_">veryGood</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="title function_">scoreGrand</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">liangHao</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="title function_">scoreGrand</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">jiGe</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="title function_">scoreGrand</span>(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">pass</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="title function_">scoreGrand</span>(<span class="string">&quot;P&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在store中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="comment">// 获取&gt;70分  及格</span></span><br><span class="line">  <span class="attr">jigeScore</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">stuScore</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> obj.<span class="property">score</span> &gt;= <span class="number">70</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//根据用户需求 获取对应的数据</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  评级</span></span><br><span class="line"><span class="comment">  100-90  优秀        &quot;A&quot;</span></span><br><span class="line"><span class="comment">  90-80  良好         &quot;B&quot;</span></span><br><span class="line"><span class="comment">  80-70 及格         &quot;C&quot;</span></span><br><span class="line"><span class="comment">  70分以下  凉凉       &quot;D&quot;</span></span><br><span class="line"><span class="comment">  所有及格的人  通过pass  &quot;P&quot;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">//在设置setter赋值</span></span><br><span class="line">  <span class="attr">scoreGrand</span>: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> <span class="function">(<span class="params">grand</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (grand) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">stuScore</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> obj.<span class="property">score</span> &gt;= <span class="number">90</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">stuScore</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> obj.<span class="property">score</span> &lt; <span class="number">90</span> &amp;&amp; obj.<span class="property">score</span> &gt;= <span class="number">80</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">stuScore</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> obj.<span class="property">score</span> &gt;= <span class="number">70</span> &amp;&amp; obj.<span class="property">score</span> &lt; <span class="number">80</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;D&quot;</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">stuScore</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> obj.<span class="property">score</span> &lt; <span class="number">70</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;P&quot;</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> getters.<span class="property">jigeScore</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attr">default</span>: &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><ul><li>一个 module 是一个 store 的配置对象，与一个组件对应</li></ul><p><strong>store中引入modules模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line"><span class="attr">modules</span>:&#123;</span><br><span class="line"><span class="attr">countAbout</span>:countOptions,</span><br><span class="line"><span class="attr">personAbout</span>:personOptions</span><br><span class="line"><span class="comment">// 重命名</span></span><br><span class="line">    <span class="attr">p</span>: product,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在组件中使用<strong>this.$store.state.countAbout.count</strong>获取 countAbout 模组的 state 对象中的 count数据</p><p>在组件中使用<strong>this.$store.commit(“p/changeCount”)</strong>调用 p 模组的 mutations 中的 changeCount方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state 辅助函数</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&quot;cartmodule&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">getList</span>: <span class="string">&quot;cartList&quot;</span>,</span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// getters 辅助函数</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&quot;p&quot;</span>, [<span class="string">&quot;getProList&quot;</span>]),</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations辅助函数写法</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&quot;cartmodule&quot;</span>, [<span class="string">&quot;changeCount1&quot;</span>]),</span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&quot;p&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">ccc</span>: <span class="string">&quot;changeCount&quot;</span>,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><div class="tip info"><p>下文会提到辅助函数的用法</p></div><h2 id="四个mapXXX方法"><a href="#四个mapXXX方法" class="headerlink" title="四个mapXXX方法"></a>四个mapXXX方法</h2><h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState()"></a>mapState()</h3><ul><li>将 <code>state</code> 状态映射为计算属性</li><li>对象写法：键为自取的计算属性名，值为对应的状态（必须为字符串）</li><li>数组写法：当键值同名，可直接写状态名（字符串）</li><li>函数返回一个对象：<code>&#123;sum: f, price: f&#125;</code></li><li>注意对象的 <code>...&#123;&#125;</code> 展开写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="comment">// 手动写法</span></span><br><span class="line">  <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">sum</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">price</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">price</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象写法</span></span><br><span class="line">  ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>: <span class="string">&#x27;sum&#x27;</span>, <span class="attr">price</span>: <span class="string">&#x27;price&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数组写法</span></span><br><span class="line">  ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;price&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters()"></a>mapGetters()</h3><ul><li>将 <code>getters</code> 的数据映射为计算属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">bigSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">bigSum</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">double</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">double</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象写法</span></span><br><span class="line">  ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>: <span class="string">&#x27;bigSum&#x27;</span>, <span class="attr">double</span>: <span class="string">&#x27;double&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数组写法</span></span><br><span class="line">  ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>, <span class="string">&#x27;double&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions()"></a>mapActions()</h3><ul><li>生成与 <code>actions</code> 对话的函数，即包含 <code>$store.dispatch()</code></li><li><code>mapActions</code> 生成的函数不会传入参数，需要在调用时手动传入数据，不传参默认传入 <code>$event</code></li><li>数组写法要注意函数名和 <code>actions</code> 动作类型同名，调用时勿写错</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 手动写法</span></span><br><span class="line">  <span class="title function_">incrementOdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addOdd&#x27;</span>, <span class="variable language_">this</span>.<span class="property">number</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">incrementAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addAsync&#x27;</span>, <span class="variable language_">this</span>.<span class="property">number</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 辅助函数 对象写法</span></span><br><span class="line">  ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>: <span class="string">&#x27;addOdd&#x27;</span>, <span class="attr">incrementAsync</span>: <span class="string">&#x27;addAsync&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 辅助函数 数组写法</span></span><br><span class="line">  ...<span class="title function_">mapActions</span>([<span class="string">&#x27;even&#x27;</span>]),</span><br><span class="line">      </span><br><span class="line">  <span class="comment">// 在以下函数中依次调用 actions的 addOdd addAsync方法</span></span><br><span class="line"><span class="title function_">addToCart</span>(<span class="params">number</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">even</span>(&#123;number&#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">incrementOdd</span>(&#123;price&#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">incrementAsync</span>(&#123;price&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h3><ul><li>生成与 <code>mutations</code> 对话的函数，即包含 <code>$store.commit()</code></li><li>同样注意传递参数，以及数组形式函数名的问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="comment">// 辅助函数 对象写法</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>: <span class="string">&#x27;ADD&#x27;</span>, <span class="attr">decrement</span>: <span class="string">&#x27;SUB&#x27;</span>&#125;),</span><br><span class="line"><span class="comment">// 辅助函数 数组写法</span></span><br><span class="line">...<span class="title function_">mapMutations</span>([<span class="string">&#x27;ADD_CART&#x27;</span>]),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在以下函数中依次调用 mutations的 ADD SUB ADD_CART方法</span></span><br><span class="line"><span class="title function_">addToCart</span>(<span class="params">name, price, specs</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">ADD_CART</span>(&#123;name, price, specs&#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">increment</span>(&#123;price&#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">decrement</span>(&#123;price&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vuex&quot;&gt;&lt;a href=&quot;#Vuex&quot; class=&quot;headerlink&quot; title=&quot;Vuex&quot;&gt;&lt;/a&gt;Vuex&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://vuex.vuejs.org/zh/&quot;&gt;Vuex官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>React入门</title>
    <link href="http://omygan.github.io/posts/74c45c76.html"/>
    <id>http://omygan.github.io/posts/74c45c76.html</id>
    <published>2022-11-21T06:55:24.000Z</published>
    <updated>2022-11-21T08:35:30.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React入门"><a href="#React入门" class="headerlink" title="React入门"></a>React入门</h1><p><a href="https://zh-hans.reactjs.org/">react官网</a></p><h2 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h2><h3 id="React-为何物"><a href="#React-为何物" class="headerlink" title="React 为何物"></a>React 为何物</h3><p>React：用于构建用户界面的 JavaScript 库。由 <code>Facebook</code> 开发且开源。</p><h3 id="为何学习-React"><a href="#为何学习-React" class="headerlink" title="为何学习 React"></a>为何学习 React</h3><p>原生 JavaScript 的痛点：</p><ul><li>操作 DOM 繁琐、效率低</li><li>使用 JavaScript 直接操作 DOM，浏览器进行大量重绘重排</li><li>原生 JavaScript 没有组件化编码方案，代码复用率低</li></ul><p>React 的特点：</p><ul><li>采用组件化模式、声明式编码，提高开发效率和组件复用率</li><li>在 <code>React Native</code> 中可用 React 语法进行移动端开发</li><li>使用虚拟 DOM 和 Diffing 算法，减少与真实 DOM 的交互</li></ul><h2 id="React-初体验"><a href="#React-初体验" class="headerlink" title="React 初体验"></a>React 初体验</h2><h3 id="Hello-React"><a href="#Hello-React" class="headerlink" title="Hello React"></a>Hello React</h3><p>相关 JS 库：</p><ul><li><code>react.development.js</code> ：React 核心库</li><li><code>react-dom.development.js</code> ：提供 DOM 操作的 React 扩展库</li><li><code>babel.min.js</code> ：解析 JSX 语法，转换为 JS 代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 此处一定要写babel，表示写的不是 JS，而是 JSX，并且靠 babel 翻译 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 不要写引号，因为不是字符串</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 导入核心库和扩展库后，会有 React 和 ReactDOM 两个对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建虚拟-DOM-的两种方式：JS-和-JSX"><a href="#创建虚拟-DOM-的两种方式：JS-和-JSX" class="headerlink" title="创建虚拟 DOM 的两种方式：JS 和 JSX"></a>创建虚拟 DOM 的两种方式：JS 和 JSX</h3><ul><li>使用 JS 创建虚拟 DOM 比 JSX 繁琐</li><li>JSX 可以让程序员更加简单地创建虚拟 DOM，相当于语法糖</li><li>最终 babel 会把 JSX 语法转换为 JS</li></ul><h3 id="创建虚拟-DOM-的两种方式：JS-和-JSX-1"><a href="#创建虚拟-DOM-的两种方式：JS-和-JSX-1" class="headerlink" title="创建虚拟 DOM 的两种方式：JS 和 JSX"></a>创建虚拟 DOM 的两种方式：JS 和 JSX</h3><ul><li>使用 JS 创建虚拟 DOM 比 JSX 繁琐</li><li>JSX 可以让程序员更加简单地创建虚拟 DOM，相当于语法糖</li><li>最终 babel 会把 JSX 语法转换为 JS</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1.使用 React 提供的 API 创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, &#123; <span class="attr">id</span>: <span class="string">&#x27;title&#x27;</span> &#125;, <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;Hello,React&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="虚拟-DOM-amp-amp-真实-DOM"><a href="#虚拟-DOM-amp-amp-真实-DOM" class="headerlink" title="虚拟 DOM &amp;&amp; 真实 DOM"></a>虚拟 DOM &amp;&amp; 真实 DOM</h3><p>关于虚拟 DOM：</p><ol><li>本质是 Object 类型的对象（一般对象）</li><li>虚拟 DOM 比较“轻”，真实 DOM 比较“重”，因为虚拟 DOM 是 React 内部在用，无需真实 DOM 上那么多的属性。</li><li>虚拟 DOM 最终会被 React 转化为真实 DOM，呈现在页面上。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="variable constant_">TDOM</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;demo&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;虚拟DOM&#x27;</span>, <span class="variable constant_">VDOM</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;真实DOM&#x27;</span>, <span class="variable constant_">TDOM</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><h3 id="JSX-简介"><a href="#JSX-简介" class="headerlink" title="JSX 简介"></a>JSX 简介</h3><ul><li>全称：JavaScript XML</li><li>React 定义的类似于 XML 的 JS 扩展语法；本质是 <code>React.createElement()</code> 方法的语法糖</li><li>作用：简化创建虚拟 DOM</li></ul><h3 id="JSX-语法规则"><a href="#JSX-语法规则" class="headerlink" title="JSX 语法规则"></a>JSX 语法规则</h3><ul><li>定义虚拟 DOM 时，不要写引号</li><li>标签中混入 JS 表达式需要使用 <code>&#123;&#125;</code></li><li>指定类名不用 <code>class</code>，使用 <code>className</code></li><li>内联样式，使用 <code>style=&#123; &#123; key: value &#125; &#125;</code> 的形式</li><li>只能有一个根标签</li><li>标签必须闭合，单标签结尾必须添加 <code>/</code>：<code>&lt;input type=&quot;text&quot; /&gt;</code></li><li>标签首字母小写，则把标签转换为 HTML 对应的标签，若没有，则报错</li><li>标签首字母大写，则渲染对应组件，若没有定义组件，则报错</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsx语法规则<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> myId = <span class="string">&#x27;aTgUiGu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> myData = <span class="string">&#x27;HeLlo,rEaCt&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&#123;myId.toLowerCase()&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">white</span>&#x27;, <span class="attr">fontSize:</span> &#x27;<span class="attr">19px</span>&#x27; &#125;&#125;&gt;</span>&#123;myData.toLowerCase()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          // <span class="tag">&lt;<span class="name">good</span>&gt;</span>very good<span class="tag">&lt;/<span class="name">good</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          // <span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSX-例子"><a href="#JSX-例子" class="headerlink" title="JSX 例子"></a>JSX 例子</h3><p>注意区分：<strong>JS 语句(代码)</strong> 与 <strong>JS 表达式</strong>：</p><ol><li>表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">a + b</span><br><span class="line"><span class="title function_">demo</span>(<span class="number">1</span>)</span><br><span class="line">arr.<span class="title function_">map</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>语句(代码)：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">for</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">switch</span>()&#123;<span class="attr">case</span>:xxxx&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> list = [<span class="string">&#x27;Angular&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>] <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端js框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      // React 会自动遍历数组</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      &#123;list.map((item, index) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        // Each child in a list should have a unique &quot;key&quot; prop.</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      &#125;)&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  ) <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;React入门&quot;&gt;&lt;a href=&quot;#React入门&quot; class=&quot;headerlink&quot; title=&quot;React入门&quot;&gt;&lt;/a&gt;React入门&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zh-hans.reactjs.org/&quot;&gt;react官网&lt;/a&gt;</summary>
      
    
    
    
    <category term="React" scheme="http://omygan.github.io/categories/React/"/>
    
    
    <category term="react" scheme="http://omygan.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Vue生命周期</title>
    <link href="http://omygan.github.io/posts/83f13096.html"/>
    <id>http://omygan.github.io/posts/83f13096.html</id>
    <published>2022-11-21T06:54:23.000Z</published>
    <updated>2022-11-21T08:40:20.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h1><p>vue 生命周期是指一个组件从创建、运行、销毁的整个过程。每个阶段对应着不同的生命周期钩子。</p><p>生命周期钩子也可理解为：Vue 在特定的时刻调用特定的函数。</p><p>除了图中 8 个钩子，还有 <code>nextTick</code>，<code>activated</code>，<code>deactivated</code></p><p>关于销毁过程：</p><ul><li>销毁后借助 Vue 开发者工具看不到任何信息。</li><li>销毁后自定义事件会失效，但原生 DOM 事件依然有效。</li><li>一般不在 <code>beforeDestroy</code> 操作数据，因为即便操作数据，也不会再触发更新流程</li></ul><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/lifecycle2.6eba8c66.png" alt=""></p><p><img src="https://brucecai55520.gitee.io/bruceblog/assets/img/lifecycle.e6900649.png" alt=""></p><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">updated</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destroyed&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>vue 提供了内置的 <code>&lt;component&gt;</code> 组件用于动态切换组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 is 属性指定要渲染的组件，传递的是字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName = &#x27;Left&#x27;&quot;</span>&gt;</span>展示Left组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName = &#x27;Right&#x27;&quot;</span>&gt;</span>展示Right组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>默认情况下，切换动态组件时无法保持组件的状态。此时可以使用 vue 内置的 <code>&lt;keep-alive&gt;</code> 组件保持动态组件的状态，对被包裹的组件进行状态缓存。</p><p>被 <code>&lt;keep-alive&gt;</code> 包裹的组件会<span class='p red'>多出两个生命周期函数：</span>当组件被激活时，触发 <code>activated</code> 钩子；当组件被缓存时，触发 <code>deactivated</code> 钩子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;keep-alive&gt;</code> 的 <code>include</code> 和 <code>exclude</code> 属性，分别用于指明哪些组件要缓存、哪些组件不要缓存。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;Left, Right&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;News&#x27;, &#x27;Message&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>eg： 可以处理New组件缓存时,清除计时器功能, 提高性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">activated</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;News组件被激活了&#x27;</span>)</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span></span><br><span class="line"> &#125;,<span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;News组件失活了&#x27;</span>)</span><br><span class="line"> <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h2><ul><li><p>语法：<code>this.$nextTick(回调函数)</code></p></li><li><p>作用：在下一次 DOM 更新结束后执行其指定的回调</p></li><li><p>什么时候用：当改变数据后，要基于更新后的 DOM 进行操作时，要在 <code>nextTick</code> 指定的回调函数中执行</p></li><li><p>组件的 <code>$nextTick(cb)</code> 方法，会把 cb 回调推迟到下一个 DOM 更新周期之后执行，即在 DOM 更新完成后再执行回调，从而保证 cb 回调可以获取最新的 DOM 元素</p><p>  使用$nextTick实现自动获取输入框焦点功能（优化性能）</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编辑</span></span><br><span class="line"><span class="title function_">handleEdit</span>(<span class="params">todo</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(todo.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;isEdit&#x27;</span>))&#123;</span><br><span class="line">todo.<span class="property">isEdit</span> = <span class="literal">true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;@&#x27;)</span></span><br><span class="line"><span class="variable language_">this</span>.$set(todo,<span class="string">&#x27;isEdit&#x27;</span>,<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inputTitle</span>.<span class="title function_">focus</span>()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><div class="tip "><p>Vue处理函数为了防止重复解析模板会在所有代码执行完毕后再重新解析模板，如果代码块内部要操作dom节点，就可能会导致找不到节点，所需功能无法实现，如果在代码块中添加延时计时器，可以实现需求但应尽量避免这种操作，使用$nextTick()方法，vue检测到此方法后会在dom更新完毕后执行此方法的回调函数（cb）操作dom</p></div><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=90&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=32186d356bd8f698fa879ff1f5d9fcb9">$nextTick详细讲解</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue生命周期&quot;&gt;&lt;a href=&quot;#Vue生命周期&quot; class=&quot;headerlink&quot; title=&quot;Vue生命周期&quot;&gt;&lt;/a&gt;Vue生命周期&lt;/h1&gt;&lt;p&gt;vue 生命周期是指一个组件从创建、运行、销毁的整个过程。每个阶段对应着不同的生命周期钩子。&lt;/p&gt;</summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Object对象</title>
    <link href="http://omygan.github.io/posts/8892ccdc.html"/>
    <id>http://omygan.github.io/posts/8892ccdc.html</id>
    <published>2022-11-20T18:37:26.000Z</published>
    <updated>2022-11-21T07:44:03.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><strong>对象是一种复杂的数据类型,  是一种无序的数据类型，它是多个属性(数据)和方法(功能)的集合，它允许动态的添加和删除属性</strong></p><h2 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h2><p>javascript中的对象可以分为三大类，分别是内部对象、宿主对象和自定义对象。</p><ol><li><p>内部对象</p><ul><li>Object、Function、Array、String、Boolean、Number、Date、RegExp</li></ul></li><li><p>宿主对象 </p><ul><li>主要由浏览器提供的对象，比如：BOM、DOM</li></ul></li><li><p>自定义对象</p><ul><li>开发人员自定义的对象</li></ul></li></ol><h2 id="计算商店水果的平均价格"><a href="#计算商店水果的平均价格" class="headerlink" title="计算商店水果的平均价格"></a>计算商店水果的平均价格</h2><h3 id="面向过程编程"><a href="#面向过程编程" class="headerlink" title="面向过程编程"></a>面向过程编程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Shop</span> = <span class="string">&quot;商店&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> commodity = [</span><br><span class="line">  &#123; <span class="attr">fruit</span>: <span class="string">&quot;苹果&quot;</span>, <span class="attr">price</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">fruit</span>: <span class="string">&quot;香蕉&quot;</span>, <span class="attr">price</span>: <span class="number">11</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">average</span>(<span class="params">commodity, Shop</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> total = commodity.<span class="title function_">reduce</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> v + i.<span class="property">price</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Shop</span> + <span class="string">&quot;:&quot;</span> + total / commodity.<span class="property">length</span> + <span class="string">&quot;元&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">average</span>(price, <span class="title class_">Shop</span>));</span><br></pre></td></tr></table></figure><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p>使用对象编程的代码结构清晰，也减少了函数的参数传递，也不用担心函数名的覆盖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Shop</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;后盾人&quot;</span>,</span><br><span class="line">  <span class="attr">commodity</span>: [</span><br><span class="line">    &#123; <span class="attr">fruit</span>: <span class="string">&quot;苹果&quot;</span>, <span class="attr">price</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">fruit</span>: <span class="string">&quot;香蕉&quot;</span>, <span class="attr">price</span>: <span class="number">11</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="title function_">average</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> total = commodity.<span class="title function_">reduce</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> v + i.<span class="property">price</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Shop</span> + <span class="string">&quot;:&quot;</span> + total / commodity.<span class="property">length</span> + <span class="string">&quot;元&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="title function_">average</span>());</span><br></pre></td></tr></table></figure><h2 id="基本声明"><a href="#基本声明" class="headerlink" title="基本声明"></a>基本声明</h2><p>字面量声明对象， 方便快捷</p><p>字面量形式在系统内部也是使用构造函数 <code>new Object</code>创建的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;欸嘿&#x27;</span>,</span><br><span class="line">  <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">get</span>()); <span class="comment">//欸嘿</span></span><br></pre></td></tr></table></figure><p>属性与方法简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;欸嘿&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name,</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">get</span>()); <span class="comment">//欸嘿</span></span><br></pre></td></tr></table></figure><h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><p>点语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>使用<code>[]</code> 获取：这种方法不常用， 但在特殊场景必须使用此方法拿到数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> property = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user[property]);</span><br></pre></td></tr></table></figure><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><p>定义在对象中的<code>函数</code></p><p>计算学生平均成绩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lisi = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">grade</span>: &#123;</span><br><span class="line">    <span class="attr">math</span>: <span class="number">99</span>,</span><br><span class="line">    <span class="attr">english</span>: <span class="number">67</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//平均成绩</span></span><br><span class="line">  <span class="attr">avgGrade</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">grade</span>) &#123;</span><br><span class="line">      total += <span class="variable language_">this</span>.<span class="property">grade</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total / <span class="variable language_">this</span>.<span class="title function_">propertyCount</span>(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//获取属性数量</span></span><br><span class="line">  <span class="attr">propertyCount</span>: <span class="keyword">function</span>(<span class="params">property</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>[property]) count++;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lisi.<span class="title function_">avgGrade</span>());</span><br></pre></td></tr></table></figure><div class="tip "><p>一个学生需要手动创建一个对象，这显然不实际的，下面的构造函数就可以解决这个问题</p></div><h2 id="引用特性"><a href="#引用特性" class="headerlink" title="引用特性"></a>引用特性</h2><p>对象和函数、数组一样是<span class='p red'>引用类型</span>，即复制只会复制引用地址 ，是<span class='p red'>浅拷贝</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1;</span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&quot;eihei&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd.<span class="property">name</span>); <span class="comment">//eihei</span></span><br></pre></td></tr></table></figure><p>对象做为函数参数使用时也不会产生完全赋值，内外共用一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">age</span>: <span class="number">22</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hd</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  user.<span class="property">age</span> += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hd</span>(user);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">age</span>); <span class="comment">//32</span></span><br></pre></td></tr></table></figure><p>内存地址的比较所以使用 <code>==</code> 或 <code>===</code> 一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> xj = hd;</span><br><span class="line"><span class="keyword">let</span> cms = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd == xj); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd === xj); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd === cms); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p><code>this</code> 指当前对象的引用，始终建议在代码内部使用<code>this</code> 而不要使用对象名，不同对象的 this 只指向当前对象。</p><p>下例是不使用 <code>this</code> 时发生的错误场景</p><ul><li>删除了<code>eihie</code> 变量，但在函数体内还在使用<code>eihei</code>变量造成错误</li><li>使用 <code>this</code> 后始终指向到引用地址，就不会有这个问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eihie = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;向军&quot;</span>,</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> eihei.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = eihei;</span><br><span class="line">eihei = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">show</span>()); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p>改用<code>this</code> 后一切正常</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eihei = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>,</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = xj;</span><br><span class="line">eihei = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">show</span>()); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><h2 id="展开语法"><a href="#展开语法" class="headerlink" title="展开语法"></a>展开语法</h2><p>使用<code>...</code>可以展示对象的结构，下面是实现对象合并的示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eihei = &#123; <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>, <span class="attr">web</span>: <span class="string">&quot;baidu.com&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> info = &#123; ...hd, <span class="attr">site</span>: <span class="string">&quot;zz&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>解构是一种更简洁的赋值特性，可以理解为分解一个数据的结构</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象使用</span></span><br><span class="line"><span class="keyword">let</span> info = &#123;<span class="attr">name</span>:<span class="string">&#x27;欸嘿&#x27;</span>,<span class="attr">url</span>:<span class="string">&#x27;baidu.com&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>:n,<span class="attr">url</span>:u&#125; = info</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">// 欸嘿</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果属性名与变量相同可以省略属性定义</span></span><br><span class="line"><span class="keyword">let</span> &#123;name,url&#125; = &#123;<span class="attr">name</span>:<span class="string">&#x27;欸嘿&#x27;</span>,<span class="attr">url</span>:<span class="string">&#x27;baidu.com&#x27;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 欸嘿</span></span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hd</span>(<span class="params">&#123; name, age &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age); <span class="comment">//欸嘿 22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hd</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="变量赋值对象属性"><a href="#变量赋值对象属性" class="headerlink" title="变量赋值对象属性"></a>变量赋值对象属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;欸嘿&quot;</span>,url = <span class="string">&quot;baidu.com&quot;</span>;</span><br><span class="line"><span class="comment">//标准写法如下</span></span><br><span class="line"><span class="keyword">let</span> eihei = &#123; <span class="attr">name</span>: name, <span class="attr">url</span>: url &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eihei);  <span class="comment">//&#123;name: &quot;欸嘿 &quot;, url: &quot;baidu.com&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果属性和值变量同名可以写成以下简写形式</span></span><br><span class="line"><span class="keyword">let</span> opt = &#123; name, url &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(opt); <span class="comment">//&#123;name: &quot;欸嘿&quot;, url: &quot;baidu.com&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="只赋值部分变量"><a href="#只赋值部分变量" class="headerlink" title="只赋值部分变量"></a>只赋值部分变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [,url]=[<span class="string">&#x27;欸嘿&#x27;</span>,<span class="string">&#x27;baidu.com&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url);<span class="comment">//hbaidu.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name&#125;= &#123;<span class="attr">name</span>:<span class="string">&#x27;欸嘿&#x27;</span>,<span class="attr">url</span>:<span class="string">&#x27;baidu.com&#x27;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//欸嘿</span></span><br></pre></td></tr></table></figure><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><h3 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eihei = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(eihei)); <span class="comment">//[&quot;name&quot;, &quot;age&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(eihei)); <span class="comment">//[&quot;欸嘿&quot;, 22]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(eihei)); <span class="comment">//[[&quot;name&quot;,&quot;欸嘿&quot;],[&quot;age&quot;,22]]</span></span><br></pre></td></tr></table></figure><h3 id="for-in"><a href="#for-in" class="headerlink" title="for/in"></a>for/in</h3><p>使用<code>for/in</code>遍历对象属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eihei = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> eihie) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, hd[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-of"><a href="#for-of" class="headerlink" title="for/of"></a>for/of</h3><p><code>for/of</code>用于遍历迭代对象，不能直接操作对象。但<code>Object</code>对象的<code>keys</code>方法返回的是可迭代对象。</p><p>获取所有对象属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hd = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(eihei)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象拷贝"><a href="#对象拷贝" class="headerlink" title="对象拷贝"></a>对象拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><div class="tip warning"><p>浅拷贝是拷贝数据的地址，地址保存在栈中，地址指向保存在堆中的真实数据</p></div><p>对象赋值时复制的是<span class='p red'>内存地址</span>，所以一个对象的改变直接影响另一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;欸嘿&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;eihei&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = obj;</span><br><span class="line"><span class="keyword">let</span> b = obj;</span><br><span class="line">a.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>); <span class="comment">//lisi</span></span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><div class="tip warning"><p>深拷贝是完全拷贝一个数据，在堆中开辟一个存储空间，并分配一个新的地址，该地址指向保存在堆中的真实数据</p></div><p>使用<code>for/in</code>执行对象深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> eihei = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  eihei[key] = obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eihei.<span class="property">name</span> = <span class="string">&quot;哈哈&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eihei);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><h2 id="构建函数"><a href="#构建函数" class="headerlink" title="构建函数"></a>构建函数</h2><p>对象可以通过内置或自定义的构造函数创建。</p><h3 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h3><p>在函数中返回对象的函数称为工厂函数，工厂函数有以下优点</p><ul><li>减少重复创建相同类型对象的代码</li><li>修改工厂函数的方法影响所有同类对象</li></ul><p>使用字面量创建对象需要复制属性与方法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;欸嘿&quot;</span>,</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;eihei&quot;</span>,</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用工厂函数可以简化这个过程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">stu</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> lisi = <span class="title function_">stu</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">lisi.<span class="title function_">show</span>();</span><br><span class="line"><span class="keyword">const</span> eihei = <span class="title function_">stu</span>(<span class="string">&quot;欸嘿&quot;</span>);</span><br><span class="line">eihie.<span class="title function_">show</span>();</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>和工厂函数相似构造函数也用于创建对象，它的上下文为新的对象实例。</p><ul><li>构造函数名每个单词首字母大写即<code>Pascal</code> 命名规范</li><li><code>this</code>指当前创建的对象</li><li>不需要返回<code>this</code>系统会自动完成</li><li>需要使用<code>new</code>关键词生成对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//不需要返回，系统会自动返回</span></span><br><span class="line">  <span class="comment">// return this;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> lisi = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">lisi.<span class="title function_">show</span>();</span><br><span class="line"><span class="keyword">const</span> eihie = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;欸嘿&quot;</span>);</span><br><span class="line">eihei.<span class="title function_">show</span>();</span><br></pre></td></tr></table></figure><h3 id="对象函数"><a href="#对象函数" class="headerlink" title="对象函数"></a>对象函数</h3><p>在<code>JS</code>中函数也是一个对象</p><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>在严格模式下方法中的<code>this</code>值为 undefined，这是为了防止无意的修改 window 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> eihei = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">eihei.<span class="title function_">show</span>(); <span class="comment">//User</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dark = eihei.<span class="property">show</span>;</span><br><span class="line"><span class="title function_">dark</span>(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h2 id="属性访问器"><a href="#属性访问器" class="headerlink" title="属性访问器"></a>属性访问器</h2><p>getter 方法用于获得属性值，setter 方法用于设置属性，这是 JS 提供的存取器特性即使用函数来管理属性。</p><ul><li>用于避免错误的赋值</li><li>需要动态监测值的改变</li><li>属性只能在访问器和普通属性任选其一，不能共同存在</li></ul><h3 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter/setter"></a>getter/setter</h3><p>向对是地用户的年龄数据使用访问器监控控制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;后盾人&#x27;</span>, <span class="attr">age</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value != <span class="string">&quot;number&quot;</span> || value &gt; <span class="number">100</span> || value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;年龄格式错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">age</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`年龄是: <span class="subst">$&#123;<span class="variable language_">this</span>.data.age&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">user.<span class="property">age</span> = <span class="number">99</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><div class="tip info"><p>user.age = 99； 此行代码触发user{}中的 set age() 方法</p><p>console.log(user.age); 此行代码触发user{}中的 get age() 方法</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;对象是一种复杂的数据类型,  是一种无序的数据类型，它是多个属性(数据)和方法(功能)的集合，它允许动态的添</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://omygan.github.io/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="http://omygan.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Array数组</title>
    <link href="http://omygan.github.io/posts/e1962cae.html"/>
    <id>http://omygan.github.io/posts/e1962cae.html</id>
    <published>2022-11-20T14:52:44.000Z</published>
    <updated>2022-11-21T07:42:26.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传值与传址"><a href="#传值与传址" class="headerlink" title="传值与传址"></a>传值与传址</h1><p>JavaScript中有两种不同数据类型的值，分别是基本数据类型与引用数据类型</p><ul><li><strong>基本数据类型</strong>包含5类，分别是：Number、String、Boolean、Null、Undefined</li><li><strong>引用数据类型</strong>包含剩下的Array、Date、Math、RegExp、Object、Function等</li></ul><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>基本类型复制是值的复制，互相不受影响, 可以直接访问。下例中将 a 变量的值赋值给 b 变量后，因为基本类型变量是独立的所以 a 的改变不会影响 b 变量的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">// 100</span></span><br></pre></td></tr></table></figure><blockquote><p>如果从一个变量向另一个变量复制基本类型的值，会在变量变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上                                                                                                                                                                         ——《JavaScript高级程序设计》</p></blockquote><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>对于引用类型来讲，变量保存的是引用对象的指针，是通过引用地址访问的。变量间赋值时其实赋值是变量的指针，这样多个变量就引用的是同一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">web</span>: <span class="string">&quot;后盾人&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a.<span class="property">web</span> = <span class="string">&quot;hdcms&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">web</span>);    <span class="comment">// hdcms</span></span><br></pre></td></tr></table></figure><div class="tip success"><p>可以理解为引用地址存在栈中，引用地址指向堆中的真实数据，赋值操作只是拷贝了栈中的引用地址，并没有把堆中的真实数据赋给新变量</p></div><blockquote><p>当从一个变量向另一个变量复制引用的值时，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中。</p><p>不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上引用同一个对象。                                                                                                                          </p><p>​                                                                                                                                                                ——《JavaScript高级程序设计》</p></blockquote><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/%E5%9C%B0%E5%9D%80%E3%80%82png.jpg" alt=""></p><div class="tip bell"><p>思考&amp;实践：</p><p>​    map() 和 forEach() 操作 在不同数据类型下对数据的影响是怎样的？？？</p><p>​    —-未完待续</p></div><h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><p><strong>数组是多个变量值的集合，数组是<code>Array</code> 对象的实例，所以可以像对象一样调用方法。</strong></p><h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>使用对象方式创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="string">&#x27;欸嘿&#x27;</span>, <span class="string">&#x27;eihei&#x27;</span>)); <span class="comment">//[1, &quot;欸嘿&quot;, &quot;eihei&quot;]</span></span><br></pre></td></tr></table></figure><p>使用字面量创建是推荐的简单作法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">&quot;欸嘿&quot;</span>, <span class="number">123</span>];</span><br></pre></td></tr></table></figure><p>多维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [[<span class="number">123</span>], [<span class="string">&quot;欸嘿&quot;</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">1</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>！！！数组是引用类型可以使用<strong><code>const</code></strong>声明并修改它的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">&quot;欸嘿&quot;</span>, <span class="string">&quot;eihei&quot;</span>];</span><br><span class="line">array.<span class="title function_">push</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure><p>使用原型的 <code>length</code>属性可以获取数组元素数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = [<span class="string">&quot;欸嘿&quot;</span>, <span class="string">&quot;eihei&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd.<span class="property">length</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>数组可以设置任何值，下面是使用索引添加数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = [<span class="string">&quot;欸嘿&quot;</span>];</span><br><span class="line">hd[<span class="number">1</span>] = <span class="string">&quot;eihei&quot;</span>;</span><br></pre></td></tr></table></figure><p>下面直接设置 3 号数组，会将 1/2 索引的数组定义为空值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = [<span class="string">&quot;欸嘿&quot;</span>];</span><br><span class="line">hd[<span class="number">3</span>] = <span class="string">&quot;eihei&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd.<span class="property">length</span>); <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>声明多个空元素的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd);</span><br></pre></td></tr></table></figure><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h3><p>使用<code>Array.of</code> 与 <code>new Array</code> 不同的是设置一个参数时不会创建空元素数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd); <span class="comment">//[3]</span></span><br><span class="line"></span><br><span class="line">hd = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hd); <span class="comment">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><p>检测变量是否为数组类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>([<span class="number">1</span>, <span class="string">&quot;欸嘿&quot;</span>, <span class="string">&quot;eihei&quot;</span>])); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="number">9</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>可以将数组转换为字符串也可以将其他类型转换为数组。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>大部分数据类型都可以使用<code>.toString()</code> 函数转换为字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).<span class="title function_">toString</span>()); <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure><p>也可以使用函数 <code>String</code> 转换为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br></pre></td></tr></table></figure><p>或使用<code>join</code>连接为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>));<span class="comment">//1-2-3</span></span><br></pre></td></tr></table></figure><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><p>使用<code>Array.from</code>可将<code>类数组转换为数组，</code>类数组指包含 <code>length</code> 属性或可迭代的对象。</p><ul><li>第一个参数为要转换的数据，第二个参数为类似于<code>map</code> 函数的回调方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str = &#x27;欸嘿&#x27;;</span><br><span class="line">console.log(Array.from(str)); //[&quot;欸&quot;, &quot;嘿&quot;]</span><br></pre></td></tr></table></figure><p>为对象设置<code>length</code>属性后也可以转换为数组，但要下标为数值或数值字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;欸嘿&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(user)); <span class="comment">//[&quot;欸嘿&quot;, 22]</span></span><br></pre></td></tr></table></figure><p>DOM 元素<strong>转换为数组后来使用数组函数</strong>，第二个参数类似于<code>map</code> 函数的方法，可对<strong>数组元素执行函数</strong>处理。</p><div class="tip warning"><p>选中的DOM节点是伪数组，因此不可以直接使用数组函数，通过Array.from()方法转换后可以使用</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">message</span>=<span class="string">&quot;欸嘿&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">message</span>=<span class="string">&quot;eihei&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(btns); <span class="comment">//包含length属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Array</span>.<span class="title function_">from</span>(btns, <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        item.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;red&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="展开语法"><a href="#展开语法" class="headerlink" title="展开语法"></a>展开语法</h2><p>使用展开语法将DOM节点列表 转换为数组操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>hdcms<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>houdunren<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  [...divs].<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">div</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hide&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>使用展示语法可以替代 <code>arguments</code> 来<strong>接收任意数量的参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hd</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hd</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;欸嘿&quot;</span>); <span class="comment">//[1, 2, 3, &quot;欸嘿&quot;]</span></span><br></pre></td></tr></table></figure><p>也可以用于<strong>接收部分参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hd</span>(<span class="params">site, ...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(site, args); <span class="comment">//欸嘿 (3) [1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hd</span>(<span class="string">&quot;欸嘿&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>解构是一种更简洁的赋值特性，可以理解为分解一个数据的结构</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组使用</span></span><br><span class="line"><span class="keyword">let</span> [name, number] = [<span class="string">&#x27;欸嘿&#x27;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);  <span class="comment">// &#x27;欸嘿&#x27;</span></span><br></pre></td></tr></table></figure><p>剩余解构指用一个变量来接收剩余参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="string">&#x27;欸嘿&#x27;</span>, <span class="string">&#x27;eihei&#x27;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);     <span class="comment">// [&#x27;eihei&#x27;, 123]</span></span><br></pre></td></tr></table></figure><p>字符串解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [...a] = <span class="string">&quot;eihei&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//Array(5)</span></span><br></pre></td></tr></table></figure><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>向数组末尾添加新元素， <strong>返回值为数组的length,</strong> <strong>原数组改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;eihei&#x27;</span>, <span class="string">&#x27;欸嘿&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">push</span>(<span class="number">123</span>)) <span class="comment">// 结果为 3 而不是 [&#x27;eihei&#x27;, &#x27;欸嘿&#x27;, 123]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">// [&#x27;eihei&#x27;, &#x27;欸嘿&#x27;, 123]</span></span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>弹出数组的末尾元素， <strong>返回值为弹出去的元素, 原数组改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;eihei&#x27;</span>, <span class="string">&#x27;欸嘿&#x27;</span>， <span class="number">123</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>()) <span class="comment">//  123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">// [&#x27;eihei&#x27;, &#x27;欸嘿&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><p>去除数组的第一个元素，<strong>返回值为去除的元素,  原数组改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;eihei&#x27;</span>, <span class="string">&#x27;欸嘿&#x27;</span>， <span class="number">123</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">shift</span>()) <span class="comment">// &#x27;eihei&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">// [&#x27;欸嘿&#x27;, 123]</span></span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><p>向数组首位添加一个新元素， <strong>返回值为数组的length, 原数组改变</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;欸嘿&#x27;</span>， <span class="number">123</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">shift</span>(<span class="string">&#x27;eihei&#x27;</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">// [&#x27;eihei&#x27;, &#x27;欸嘿&#x27;, 123]</span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>截取数组的部分元素，只穿一个参数时则截取到末尾， 不设置参数则截取全部，  <strong>不改变原数组</strong>，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>splice的功能比较强大，截取数组的部分元素，可以添加、删除、替换数组的元素，<strong>原数组改变</strong></p><p>第一个参数为从哪开始删除，第二个参数为删除的数量</p><p>第三个参数来设置在删除位置添加的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">//返回删除的元素 [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//删除数据后的原数组 [0, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;eihei&#x27;</span>, <span class="string">&#x27;欸嘿&#x27;</span>)); <span class="comment">//返回删除的元素 [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//删除数据后的原数组 [0, &#x27;eihei&#x27;, &#x27;欸嘿&#x27;, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="合并拆分"><a href="#合并拆分" class="headerlink" title="合并拆分"></a>合并拆分</h2><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>将数组元素连接成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>))<span class="comment">// &#x27;1-2-3&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>将字符串分割成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;1-2-3&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)) <span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="展开语法-1"><a href="#展开语法-1" class="headerlink" title="展开语法"></a>展开语法</h3><p>使用展开语法来合并数组，使用<code>...</code> 可将数组展开为多个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;欸嘿&#x27;</span>, ...a];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//[&quot;a&quot;, &quot;欸嘿&quot;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><h3 id="indexof"><a href="#indexof" class="headerlink" title="indexof"></a>indexof</h3><p>从前向后查找指定元素，找到<strong>返回该元素索引值</strong>， 找不到返回-1，第二个参数可指定位置向后查找</p><p>lastindexof从后向前查找</p><p>indexof是严格类型约束，<strong>要求元素满足全等</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">2</span>)); <span class="comment">// 2 </span></span><br></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>查找指定元素， 查到<strong>返回true</strong>，否则返回false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">6</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>查找到指定元素返回此元素值并中断查找， 找不到则返回<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;欸嘿&quot;</span>, <span class="string">&quot;eihei&quot;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="keyword">let</span> find = arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item == <span class="string">&quot;欸嘿&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(find); <span class="comment">//欸嘿</span></span><br></pre></td></tr></table></figure><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h3><p>查到返回索引值， 否则返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;欸嘿&quot;</span>, <span class="string">&quot;eihei&quot;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="keyword">let</span> find = arr.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item == <span class="string">&quot;欸嘿&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(find); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>反转数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reverse</span>()); <span class="comment">//[9, 2, 4, 1]</span></span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>默认从小到大排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sort</span>()); <span class="comment">//[1, 2, 4, 9]</span></span><br></pre></td></tr></table></figure><p>sort<code>每次使用两个值进行比较</code>Array.sort((a,b)=&gt;a-b</p><ul><li>返回负数 a 排在 b 前面，从小到大</li><li>返回正数 b 排在 a 前面</li><li>返回 0 时不动</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">v1, v2</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> v2 - v1;</span><br><span class="line">&#125;)); <span class="comment">//[9, 4, 2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>根据数组长度遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-in"><a href="#for-in" class="headerlink" title="for/in"></a>for/in</h3><p>key为数组的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-of"><a href="#for-of" class="headerlink" title="for/of"></a>for/of</h3><p>value为数组的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5]</span><br><span class="line">for(const value of arr) &#123;</span><br><span class="line"> console.log(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p><code>forEach</code>使函数作用在每个数组元素上，但是没有返回值。</p><p>续上：</p><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/forEach.png" alt=""></p><div class="tip "><p>forEach没有返回值， 当数组里是基本类型数据时不会改变原数组， 当数组里是引用型数据类型时，引用类型数据内的值发生改变，原因是引用类型数据指向同一个数据，forEach操作的函数改变了同一个数据， 所以数据发生改变</p><p>map()方法同理</p></div><h2 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h2><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><p>递归检查元素， 所有元素操作都为真才返回真</p><p>查看班级中同学的 JS 成绩是否都及格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">js</span>: <span class="number">89</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;马六&quot;</span>, <span class="attr">js</span>: <span class="number">55</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">js</span>: <span class="number">78</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> resust = user.<span class="title function_">every</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">js</span> &gt;= <span class="number">60</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resust);</span><br></pre></td></tr></table></figure><p>标题的关键词检查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> words = [<span class="string">&#x27;欸嘿&#x27;</span>, <span class="string">&#x27;eihei&#x27;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="keyword">let</span> title = <span class="string">&#x27;欸嘿Blog&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> state = words.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> title.<span class="title function_">indexOf</span>(item) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (state == <span class="literal">false</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标题必须包含所有关键词&#x27;</span>);     </span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><p>递归检查元素，有一个元素操作为真则返回真</p><p>标题的关键词检查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> words = [<span class="string">&#x27;欸嘿&#x27;</span>, <span class="string">&#x27;eihei&#x27;</span>, <span class="number">123</span>];</span><br><span class="line"><span class="keyword">let</span> title = <span class="string">&#x27;欸嘿Blog&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> state = words.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> title.<span class="title function_">indexOf</span>(item) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (state == <span class="literal">false</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;标题必须包含关键词&#x27;</span>);    <span class="comment">// 标题含有关键词</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>过滤数组中元素， <strong>不改变原数组</strong>， 返回新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [</span><br><span class="line">  &#123;<span class="attr">fruit</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="attr">price</span>: <span class="number">15</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">fruit</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="attr">price</span>: <span class="number">20</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">fruit</span>: <span class="string">&#x27;草莓&#x27;</span>, <span class="attr">price</span>: <span class="number">25</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> fruitPrice = fruits.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item.<span class="property">category</span> &gt;= <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruitPrice);<span class="comment">// [&#123;fruit: &#x27;香蕉&#x27;, price: 20&#125;,&#123;fruit: &#x27;草莓&#x27;, price: 25&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>使用 <code>map</code> 函数可以对数组的所有元素上应用函数，用于映射出新的值， <strong>返回一个新数组</strong></p><p>获取数组所有标题组合的新数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let lessons = [</span><br><span class="line">  &#123;title: &#x27;媒体查询响应式布局&#x27;,category: &#x27;css&#x27;&#125;,</span><br><span class="line">  &#123;title: &#x27;FLEX 弹性盒模型&#x27;,category: &#x27;css&#x27;&#125;,</span><br><span class="line">  &#123;title: &#x27;MYSQL多表查询随意操作&#x27;,category: &#x27;mysql&#x27;&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">console.log(lessons.map(item =&gt; item.title));</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>使用 <code>reduce</code> 与 <code>reduceRight</code> 函数可以迭代数组的所有元素，<code>reduce</code> 从前开始 <code>reduceRight</code> 从后面开始。下面通过函数计算课程点击数的和。</p><p>第一个参数是执行函数，第二个参数为初始值</p><ul><li>传入第二个参数时将所有元素循环一遍</li><li>不传第二个参数时从第二个元素开始循环</li></ul><p>函数参数说明如下</p><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>prev</td><td>上次调用回调函数返回的结果</td></tr><tr><td>cur</td><td>当前的元素值</td></tr><tr><td>index</td><td>当前的索引</td></tr><tr><td>array</td><td>原数组</td></tr></tbody></table></div><p>统计元素出现的次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countArrayELem</span>(<span class="params">array, elem</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, cur</span>) =&gt;</span> (total += cur == elem ? <span class="number">1</span> : <span class="number">0</span>), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countArrayELem</span>(numbers, <span class="number">1</span>)); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>取数组中的最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arrayMax</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">reduce</span>(</span><br><span class="line">  <span class="function">(<span class="params">max, elem</span>) =&gt;</span> (max &gt; elem ? max : elem), array[<span class="number">0</span>]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrayMax</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>]));</span><br></pre></td></tr></table></figure><p>取价格最高的商品</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cart = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;iphone&quot;</span>, <span class="attr">price</span>: <span class="number">12000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;imac&quot;</span>, <span class="attr">price</span>: <span class="number">25000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;ipad&quot;</span>, <span class="attr">price</span>: <span class="number">3600</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">maxPrice</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">reduce</span>(</span><br><span class="line">    <span class="function">(<span class="params">goods, elem</span>) =&gt;</span> (goods.<span class="property">price</span> &gt; elem.<span class="property">price</span> ? goods : elem),</span><br><span class="line">    array[<span class="number">0</span>]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">maxPrice</span>(cart));</span><br></pre></td></tr></table></figure><p>计算购物车中的商品总价</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cart = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;iphone&quot;</span>, <span class="attr">price</span>: <span class="number">12000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;imac&quot;</span>, <span class="attr">price</span>: <span class="number">25000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;ipad&quot;</span>, <span class="attr">price</span>: <span class="number">3600</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> total = cart.<span class="title function_">reduce</span>(</span><br><span class="line"><span class="function">(<span class="params">total, goods</span>) =&gt;</span> total += goods.<span class="property">price</span>, <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total); <span class="comment">//40600</span></span><br></pre></td></tr></table></figure><p>获取价格超过 1 万的商品名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> goods = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;iphone&quot;</span>, <span class="attr">price</span>: <span class="number">12000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;imac&quot;</span>, <span class="attr">price</span>: <span class="number">25000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;ipad&quot;</span>, <span class="attr">price</span>: <span class="number">3600</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNameByPrice</span>(<span class="params">array, price</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">goods, elem</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elem.<span class="property">price</span> &gt; price) &#123;</span><br><span class="line">      goods.<span class="title function_">push</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> goods;</span><br><span class="line">  &#125;, []).<span class="title function_">map</span>(<span class="function"><span class="params">elem</span> =&gt;</span> elem.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(<span class="title function_">getNameByPrice</span>(goods, <span class="number">10000</span>));</span><br></pre></td></tr></table></figure><p>使用 <code>reduce</code> 实现数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> filterArr = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (pre.<span class="title function_">includes</span>(cur) === <span class="literal">false</span>) &#123;</span><br><span class="line">      pre = [...pre, cur];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pre;</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterArr); <span class="comment">// [1,2,6]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;传值与传址&quot;&gt;&lt;a href=&quot;#传值与传址&quot; class=&quot;headerlink&quot; title=&quot;传值与传址&quot;&gt;&lt;/a&gt;传值与传址&lt;/h1&gt;&lt;p&gt;JavaScript中有两种不同数据类型的值，分别是基本数据类型与引用数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;stro</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://omygan.github.io/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="http://omygan.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>计算属性&amp;侦听属性</title>
    <link href="http://omygan.github.io/posts/d0a69f1e.html"/>
    <id>http://omygan.github.io/posts/d0a69f1e.html</id>
    <published>2022-11-20T13:33:44.000Z</published>
    <updated>2022-11-21T07:37:04.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Computed计算属性"><a href="#Computed计算属性" class="headerlink" title="Computed计算属性"></a>Computed计算属性</h1><ul><li>定义：使用的属性不存在（属性不在data中），要通过已有属性计算得到，若依赖的属性变动则计算属性也随之变动</li><li>原理：底层使用了 <code>Object.defineProperty()</code> 提供的 getter 和 setter方法</li><li>getter 何时执行：<ul><li>初次读取时执行一次</li><li>依赖的数据发生改变时执行</li></ul></li><li>优点：与 <code>methods</code> 相比，有缓存机制，效率更高</li><li>若计算属性要修改，必须声明 ==setter 响应==修改，且 setter 中要引起==依赖的数据==发生==改变==</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">测试：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;x&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line"><span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span><br><span class="line"><span class="attr">x</span>:<span class="string">&#x27;你好&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"><span class="attr">fullName</span>:&#123;</span><br><span class="line"><span class="comment">//get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span><br><span class="line"><span class="comment">//get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(this) //此处的this是vm</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>,value)</span><br><span class="line"><span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>]</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip sync"><p>那么set什么时候调用? </p><p>当fullName被<span class='p red'>直接修改</span>时。在此处set无法被调用，因为fullname是通过get方法下面的依赖属性间接修改的</p></div><p><strong>计算属性的简写</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Watch侦听属性"><a href="#Watch侦听属性" class="headerlink" title="Watch侦听属性"></a>Watch侦听属性</h1><p><code>watch</code> 侦听器允许开发者监视数据的变化，针对数据的变化做特定的操作。</p><div class="tip "><p>侦听器可以监听普通属性和计算属性</p><p>​    <code>computed</code> 能完成的功能，<code>watch</code> 也能</p><p>​    <code>watch</code> 能完成的功能，<code>computed</code> 不一定，如异步操作</p><p>​    <em>当被监视的属性变化时, 回调函数自动调用, 进行相关操作</em></p><p>​    <em>监视的属性必须存在（必须在data中），才能进行监视！！</em></p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watch 简写形式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">username</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新值: &#x27;</span>, newVal)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;旧值: &#x27;</span>, oldVal)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，组件在初次加载完毕后不会调用 <code>watch</code> 侦听器。如果想让 <code>watch</code> 侦听器立即被调用，需要使用 <code>immediate</code> 选项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="comment">// 对象形式的侦听器</span></span><br><span class="line">  <span class="attr">username</span>: &#123;</span><br><span class="line">    <span class="comment">// handler 属性是固定写法</span></span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>watch</code> 侦听的是一个对象，如果对象中的属性值发生了变化，则无法被监听到。此时需要使用 <code>deep</code> 选项进行<strong>深度监听</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">info</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若只想监听对象里单个属性的变化，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">info</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// 记得加引号</span></span><br><span class="line">    <span class="string">&#x27;info.username&#x27;</span>: &#123;</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 Vue 实例的 <code>$watch</code> 监听：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;...&#125;)</span><br><span class="line"></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,<span class="keyword">function</span>(<span class="params">newValue,oldValue</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="姓名案例Watch实现"><a href="#姓名案例Watch实现" class="headerlink" title="姓名案例Watch实现"></a>姓名案例Watch实现</h1><div class="tip warning"><p><em>两个重要的小原则：</em></p><p>​    1. <em>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</em></p><p>​    2.  <em>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象。</em></p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line"><span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span><br><span class="line"><span class="attr">fullName</span>:<span class="string">&#x27;张-三&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line"><span class="title function_">firstName</span>(<span class="params">val</span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">lastName</span>(<span class="params">val</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>==结论==：不如Computed属性方便， 但实现了异步操作</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Computed计算属性&quot;&gt;&lt;a href=&quot;#Computed计算属性&quot; class=&quot;headerlink&quot; title=&quot;Computed计算属性&quot;&gt;&lt;/a&gt;Computed计算属性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义：使用的属性不存在（属性不在data中），要</summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Record</title>
    <link href="http://omygan.github.io/posts/9c989aa7.html"/>
    <id>http://omygan.github.io/posts/9c989aa7.html</id>
    <published>2022-11-19T11:55:55.000Z</published>
    <updated>2022-11-20T18:21:08.548Z</updated>
    
    
    
    
    <category term="Record" scheme="http://omygan.github.io/categories/Record/"/>
    
    
    <category term="record" scheme="http://omygan.github.io/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>Freedom</title>
    <link href="http://omygan.github.io/posts/3fcfc58a.html"/>
    <id>http://omygan.github.io/posts/3fcfc58a.html</id>
    <published>2022-11-19T11:25:32.000Z</published>
    <updated>2022-11-20T18:24:07.407Z</updated>
    
    
    
    
    <category term="freedom" scheme="http://omygan.github.io/categories/freedom/"/>
    
    
    <category term="freedom" scheme="http://omygan.github.io/tags/freedom/"/>
    
  </entry>
  
  <entry>
    <title>Vue核心基础</title>
    <link href="http://omygan.github.io/posts/f8e09374.html"/>
    <id>http://omygan.github.io/posts/f8e09374.html</id>
    <published>2022-11-19T09:48:34.000Z</published>
    <updated>2022-11-20T18:17:50.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-核心基础"><a href="#Vue-核心基础" class="headerlink" title="Vue 核心基础"></a>Vue 核心基础</h1><p><a href="https://cn.vuejs.org/">官网链接</a></p><blockquote><p>Vue 是动态构建用户界面的渐进式 JavaScript 框架</p><p>Vue 借鉴 Angular 的模板和数据绑定技术，React 的组件化和虚拟 DOM 技术</p></blockquote><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><h3 id="Object-defineProperty-的使用"><a href="#Object-defineProperty-的使用" class="headerlink" title="Object.defineProperty() 的使用"></a><code>Object.defineProperty()</code> 的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> number = <span class="number">19</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置一</span></span><br><span class="line"><span class="comment">// 参数：对象、属性名、配置</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 属性值</span></span><br><span class="line">  <span class="attr">value</span>: <span class="number">21</span>,</span><br><span class="line">  <span class="comment">// 属性是否可修改</span></span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 属性是否可枚举（遍历）</span></span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 属性是否可删除</span></span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置二</span></span><br><span class="line"><span class="comment">// getter、setter 不能和 value、writable 同时指定</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumberable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age 属性被读取&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age 属性被修改&#x27;</span>, value)</span><br><span class="line">    number = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="何为数据代理"><a href="#何为数据代理" class="headerlink" title="何为数据代理"></a>何为数据代理</h3><p><strong><emp>数据代理：通过一个对象对另一个对象的属性进行操作</emp></strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">21</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">b</span>: <span class="number">10</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="property">a</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    obj.<span class="property">a</span> = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">a</span> <span class="comment">// 21</span></span><br><span class="line">obj2.<span class="property">a</span> = <span class="number">1000</span></span><br><span class="line">obj.<span class="property">a</span> <span class="comment">// 1000</span></span><br></pre></td></tr></table></figure><h3 id="Vue-中的数据代理"><a href="#Vue-中的数据代理" class="headerlink" title="Vue 中的数据代理"></a>Vue 中的数据代理</h3><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/%25E6%2595%25B0%25E6%258D%25AE%25E4%25BB%25A3%25E7%2590%2586.png" alt=""></p><div class="tip info"><p>Vue 中通过 vm 实例对象代理对 data 对象属性的操作，让我们更方便操作 data 中的数据。</p><p>data 中的数据实际上被存在 vm._data 属性上，如果不进行代理，使用起来很不方便。</p><p>通过 Object.defineProperty() 给 vm 添加属性，并且指定 getter 和 setter，通过 getter 和 setter 访问和修改 data 对应是属性。</p></div><h2 id="Vue-监测数据的原理"><a href="#Vue-监测数据的原理" class="headerlink" title="Vue 监测数据的原理"></a>Vue 监测数据的原理</h2><div class="tip "><p>监测数据，即 Vue 是如何监听数据发生变化，从而重新解析模板渲染页面的。Vue 会监测 data 中所有层级的数据。</p></div><h3 id="Vue-监测对象数据"><a href="#Vue-监测对象数据" class="headerlink" title="Vue 监测对象数据"></a>Vue 监测对象数据</h3><ol><li>原理：通过 <code>Object.defineProperty()</code> 为属性添加 <code>getter</code>、<code>setter</code> ，对属性的读取、修改进行拦截，即数据劫持</li></ol><div class="tip warning"><p>存在问题：</p><p>​                对象新增加的属性，默认不做响应式处理</p><p>​                对象删除属性，也不是响应式的</p></div><ol><li><p>解决办法，使用如下：</p><ul><li><p><code>Vue.set(target, propertyName/index, value)</code></p></li><li><p><code>vm.$set(target, propertyName/index, value)</code></p></li><li><p><code>Vue.delete(target, propertyName/index)</code></p></li><li><p><code>vm.$delete(target, propertyName/index)</code></p></li><li><p><code>Vue.set()</code> 和 <code>vm.$set()</code> 不能给 vm 或 vm 的根数据对象添加属性（即 data）</p></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单模拟实现对象的数据监测，Vue 更完善</span></span><br><span class="line"><span class="comment">// Vue 通过 vm.name 即可修改</span></span><br><span class="line"><span class="comment">// Vue 实现深层监听</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">99</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Observer</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"></span><br><span class="line">  keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[key]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据被修改，重新解析模板...&#x27;</span>)</span><br><span class="line">        obj[key] = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> <span class="title class_">Observer</span>(person)</span><br><span class="line">vm.<span class="property">_data</span> = observer</span><br></pre></td></tr></table></figure><h3 id="Vue-监测数组"><a href="#Vue-监测数组" class="headerlink" title="Vue 监测数组"></a>Vue 监测数组</h3><ol><li><p>原理：通过重写数组的 API 实现拦截：<code>push()、pop()、shift()、unshift()、splice()、sort()、reverse()</code></p></li><li><p>7 个 API 之所以是响应式的，是因为 Vue 对这些方法进行了<a href="https://cn.vuejs.org/v2/guide/list.html#数组更新检测">包裹 (opens new window)</a>，即二次封装。做了两件事：调用对应的原生方法更新数组 &amp; 重新解析模板更新页面</p></li></ol><div class="tip warning"><p>存在问题：</p><p>​                直接通过数组下标修改是非响应式的</p></div><ol><li><p>解决办法：</p><ul><li><p>使用 7 个 API 修改数组</p></li><li><p><code>Vue.set()</code>、<code>vm.$set()</code></p></li><li><p><code>Vue.delete()</code>、<code>vm.$delete()</code></p></li></ul></li></ol><h2 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h2><ul><li><em>功能：用于解析标签体内容。</em></li><li><em>写法：，xxx是js表达式，且可以直接读取到data中的所有属性。</em></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码&#123;&#123; password &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &#123;&#123;&#125;&#125; 支持简 JS 表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; flag ? 111 : 000&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;docsify&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="number">55520</span>,</span><br><span class="line">    <span class="attr">flag</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h2><ul><li><em>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。</em></li><li><em>举例：v-bind:href=”xxx” 或  简写为 :href=”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</em></li><li><em>备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</em></li></ul><h3 id="属性指令v-bind"><a href="#属性指令v-bind" class="headerlink" title="属性指令v-bind"></a>属性指令v-bind</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:placeholder</span>=<span class="string">&quot;desc&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-bind 简写形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;url&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;这是一张图片&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-bind 支持 JS 表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;&#x27;hello&#x27; + 1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;请输入用户名&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;www.baidu.com&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向绑定v-model"><a href="#双向绑定v-model" class="headerlink" title="双向绑定v-model"></a>双向绑定v-model</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; province &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;province&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h3><ol><li><em>单向绑定(v-bind)：数据只能从data流向页面。</em></li><li><em>双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。</em></li></ol><p class='p red'>**备注**：</p><ul><li><p><em>双向绑定一般都应用在表单类元素上（如：==input==、==select==等）</em></p></li><li><p><em>v-model:x = value 可以简写为 v-model = value，因为v-model默认收集的就是value值。</em></p></li><li>v-bind:x = value 可以简写为 :x = value</li></ul><h3 id="v-model-指令修饰符"><a href="#v-model-指令修饰符" class="headerlink" title="v-model 指令修饰符"></a>v-model 指令修饰符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">作用</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">.number</td><td style="text-align:center">将用户输入转为数值类型</td><td style="text-align:center"><code>&lt;input v-model.number=&quot;age&quot; /&gt;</code></td></tr><tr><td style="text-align:center">.trim</td><td style="text-align:center">删除输入的首尾空白字符</td><td style="text-align:center"><code>&lt;input v-model.trim=&quot;msg&quot;&gt;</code></td></tr><tr><td style="text-align:center">.lazy</td><td style="text-align:center">当失去焦点时，才更新数据，类似防抖</td><td style="text-align:center"><code>&lt;input v-model.lazy=&quot;msg&quot;&gt;</code></td></tr></tbody></table></div><h3 id="v-model-收集表单数据"><a href="#v-model-收集表单数据" class="headerlink" title="v-model 收集表单数据"></a>v-model 收集表单数据</h3><ol><li><p><code>&lt;input type=&quot;text&quot;/&gt;</code> ，收集的是 <code>value</code> 值，用户输入的就是 <code>value</code> 值。</p></li><li><p><code>&lt;input type=&quot;radio&quot;/&gt;</code> ，收集的是 <code>value</code> 值，且要给标签配置 <code>value</code> 值。</p></li><li><p><code>&lt;input type=&quot;checbox&quot;/&gt;</code></p><ul><li>没有配置 <code>value</code> 属性，<em><code>v-model</code>的初始值是非数组收集的就是 <code>checked</code></em> <em>（勾选 or 未勾选，是布尔值）</em></li><li>配置input的value属性, <em><code>v-model</code> 的初始值是数组，那么勾选收集的的就是 <code>value</code> 组成的数组</em></li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInfo.account&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.password&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;userInfo.age&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    性别： 男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    爱好： 学习<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    打游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    所属校区</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    其他信息：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span> /&gt;</span>阅读接受协议</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">userInfo</span>:&#123;</span><br><span class="line">      <span class="attr">account</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">      <span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">      <span class="attr">hobby</span>:[],</span><br><span class="line">      <span class="attr">city</span>:<span class="string">&#x27;beijing&#x27;</span>,</span><br><span class="line">      <span class="attr">other</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">agree</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip cogs"><p>tips：单选框如果不设置value，则v-model就拿不到对应属性的值，点击后v-model为null，必须设置name属性且属性值必须相同，否则单选框效果会丢失。多选框不设置vale会出现勾选一个其它几个都被勾选的情况，且拿到的值只能为true，多选框绑定的value的初始值必须为对象</p></div><h2 id="事件绑定指令-v-on"><a href="#事件绑定指令-v-on" class="headerlink" title="事件绑定指令 v-on"></a>事件绑定指令 v-on</h2><h3 id="v-on-基础用法"><a href="#v-on-基础用法" class="headerlink" title="v-on 基础用法"></a>v-on 基础用法</h3><p><strong><em>使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名</em></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-on 缩写形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件参数对象"><a href="#事件参数对象" class="headerlink" title="事件参数对象"></a>事件参数对象</h3><p><strong>如果事件处理函数没有传参，则默认会传一个事件参数对象 <code>$event</code> ，通过它可以获取触发事件的元素，并进行相关操作。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果事件处理函数传递参数了，则默认的 <code>$event</code> 会被覆盖，需要手动进行传递。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(2, $event)&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">step, e</span>) &#123;</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> += step</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><div class="table-container"><table><thead><tr><th style="text-align:left">事件修饰符</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>.prevent</strong></td><td>阻止默认行为，如 a 链接跳转、表单提交</td></tr><tr><td style="text-align:left"><strong>.stop</strong></td><td>阻止事件冒泡</td></tr><tr><td style="text-align:left">.once</td><td>绑定的事件只触发 1 次</td></tr><tr><td style="text-align:left">.capture</td><td>以捕获模式触发事件处理函数</td></tr><tr><td style="text-align:left">.self</td><td>只有在 <code>event.target</code> 是当前元素自身时触发事件处理函数</td></tr><tr><td style="text-align:left">.passive</td><td>事件的默认行为立即执行，无需等待事件回调执行完毕</td></tr></tbody></table></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;fn&quot;</span>&gt;</span>阻止链接跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.stop</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>阻止事件冒泡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- .passive ：如 `onwheel` 鼠标滚轮事件，是先执行事件的回调再进行滚动。 --&gt;</span></span><br><span class="line"></span><br><span class="line">如果回调比较耗时，那么会等一段时间才发生滚动。 添加 .passive 后，则先进行滚动再执行回调。</span><br></pre></td></tr></table></figure><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><ol><li><p>Vue 中常用的按键别名：</p><ul><li><p>回车 =&gt; enter</p></li><li><p>删除 =&gt; delete (捕获“删除”和“退格”键)</p></li><li><p>退出 =&gt; esc</p></li><li><p>空格 =&gt; space</p></li><li><p>换行 =&gt; tab (特殊，必须配合 keydown 去使用)</p></li><li><p>上 =&gt; up</p></li><li><p>下 =&gt; down</p></li><li><p>左 =&gt; left</p></li><li><p>右 =&gt; right</p></li></ul></li><li><p>Vue 未提供别名的按键，可以使用按键原始的 <code>key</code> 值去绑定，但注意要转为 kebab-case（短横线命名）</p></li><li><p>系统修饰键（用法特殊）：ctrl、alt、shift、meta（即 win 键）</p><ul><li><p>配合 keyup 使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</p></li><li><p>配合 keydown 使用：正常触发事件。</p></li></ul></li><li><p>可使用 keyCode 去指定具体的按键，此法不推荐，因为 keyCode 以后可能废除</p></li><li><p><code>Vue.config.keyCodes.自定义键名 = 键码</code> ，可以去定制按键别名</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.esc</span>=<span class="string">&quot;back&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keydown.tab</span>=<span class="string">&quot;showInfo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.caps-lock</span>=<span class="string">&quot;showInfo&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.huiche</span>=<span class="string">&quot;showInfo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.13</span>=<span class="string">&quot;showInfo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  Vue.config.keyCodes.huiche = 13</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-if=&quot;status === 200&quot;&gt;success&lt;/p&gt;</span><br><span class="line">&lt;p v-else-if=&quot;status === 201&quot;&gt;xxx&lt;/p&gt;</span><br><span class="line">&lt;p v-else&gt;yyy&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p v-show=&quot;status === 404&quot;&gt;error&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- template 只能和 v-if 搭配使用 --&gt;</span><br><span class="line">&lt;template v-if=&quot;status === 200&quot;&gt;</span><br><span class="line">  &lt;p&gt;111&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;222&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;333&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="v-if-和-v-show-的区别"><a href="#v-if-和-v-show-的区别" class="headerlink" title="v-if 和 v-show 的区别"></a>v-if 和 v-show 的区别</h3><p>实现原理不同：</p><ul><li><code>v-if</code> 通过创建或删除 DOM 元素来控制元素的显示与隐藏</li><li><code>v-show</code> 通过添加或删除元素的 <code>style=&quot;display: none&quot;</code> 样式来控制元素的显示与隐藏</li></ul><p>性能消耗不同：</p><ul><li><code>v-if</code> 切换开销更高，如果运行时条件很少改变，使用 <code>v-if</code> 更好</li><li><code>v-show</code> 初始渲染开销更高，如果切换频繁，使用 <code>v-show</code> 更好</li></ul><h2 id="列表渲染指令-v-for"><a href="#列表渲染指令-v-for" class="headerlink" title="列表渲染指令 v-for"></a>列表渲染指令 v-for</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 遍历数组 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item, index) in list&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历对象 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(value, key) in obj&quot; :key=&quot;key&quot;&gt;&#123;&#123; key &#125;&#125; - &#123;&#123; value &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历字符串 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(char, index) in str&quot; :key=&quot;index&quot;&gt;&#123;&#123; index &#125;&#125; - &#123;&#123; char &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历次数 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(number, index) in 5&quot; :key=&quot;index&quot;&gt;&#123;&#123; index &#125;&#125; - &#123;&#123; number &#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">list</span>: [...],</span><br><span class="line">    <span class="attr">obj</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Bruce&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">88</span>,</span><br><span class="line">      <span class="attr">sex</span>: <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">str</span>: <span class="string">&#x27;hello vue&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="key-的作用"><a href="#key-的作用" class="headerlink" title="key 的作用"></a><code>key</code> 的作用</h3><p><strong><code>key</code> 的作用：</strong></p><ul><li>当列表的数据变化时，默认情况下，vue 会尽可能的复用已存在的 DOM 元素，从而提升渲染的性能。但这种默认的性能优化策略，会导致有状态的列表无法被正确更新。</li><li>为了给 vue 一个提示，以便它能跟踪每个节点的身份，从而在保证有状态的列表被正确更新的前提下，提升渲染的性能。此时，需要为每项提供一个唯一的 key 属性。</li><li><code>key</code> 是虚拟 DOM 对象的标识，可提高页面更新渲染的效率。当数据变化时，Vue 会根据新数据生成新的虚拟 DOM，随后进行新旧虚拟 DOM 的差异比较</li></ul><p><strong>比较规则</strong></p><ul><li>旧虚拟 DOM 找到和新虚拟 DOM 相同的 key：<ul><li>若内容没变，直接复用真实 DOM</li><li>若内容改变，生成新的真实 DOM，替换旧的真实 DOM</li></ul></li><li>旧虚拟 DOM 未找到和新虚拟 DOM 相同的 key：创建新的真实 DOM，渲染到页面</li></ul><div class="tip warning faa-horizontal animated-hover"><p><strong>key的注意事项：</strong></p><p>key 的值只能是<strong>字符串</strong>或<strong>数字</strong>类型</p><p>key 的值必须具有唯一性（即：key 的值不能重复）</p><p>建议把数据项 id 属性的值作为 key 的值（因为 id 属性的值具有唯一性）</p><p>使用 index 的值当作 key 的值没有意义（因为 index 的值不具有唯一性）</p><p>建议使用 v-for 指令时一定要指定 key 的值（既提升性能、又防止列表状态紊乱）</p></div><p><img src="https://wyb1-1315133738.cos.ap-beijing.myqcloud.com/img/key.2e34b3cc.png" alt=""></p><h2 id="其它内置指令"><a href="#其它内置指令" class="headerlink" title="其它内置指令"></a>其它内置指令</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><p><code>v-text</code> 指令会覆盖元素默认值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-text=&quot;username&quot;&gt;这段内容会被覆盖&lt;/p&gt;</span><br><span class="line">data() &#123; return &#123; username: &quot;Bruce&quot; &#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><blockquote><p>v-html 存在安全问题，容易导致 XSS 攻击</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-html=&quot;desc&quot;&gt;原本内容被覆盖&lt;/p&gt;</span><br><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    desc: &#x27;&lt;h1 style=&quot;color: red&quot;&gt;红色标题&lt;/h1&gt;&#x27;，</span><br><span class="line">    str: &#x27;&lt;a href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><ul><li>本质是一个特殊属性，Vue 实例创建完毕并接管容器后，会删除 <code>v-cloak</code> 属性</li><li>使用 CSS 配合 <code>v-cloak</code> 可解决网速慢时页面展示文本闪烁 的问题</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><ul><li><code>v-once</code> 所在节点初次渲染后就成为静态内容</li><li>即数据变化不会引起 <code>v-once</code> 所在节点内容的更新，可用于优化性能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 v-once&gt;初次的内容：&#123;&#123; content &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;最新的内容：&#123;&#123; content &#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><ul><li>跳过所在节点的编译过程</li><li>没有使用插值语法等特殊语法的节点，可用其跳过编译过程，加快编译</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 v-pre&gt;Vue 内置指令&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;用户名：&#123;&#123; username &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul><li>过滤器常用于文本的格式化，可用在插值表达式和 <code>v-bind</code> 属性绑定。</li><li>过滤器只在 <code>vue 2.x</code> 和 <code>vue 1.x</code> 中支持，<code>vue 3.x</code> 废弃了过滤器，官方建议使用计算属性或方法代替过滤器。</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在 JS 表达式尾部通过管道符进行调用--&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; message | capitalize &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;div :id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义私有过滤器</span></span><br><span class="line"><span class="attr">filters</span>: &#123;</span><br><span class="line">  <span class="title function_">capitalize</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + str.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 main.js 中定义全局过滤器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;capitalize&#x27;</span>, <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + str.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果私有过滤器和全局过滤器冲突，按照就近原则调用私有过滤器。</p><h3 id="连续调用多个过滤器"><a href="#连续调用多个过滤器" class="headerlink" title="连续调用多个过滤器"></a>连续调用多个过滤器</h3><p>过滤器从左往右调用，前一个过滤器的结果交给下一个过滤器继续处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text | capitalize | maxLength &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器传参"><a href="#过滤器传参" class="headerlink" title="过滤器传参"></a>过滤器传参</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message | myFilter(arg1, arg2) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数永远都是管道符前的值</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;myFilter&#x27;</span>, <span class="function">(<span class="params">value, arg1, arg2</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-核心基础&quot;&gt;&lt;a href=&quot;#Vue-核心基础&quot; class=&quot;headerlink&quot; title=&quot;Vue 核心基础&quot;&gt;&lt;/a&gt;Vue 核心基础&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/&quot;&gt;官网链接&lt;/a&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Vue" scheme="http://omygan.github.io/categories/Vue/"/>
    
    
    <category term="vue" scheme="http://omygan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://omygan.github.io/posts/d95d7e09.html"/>
    <id>http://omygan.github.io/posts/d95d7e09.html</id>
    <published>2022-11-18T05:40:36.000Z</published>
    <updated>2022-11-19T16:01:34.042Z</updated>
    
    <content type="html"><![CDATA[<div class="tip "><p>小试牛刀</p></div><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p><a href="https://hexo.io/zh-cn/">Hexo快速、简洁且高效的博客框架</a></p><h4 id="1-创建一个简单的博客"><a href="#1-创建一个简单的博客" class="headerlink" title="1. 创建一个简单的博客:"></a>1. 创建一个简单的博客:</h4><ol><li>全局安装hexo</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><ol><li>初始化一个blog文件夹</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><ol><li>进入blog目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure><ol><li>新建文章</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new xxx || hexo n xxx</span><br></pre></td></tr></table></figure><ol><li>执行命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure><ol><li>在线预览</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server || hexo s</span><br></pre></td></tr></table></figure><ol><li>一键部署</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy || hexo d</span><br></pre></td></tr></table></figure><h4 id="2-如何部署到github"><a href="#2-如何部署到github" class="headerlink" title="2. 如何部署到github"></a>2. 如何部署到github</h4><h5 id="1-创建："><a href="#1-创建：" class="headerlink" title="1. 创建："></a>1. 创建：</h5><ul><li><p>新建一个名为你的用户名.github.io的仓库</p></li><li><p>比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io">http://test.github.io</a> 了，是不是很方便？由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 </p></li></ul><h5 id="2-修改-config-yml的内容"><a href="#2-修改-config-yml的内容" class="headerlink" title="2. 修改_config.yml的内容 :"></a>2. 修改_config.yml的内容 :</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: https://github.com/test/test.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><blockquote><p>repo是仓库的地址</p></blockquote><h5 id="3-执行hexo-d-可能的报错以及解决办法"><a href="#3-执行hexo-d-可能的报错以及解决办法" class="headerlink" title="3. 执行hexo d 可能的报错以及解决办法"></a>3. 执行hexo d 可能的报错以及解决办法</h5><h6 id="在执行hexo-d-之前先运行如下代码"><a href="#在执行hexo-d-之前先运行如下代码" class="headerlink" title="在执行hexo d 之前先运行如下代码"></a>在执行hexo d 之前先运行如下代码</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;xxx&quot;</span><br><span class="line">git config --global user.name &quot;xxx&quot;</span><br></pre></td></tr></table></figure><h6 id="错误-OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#错误-OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="错误: OpenSSL SSL_read: Connection was reset, errno 10054"></a>错误: OpenSSL SSL_read: Connection was reset, errno 10054</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure><h4 id="3-配置butterfly主题"><a href="#3-配置butterfly主题" class="headerlink" title="3. 配置butterfly主题"></a>3. 配置butterfly主题</h4><p>在blog目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>升级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在主題目錄下，运行 git pull</span><br></pre></td></tr></table></figure><p>修改 Hexo 根目录下 _config.yml，把主题改为butterfly</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>如果你沒有 pug 以及 stylus 的渲染器，下载安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip &quot;&gt;&lt;p&gt;小试牛刀&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;Hexo简介&quot;&gt;&lt;a href=&quot;#Hexo简介&quot; class=&quot;headerlink&quot; title=&quot;Hexo简介&quot;&gt;&lt;/a&gt;Hexo简介&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://</summary>
      
    
    
    
    <category term="Hexo" scheme="http://omygan.github.io/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://omygan.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
